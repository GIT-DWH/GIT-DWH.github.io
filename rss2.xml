<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>天之界</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>踏一步便是虚无</description>
    <pubDate>Sun, 08 Jul 2018 07:33:34 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>拓扑排序模板</title>
      <link>http://yoursite.com/2018/07/08/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/</link>
      <guid>http://yoursite.com/2018/07/08/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/</guid>
      <pubDate>Sun, 08 Jul 2018 07:29:11 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/8293/1528099940080/thumb_Mon_Jun_04_2018.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/8293/1528099940080/thumb_Mon_Jun_04_2018.jpg" alt="img"></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="keyword">int</span> in[maxn],seq[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topology</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(in[i] == <span class="number">0</span>) seq[++cnt] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> head = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(head &lt;= cnt)&#123;</span><br><span class="line">        <span class="keyword">int</span> u = seq[head];</span><br><span class="line">        <span class="keyword">int</span> ans = cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; G[u].size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = G[u][i];</span><br><span class="line">            in[v]--;</span><br><span class="line">            <span class="keyword">if</span>(in[v] == <span class="number">0</span>) seq[++cnt] = v;</span><br><span class="line">        &#125;</span><br><span class="line">        head++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当cnt不等于n时，说明这图有环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x,&amp;y);</span><br><span class="line">        G[x].push_back(y);</span><br><span class="line">        in[y]++;;</span><br><span class="line">    &#125;</span><br><span class="line">    topology();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= cnt;i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,seq[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/07/08/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/#disqus_thread</comments>
    </item>
    
    <item>
      <title>去重全排列</title>
      <link>http://yoursite.com/2018/07/08/%E5%8E%BB%E9%87%8D%E5%85%A8%E6%8E%92%E5%88%97/</link>
      <guid>http://yoursite.com/2018/07/08/%E5%8E%BB%E9%87%8D%E5%85%A8%E6%8E%92%E5%88%97/</guid>
      <pubDate>Sun, 08 Jul 2018 06:57:39 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/42077/1519635636227/thumb_Mon_Feb_26_2018.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/42077/1519635636227/thumb_Mon_Feb_26_2018.jpg" alt="img"></p><a id="more"></a><h2 id="公式为"><a href="#公式为" class="headerlink" title="公式为:"></a>公式为:</h2><p>$  \frac{n!}{(k_1)! (k_2)! … (k_p)!}  $</p><p>$n$ : 串长度</p><p>$k_i$ : 串中第 $i$ 种元素出现的次数</p><p>$p$ : 串中不同元素的个数</p><h2 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h2><h3 id="串为-abac-求串的去重全排列的个数"><a href="#串为-abac-求串的去重全排列的个数" class="headerlink" title="串为 $abac$ , 求串的去重全排列的个数"></a>串为 $abac$ , 求串的去重全排列的个数</h3><ul><li><p>串的长度为 $4$ , 所以 $n$ $=$ $4$</p></li><li><p>在这个串中，一共有 $3$ 种元素，分别为 $a$ , $b$ , $c$ 所以 $p$ $=$ $3$.</p></li><li>元素 $a$ 出现 $2$ 次,所以 $k_1$ $=$ $2$ </li><li>元素 $b$ 出现 $1$ 次,所以 $k_2$ $=$ $1$</li><li>元素 $c$ 出现 $1$ 次,所以 $k_3$ $=$ $1$ </li></ul><p>所以去重全排列个数为：$\frac{4!}{(2)! <em> (1)! </em> (1)! }$ $=$ $12$ </p><h4 id="去重全排列如下："><a href="#去重全排列如下：" class="headerlink" title="去重全排列如下："></a>去重全排列如下：</h4><p><code>1.aabc</code></p><p><code>2.aacb</code></p><p><code>3.abac</code></p><p><code>4.abca</code></p><p><code>5.acab</code></p><p><code>6.acba</code></p><p><code>7.cbaa</code></p><p><code>8.bcaa</code></p><p><code>9.caba</code></p><p><code>10.acba</code></p><p><code>11.baca</code></p><p><code>12.abca</code></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/07/08/%E5%8E%BB%E9%87%8D%E5%85%A8%E6%8E%92%E5%88%97/#disqus_thread</comments>
    </item>
    
    <item>
      <title>dfs序模板</title>
      <link>http://yoursite.com/2018/07/08/dfs%E5%BA%8F%E6%A8%A1%E6%9D%BF/</link>
      <guid>http://yoursite.com/2018/07/08/dfs%E5%BA%8F%E6%A8%A1%E6%9D%BF/</guid>
      <pubDate>Sun, 08 Jul 2018 06:47:40 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/210541/1531033503381/thumb_Sun_Jul_08_2018.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/210541/1531033503381/thumb_Sun_Jul_08_2018.jpg" alt="img"></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;G[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> in[maxn],out[maxn],d[maxn];</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> deep)</span></span>&#123;</span><br><span class="line">    in[x] = ++tot;</span><br><span class="line">    d[x] = deep;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; G[x].size();i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = G[x][i];</span><br><span class="line">        <span class="keyword">if</span>(v != pre) dfs(v,x,deep + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    out[x] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        G[x].push_back(y);</span><br><span class="line">        G[y].push_back(x);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,i,in[i],out[i]);<span class="comment">//节点i的子树的编号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/07/08/dfs%E5%BA%8F%E6%A8%A1%E6%9D%BF/#disqus_thread</comments>
    </item>
    
    <item>
      <title>网络流(最大流)模板题</title>
      <link>http://yoursite.com/2018/07/08/%E7%BD%91%E7%BB%9C%E6%B5%81(%E6%9C%80%E5%A4%A7%E6%B5%81)%E6%A8%A1%E6%9D%BF%E9%A2%98/</link>
      <guid>http://yoursite.com/2018/07/08/%E7%BD%91%E7%BB%9C%E6%B5%81(%E6%9C%80%E5%A4%A7%E6%B5%81)%E6%A8%A1%E6%9D%BF%E9%A2%98/</guid>
      <pubDate>Sun, 08 Jul 2018 03:10:45 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/97/3/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/97/3/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意:"></a>题意:</h2><p>现在有m个池塘(从1到m开始编号,1为源点,m为汇点),及n条有向水渠,给出这n条水渠所连接的点和所能流过的最大流量，求从源点到汇点能流过的最大流量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">The input includes several cases. For each case, the first line contains two space-separated integers, N (0 &lt;= N &lt;= 200) and M (2 &lt;= M &lt;= 200). N is the number of ditches that Farmer John has dug. M is the number of intersections points for those ditches. Intersection 1 is the pond. Intersection point M is the stream. Each of the following N lines contains three integers, Si, Ei, and Ci. Si and Ei (1 &lt;= Si, Ei &lt;= M) designate the intersections between which this ditch flows. Water will flow through this ditch from Si to Ei. Ci (0 &lt;= Ci &lt;= 10,000,000) is the maximum rate at which water will flow through the ditch.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">For each <span class="keyword">case</span>, output a single integer, the maximum rate at which water may emptied from the pond. </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Input</span><br><span class="line"><span class="number">5</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">40</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">20</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">20</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">30</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">10</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">50</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Source</span><br><span class="line">USACO <span class="number">93</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Recommend</span><br><span class="line">lwg</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> pre[<span class="number">2</span> * maxn],last[maxn],other[<span class="number">2</span> * maxn],deep[maxn];</span><br><span class="line">LL cost[maxn];</span><br><span class="line"><span class="keyword">int</span> all = <span class="number">-1</span>,n,m;</span><br><span class="line"><span class="keyword">int</span> aim;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,LL z)</span></span>&#123;</span><br><span class="line">pre[++all] = last[x];</span><br><span class="line">last[x] = all;</span><br><span class="line">other[all] = y;</span><br><span class="line">cost[all] = z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Bfs</span><span class="params">(<span class="keyword">int</span> S,<span class="keyword">int</span> T)</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(deep,<span class="number">0</span>,<span class="keyword">sizeof</span>(deep));</span><br><span class="line">deep[S] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; seq;</span><br><span class="line">seq.push(S);</span><br><span class="line"><span class="keyword">while</span>(!seq.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> x = seq.front();</span><br><span class="line">seq.pop();</span><br><span class="line"><span class="keyword">int</span> dt = last[x];</span><br><span class="line"><span class="keyword">while</span>(dt != <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> dr = other[dt];</span><br><span class="line"><span class="keyword">if</span>(!deep[dr] &amp;&amp; cost[dt])&#123;</span><br><span class="line">deep[dr] = deep[x] + <span class="number">1</span>;</span><br><span class="line">seq.push(dr);</span><br><span class="line">&#125;</span><br><span class="line">dt = pre[dt];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> deep[T];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,LL fl)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(now == aim) <span class="keyword">return</span> fl;</span><br><span class="line">LL f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dt = last[now];</span><br><span class="line"><span class="keyword">while</span>(dt != <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> dr = other[dt];</span><br><span class="line"><span class="keyword">if</span>(cost[dt] &amp;&amp; deep[dr] == deep[now] + <span class="number">1</span>)&#123;</span><br><span class="line">LL x = dfs(dr,min(fl,cost[dt]));</span><br><span class="line">cost[dt] -= x;</span><br><span class="line">cost[dt ^ <span class="number">1</span>] += x;</span><br><span class="line">fl -= x;</span><br><span class="line">f += x;</span><br><span class="line">&#125;</span><br><span class="line">dt = pre[dt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!f) deep[now] = <span class="number">-2</span>;</span><br><span class="line"><span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">Dinic</span><span class="params">(<span class="keyword">int</span> S,<span class="keyword">int</span> T)</span></span>&#123;</span><br><span class="line">aim = T;LL sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(Bfs(S,T))&#123;</span><br><span class="line">sum += dfs(S,<span class="number">1L</span>L &lt;&lt; <span class="number">60</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;m,&amp;n))&#123;</span><br><span class="line"><span class="built_in">memset</span>(last,<span class="number">-1</span>,<span class="keyword">sizeof</span>(last)); all = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x,y; LL z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %lld"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">build(x,y,z);</span><br><span class="line">build(y,x,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Dinic(<span class="number">1</span>,n));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/07/08/%E7%BD%91%E7%BB%9C%E6%B5%81(%E6%9C%80%E5%A4%A7%E6%B5%81)%E6%A8%A1%E6%9D%BF%E9%A2%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>后缀数组总结</title>
      <link>http://yoursite.com/2018/07/08/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/</link>
      <guid>http://yoursite.com/2018/07/08/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/</guid>
      <pubDate>Sun, 08 Jul 2018 03:06:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/98/11/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/98/11/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="一-最长公共前缀"><a href="#一-最长公共前缀" class="headerlink" title="一. 最长公共前缀"></a>一. 最长公共前缀</h2><p>给定一个字符串，询问某两个后缀的最长公共前缀。</p><p>算法分析：<br>按照上面所说的做法，求两个后缀的最长公共前缀可以转化为求某个区间上</p><p>的最小值。对于这个 RMQ 问题，可以用 O(nlogn)的时间先预处理，以后每次回答询问的时间为 O(1)。所以对于<br>本问题，预处理时间为 O(nlogn)，每次回答询问的时间为 O(1)。如果 RMQ 问题用 O(n)的时间预处理，那么本问题预处理的时间可以做到 O(n)。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RMQ</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len;i++) dp[i][<span class="number">0</span>] = lcp[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">20</span>;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= len)&#123;</span><br><span class="line">dp[i][j] = min(dp[i][j - <span class="number">1</span>],dp[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_RMQ</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &gt; R) L--,swap(L,R);</span><br><span class="line"><span class="keyword">else</span> R--;</span><br><span class="line"><span class="keyword">int</span> kk = (<span class="keyword">int</span>) log2(<span class="number">1.0</span> * (R - L + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> min(dp[L][kk],dp[R - (<span class="number">1</span> &lt;&lt; kk) + <span class="number">1</span>][kk]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> com = Get(Rank[i],Rank[j]);<span class="comment">//查询以s[i]和s[j]为开头的最长公共前缀</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-可重叠最长重复子串"><a href="#二-可重叠最长重复子串" class="headerlink" title="二.可重叠最长重复子串"></a>二.可重叠最长重复子串</h2><p>给定一个字符串，求最长重复子串，这两个子串可以重叠。<br>算法分析：<br>这道题是后缀数组的一个简单应用。做法比较简单，只需要求 height 数组里的最大值即可。首先求最长重复子串，等价于求两个后缀的最长公共前缀的最大值。因为任意两个后缀的最长公共前缀都是 height 数组里某一段的最小值，那么这个值一定不大于 height 数组里的最大值。所以最长重复子串的长度就是height 数组里的最大值。这个做法的时间复杂度为 O(n)。</p><h2 id="三-不可重叠最长重复子串"><a href="#三-不可重叠最长重复子串" class="headerlink" title="三.不可重叠最长重复子串"></a>三.不可重叠最长重复子串</h2><p>给定一个字符串，求最长重复子串，这两个子串不能重叠。<br>算法分析：<br>这题比上一题稍复杂一点。先二分答案，把题目变成判定性问题：判断是否存在两个长度为 k 的子串是相同的，且不重叠。解决这个问题的关键还是利用height 数组。把排序后的后缀分成若干组，其中每组的后缀之间的 height 值都不小于 k。例如，字符串为“aabaaaab”，当 k=2 时，后缀分成了 4 组，如图 5所示。</p><p><img src="C:\Users\GP62\AppData\Local\Temp\1527854764877.png" alt="1527854764877"></p><p>容易看出，有希望成为最长公共前缀不小于 k 的两个后缀一定在同一组。然后对于每组后缀，只须判断每个后缀的 sa 值的最大值和最小值之差是否不小于k。如果有一组满足，则说明存在，否则不存在。整个做法的时间复杂度为O(nlogn)。本题中利用 height 值对后缀进行分组的方法很常用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">8</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n + <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(lcp[i] &lt; mid) sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">sum++;</span><br><span class="line"><span class="keyword">if</span>(sum + <span class="number">1</span> &gt;= m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;s[i]);</span><br><span class="line">Creat_sa();</span><br><span class="line">Creat_lcp();</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1</span>,r = n,ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid)) ans = mid,l = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四-可重叠的-k-次最长重复子串"><a href="#四-可重叠的-k-次最长重复子串" class="headerlink" title="四.可重叠的 k 次最长重复子串"></a>四.可重叠的 k 次最长重复子串</h2><p>给定一个字符串，求至少出现 k 次的最长重复子串，这 k 个子串可以重叠。算法分析：这题的做法和上一题差不多，也是先二分答案，然后将后缀分成若干组。不同的是，这里要判断的是有没有一个组的后缀个数不小于 k。如果有，那么存k 个相同的子串满足条件，否则不存在。这个做法的时间复杂度为 O(nlogn)。</p><h2 id="五-不相同的子串的个数"><a href="#五-不相同的子串的个数" class="headerlink" title="五.不相同的子串的个数"></a>五.不相同的子串的个数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">Init();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">len = <span class="built_in">strlen</span>(s);</span><br><span class="line">Creat_sa();</span><br><span class="line">Creat_lcp();</span><br><span class="line">LL n = len;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= len;i++)sum += lcp[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,n * (n + <span class="number">1L</span>L) / <span class="number">2L</span>L - sum);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六-重复次数最多的连续重复子串"><a href="#六-重复次数最多的连续重复子串" class="headerlink" title="六.重复次数最多的连续重复子串"></a>六.重复次数最多的连续重复子串</h2><p>给定一个字符串，求重复次数最多的连续重复子串。算法分析：先穷举长度 L，然后求长度为 L 的子串最多能连续出现几次。首先连续出现1 次是肯定可以的，所以这里只考虑至少 2 次的情况。假设在原字符串中连续出现 2次，记这个子字符串为 S，那么 S 肯定包括了字符 r[0], r[L], r[L<em>2],r[L</em>3], ……中的某相邻的两个。所以只须看字符 r[L<em>i]和 r[L</em>(i+1)]往前和往后各能匹配到多远，记这个总长度为 K，那么这里连续出现了 K/L+1 次。最后看最大值是多少。</p><p><img src="C:\Users\GP62\AppData\Local\Temp\1527855722886.png" alt="1527855722886"></p><p>穷举长度 L 的时间是 n，每次计算的时间是 n/L。所以整个做法的时间复杂度是 O(n/1+n/2+n/3+……+n/n)=O(nlogn)。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">ccabababc</span><br><span class="line">daabbccaa</span><br><span class="line">#</span><br><span class="line">Sample Output</span><br><span class="line">Case <span class="number">1</span>: ababab</span><br><span class="line">Case <span class="number">2</span>: aa</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">ma = <span class="number">1</span>;<span class="comment">//, ma_len = len;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">1</span>;l &lt;= len;l++)&#123;</span><br><span class="line"><span class="keyword">int</span> pos1 = <span class="number">0</span>,pos2 = l,cnt = <span class="number">0</span>,p1,p2;</span><br><span class="line"><span class="keyword">while</span>(pos2 &lt; len)&#123;</span><br><span class="line">cnt = Get_RMQ(Rank[pos1],Rank[pos2]);</span><br><span class="line">p1 = pos1 - (l - cnt % l);</span><br><span class="line">p2 = pos2 - (l - cnt % l);</span><br><span class="line"><span class="keyword">if</span>(p1 &gt;= <span class="number">0</span> &amp;&amp; p2 &gt;= <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> sum = Get_RMQ(Rank[p1],Rank[p2]);</span><br><span class="line">cnt += sum &gt;= l ? (l - cnt % l) : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ma == cnt / l + <span class="number">1</span>) ans.push_back(l);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ma &lt; cnt / l + <span class="number">1</span>)&#123;</span><br><span class="line">ans.clear();</span><br><span class="line">ans.push_back(l);</span><br><span class="line">ma = cnt / l + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">pos1 = pos2,pos2 = pos1 + l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s))&#123;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'#'</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">memset</span>(lcp,<span class="number">0</span>,<span class="keyword">sizeof</span>(lcp));</span><br><span class="line"><span class="built_in">memset</span>(Rank,<span class="number">0</span>,<span class="keyword">sizeof</span>(Rank));</span><br><span class="line">len = <span class="built_in">strlen</span>(s);</span><br><span class="line">Creat_sa();</span><br><span class="line">Creat_lcp();</span><br><span class="line">RMQ();</span><br><span class="line">Solve();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: "</span>,++t);</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">pos = <span class="number">0</span>,ma_len = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//printf("%d\n",ma);</span></span><br><span class="line"><span class="comment">//for(int i = 0;i &lt; ans.size();i++) printf("%d\n",ans[i]);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= len;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; ans.size();j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(sa[i] + ans[j] &gt;= len) <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//printf("*%d %d\n",sa[i],ans[j]);</span></span><br><span class="line"><span class="keyword">if</span>(Get_RMQ(Rank[sa[i]],Rank[sa[i] + ans[j]]) &gt;= (ma - <span class="number">1</span>) * ans[j])&#123;</span><br><span class="line">pos = sa[i];</span><br><span class="line">ma_len = ans[j] * ma;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; ma_len;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,s[pos + i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七-子串的个数"><a href="#七-子串的个数" class="headerlink" title="七.子串的个数"></a>七.子串的个数</h2><p>长度不小于 k 的公共子串的个数</p><p>给定两个字符串 A 和 B，求长度不小于 k 的公共子串的个数（可以相同）。</p><p>样例 1:A=“xx”，B=“xx”，k=1，长度不小于 k 的公共子串的个数是 5。</p><p>样例 2:A =“aababaa”，B =“abaabaa”，k=2，长度不小于 k 的公共子串的个数是22。</p><p>算法分析:</p><p>基本思路是计算 A 的所有后缀和 B 的所有后缀之间的最长公共前缀的长度，把最长公共前缀长度不小于 k 的部分全部加起来。先将两个字符串连起来，中间用一个没有出现过的字符隔开。按 height 值分组后，接下来的工作便是快速的统计每组中后缀之间的最长公共前缀之和。扫描一遍，每遇到一个 B 的后缀就统计与前面的 A 的后缀能产生多少个长度不小于 k 的公共子串，这里 A 的后缀需要用一个单调的栈来高效的维护。然后对 A 也这样做一次。</p><h2 id="八-不小于-k-个字符串中的最长子串"><a href="#八-不小于-k-个字符串中的最长子串" class="headerlink" title="八.不小于 k 个字符串中的最长子串"></a>八.不小于 k 个字符串中的最长子串</h2><p>给定 n 个字符串，求出现在不小于 k 个字符串中的最长子串。</p><p>算法分析:</p><p>将 n 个字符串连起来，中间用不相同的且没有出现在字符串中的字符隔开，求后缀数组。然后二分答案，用和例 3 同样的方法将后缀分成若干组，判断每组的后缀是否出现在不小于 k 个的原串中。这个做法的时间复杂度为O(nlogn)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">K = n / <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">Sample Input</span><br><span class="line"><span class="number">3</span></span><br><span class="line">abcdefg</span><br><span class="line">bcdefgh</span><br><span class="line">cdefghi</span><br><span class="line"><span class="number">3</span></span><br><span class="line">xxx</span><br><span class="line">yyy</span><br><span class="line">zzz</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">bcdefg</span><br><span class="line">cdefgh</span><br><span class="line"></span><br><span class="line">?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> check(<span class="keyword">int</span> mid)&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(lcp[i] &lt; mid)&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = num[sa[i]];</span><br><span class="line"><span class="keyword">int</span> y = num[sa[i + <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">if</span>(!vis[x] &amp;&amp; x != <span class="number">0</span>) vis[x] = <span class="number">1</span>,sum++;</span><br><span class="line"><span class="keyword">if</span>(!vis[y] &amp;&amp; y != <span class="number">0</span>) vis[y] = <span class="number">1</span>,sum++;</span><br><span class="line"><span class="keyword">if</span>(sum &gt; n / <span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">s.clear();</span><br><span class="line"><span class="keyword">int</span> all = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="keyword">sizeof</span>(tmp));</span><br><span class="line"><span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; h;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; h.size();j++)&#123;</span><br><span class="line">num[all++] = i;</span><br><span class="line">s += h[j];</span><br><span class="line">&#125;</span><br><span class="line">s += (<span class="string">'A'</span> + (++cnt)),num[all++] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">len = s.size();</span><br><span class="line">Creat_sa();</span><br><span class="line">Creat_lcp();</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1</span>,r = len,ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid)) ans = mid,l = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"?\n\n"</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(lcp[i] &lt; ans) &#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis)),sum = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = num[sa[i]];</span><br><span class="line"><span class="keyword">int</span> y = num[sa[i + <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">if</span>(x != y)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[x] &amp;&amp; x != <span class="number">0</span>) vis[x] = <span class="number">1</span>,sum++,pos = sa[i];</span><br><span class="line"><span class="keyword">if</span>(!vis[y] &amp;&amp; y != <span class="number">0</span>) vis[y] = <span class="number">1</span>,sum++,pos = sa[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum &gt; n / <span class="number">2</span> &amp;&amp; lcp[i + <span class="number">1</span>] &lt; ans) cnt.push_back(pos);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; cnt.size();i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = cnt[i];j &lt;= cnt[i] + ans - <span class="number">1</span>;j++)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九-每个字符串至少出现两次且不重叠的最长子串"><a href="#九-每个字符串至少出现两次且不重叠的最长子串" class="headerlink" title="九.每个字符串至少出现两次且不重叠的最长子串"></a>九.每个字符串至少出现两次且不重叠的最长子串</h2><p>给定 n 个字符串，求在每个字符串中至少出现两次且不重叠的最长子串。</p><p>算法分析:</p><p>做法和上题大同小异，也是先将 n 个字符串连起来，中间用不相同的且没有出现在字符串中的字符隔开，求后缀数组。然后二分答案，再将后缀分组。判断的时候，要看是否有一组后缀在每个原来的字符串中至少出现两次，并且在每个原来的字符串中，后缀的起始位置的最大值与最小值之差是否不小于当前答案（判断能否做到不重叠，如果题目中没有不重叠的要求，那么不用做此判断）。这个做法的时间复杂度为 O(nlogn)。</p><h2 id="十-出现或反转后出现在每个字符串中的最长子串"><a href="#十-出现或反转后出现在每个字符串中的最长子串" class="headerlink" title="十.出现或反转后出现在每个字符串中的最长子串"></a>十.出现或反转后出现在每个字符串中的最长子串</h2><p>给定 n 个字符串，求出现或反转后出现在每个字符串中的最长子串。</p><p>算法分析:</p><p>这题不同的地方在于要判断是否在反转后的字符串中出现。其实这并没有加大题目的难度。只需要先将每个字符串都反过来写一遍，中间用一个互不相同的且没有出现在字符串中的字符隔开，再将 n 个字符串全部连起来，中间也是用一个互不相同的且没有出现在字符串中的字符隔开，求后缀数组。然后二分答案，再将后缀分组。判断的时候，要看是否有一组后缀在每个原来的字符串或反转后的字符串中出现。这个做法的时间复杂度为 O(nlogn)。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">ABCD</span><br><span class="line">BCDFF</span><br><span class="line">BRCD</span><br><span class="line"><span class="number">2</span></span><br><span class="line">rose</span><br><span class="line">orchid</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= len + <span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(lcp[i] &lt; mid)&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = num[sa[i]];</span><br><span class="line"><span class="keyword">int</span> y = num[sa[i + <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">if</span>(!vis[x] &amp;&amp; x != <span class="number">0</span>) vis[x] = <span class="number">1</span>,sum++;</span><br><span class="line"><span class="keyword">if</span>(!vis[y] &amp;&amp; y != <span class="number">0</span>) vis[y] = <span class="number">1</span>,sum++;</span><br><span class="line"><span class="keyword">if</span>(sum == n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">s.clear();</span><br><span class="line"><span class="keyword">int</span> all = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="keyword">sizeof</span>(tmp));</span><br><span class="line"><span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; h;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; h.size();j++)&#123;</span><br><span class="line">num[all++] = i;</span><br><span class="line">s += (h[j]);</span><br><span class="line">&#125;</span><br><span class="line">s += (<span class="string">'A'</span> + (++cnt));</span><br><span class="line">num[all++] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = h.size() - <span class="number">1</span>;j &gt;= <span class="number">0</span>;j--)&#123;</span><br><span class="line">num[all++] = i;</span><br><span class="line">s += (h[j]);</span><br><span class="line">&#125;</span><br><span class="line">s += (<span class="string">'A'</span> + (++cnt));</span><br><span class="line">num[all++] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">len = s.size();</span><br><span class="line">Creat_sa();</span><br><span class="line">Creat_lcp();</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1</span>,r = <span class="number">105</span>,ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid)) ans = mid,l = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/07/08/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/#disqus_thread</comments>
    </item>
    
    <item>
      <title>后缀数组-求最长公共子串长度</title>
      <link>http://yoursite.com/2018/07/08/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-%E6%B1%82%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E9%95%BF%E5%BA%A6/</link>
      <guid>http://yoursite.com/2018/07/08/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-%E6%B1%82%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E9%95%BF%E5%BA%A6/</guid>
      <pubDate>Sun, 08 Jul 2018 03:02:34 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/98/6/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/98/6/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意:"></a>题意:</h2><p> 求最长公共子串长度（反转也算）</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">ABCD</span><br><span class="line">BCDFF</span><br><span class="line">BRCD</span><br><span class="line">2</span><br><span class="line">rose</span><br><span class="line">orchid</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h2><p>把原串和反转后的串连在一起，然后二分长度，分组Check。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> sa[maxn],Rank[maxn],lcp[maxn],tmp[maxn];</span><br><span class="line"><span class="built_in">string</span> s,h;</span><br><span class="line"><span class="keyword">int</span> len,k,n;</span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Rank[i] != Rank[j]) <span class="keyword">return</span> Rank[i] &lt; Rank[j];</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> ri = i + k &lt;= len ? Rank[i + k] : <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> rj = j + k &lt;= len ? Rank[j + k] : <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> ri &lt; rj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Creat_sa</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= len;i++)&#123;</span><br><span class="line">sa[i] = i;</span><br><span class="line">Rank[i] = i &lt; len ? s[i] : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">1</span>;k &lt;= len;k *= <span class="number">2</span>)&#123;</span><br><span class="line">sort(sa,sa + len + <span class="number">1</span>,cmp);</span><br><span class="line">tmp[sa[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= len;i++)&#123;</span><br><span class="line">tmp[sa[i]] = tmp[sa[i - <span class="number">1</span>]] + (cmp(sa[i - <span class="number">1</span>],sa[i]) ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= len;i++) Rank[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Creat_lcp</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= len;i++) Rank[sa[i]] = i;</span><br><span class="line"><span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">lcp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= len;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> j = sa[Rank[i] - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(h &gt; <span class="number">0</span>) h--;</span><br><span class="line"><span class="keyword">for</span>(;i + h &lt; len &amp;&amp; j + h &lt; len;h++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i + h] != s[j + h]) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">lcp[Rank[i] - <span class="number">1</span>] = h;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= len + <span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(lcp[i] &lt; mid)&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = num[sa[i]];</span><br><span class="line"><span class="keyword">int</span> y = num[sa[i + <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">if</span>(!vis[x] &amp;&amp; x != <span class="number">0</span>) vis[x] = <span class="number">1</span>,sum++;</span><br><span class="line"><span class="keyword">if</span>(!vis[y] &amp;&amp; y != <span class="number">0</span>) vis[y] = <span class="number">1</span>,sum++;</span><br><span class="line"><span class="keyword">if</span>(sum == n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">s.clear();</span><br><span class="line"><span class="keyword">int</span> all = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="keyword">sizeof</span>(tmp));</span><br><span class="line"><span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; h;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; h.size();j++)&#123;</span><br><span class="line">num[all++] = i;</span><br><span class="line">s += (h[j]);</span><br><span class="line">&#125;</span><br><span class="line">s += (<span class="string">'A'</span> + (++cnt));<span class="comment">//用从未出现过的字符相连</span></span><br><span class="line">num[all++] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = h.size() - <span class="number">1</span>;j &gt;= <span class="number">0</span>;j--)&#123;</span><br><span class="line">num[all++] = i;</span><br><span class="line">s += (h[j]);</span><br><span class="line">&#125;</span><br><span class="line">s += (<span class="string">'A'</span> + (++cnt));</span><br><span class="line">num[all++] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">len = s.size();</span><br><span class="line">Creat_sa();</span><br><span class="line">Creat_lcp();</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1</span>,r = <span class="number">105</span>,ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid)) ans = mid,l = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/07/08/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-%E6%B1%82%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E9%95%BF%E5%BA%A6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ZOJ - 3769 - Diablo III (分组背包 ，dp)</title>
      <link>http://yoursite.com/2018/07/08/ZOJ%20-%203769%20-%20Diablo%20III%20(%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85%20%EF%BC%8Cdp)/</link>
      <guid>http://yoursite.com/2018/07/08/ZOJ%20-%203769%20-%20Diablo%20III%20(%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85%20%EF%BC%8Cdp)/</guid>
      <pubDate>Sun, 08 Jul 2018 02:57:49 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/98/15/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/98/15/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><ul><li>多组输入</li><li>每组先输入 <strong>n</strong> ， <strong>m</strong>。</li><li><strong>n</strong> ： 总共有 <strong>n</strong> 件装备。 <strong>m</strong> ： 挑选的装备耐久度之和要大于等于 <strong>m</strong>。</li><li>接下来的 <strong>n</strong> 行，第 <strong>i</strong> 行，输入第 <strong>i</strong> 件装备的种类 <strong>Si</strong> ，伤害值 <strong>Di</strong> ，耐久度 <strong>Ti</strong>。</li><li><strong>条件1</strong>：如果装备了 <strong>Two-Handed</strong> ， 就不能装备 <strong>Weapon</strong> ， <strong>Shield </strong> 其中任一一种装备。</li><li><strong>条件2：</strong>可以选择装备一个 <strong>Finger</strong> ，也可以选择装备两个 <strong>Finger</strong>，其他相同种类的装备只能装备一个。</li></ul><p><strong>问</strong>:在满足所挑选的装备的耐久度之和大于等于 <strong>m</strong> 条件下，使得所挑选装备的总伤害值最大。若存在，输出总伤害值，否则，输出 <strong>-1</strong>。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line"></span><br><span class="line">1 25</span><br><span class="line"></span><br><span class="line">Hand 30 20</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5 25</span><br><span class="line"></span><br><span class="line">Weapon 15 5</span><br><span class="line"></span><br><span class="line">Shield 5 15</span><br><span class="line"></span><br><span class="line">Two-Handed 25 5</span><br><span class="line"></span><br><span class="line">Finger 5 10</span><br><span class="line"></span><br><span class="line">Finger 5 10</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br><span class="line"></span><br><span class="line">35</span><br></pre></td></tr></table></figure><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><p>$N (1 &lt;= N &lt;= 300)$ ,$M (0 &lt;= M &lt;= 50000)$ ,$(1 &lt;= Di, Ti &lt;= 50000).$ </p><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><ul><li><p>若不考虑 <strong>条件1</strong> 和 <strong>条件2</strong> 的话，这道题就相当于是 <strong>分组背包</strong> 。</p></li><li><p>考虑 <strong>条件1</strong> ：既然装备了 <strong>Two-Handed</strong> ， 就不能装备 <strong>Weapon</strong> ， <strong>Shield </strong> 其中任一一种装备的话，那我们就可以把【单个 <strong>Two-Handed</strong>】，【单个 <strong>Weapon</strong>】，【单个 <strong>Shield</strong>】和【<strong>Weapon</strong> 和 <strong>Shield</strong> 两两组合】当做<strong>同一种种类</strong>的装备，这样就不会冲突了。</p></li><li><p>考虑 <strong>条件2</strong> ：我们可以把【单个 <strong>Finger</strong> 】和【<strong>Finger</strong> 和 <strong>Finger</strong> 两两组合】（要排除自己和自己组合）当做<strong>同一种种类</strong>的装备。</p></li><li><p><strong>状态</strong>：</p><p>$dp[i][j]$ : 后 <strong>i</strong> 种物品，耐久度达到 <strong>j</strong> 时 ，所能得到的最大伤害值。(因为题目数据的原因，所以要倒着来）</p></li><li><p><strong>转移方程</strong>：<br>不选第 <strong>i</strong> 种装备：<br>$dp[i][j] = max(dp[i][j],dp[i + 1][j]);$</p><p>选第 <strong>i</strong> 种装备：<br>$dp[i][lim] = max(dp[i][lim],dp[i + 1][j] + cnt.d); $ </p><pre><code>$(lim = min(m,lim + cnt.t))$</code></pre><p>第二维不一定要写 j , 这样就不用考虑耐久度超过 m 了。</p></li><li><p><strong>最后答案</strong>: $ dp[1][m]$。</p></li></ul><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; f;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">15</span>][<span class="number">50005</span>];<span class="comment">//dp[i][j] : 后 i 种物品，耐久度达到 j 时 ，所能得到的最大伤害值。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> d,t;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;X&gt; p[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">f[<span class="string">"Head"</span>] = <span class="number">1</span> , f[<span class="string">"Shoulder"</span>] = <span class="number">2</span> , f[<span class="string">"Neck"</span>] = <span class="number">3</span>;</span><br><span class="line">f[<span class="string">"Torso"</span>] = <span class="number">4</span> , f[<span class="string">"Hand"</span>] = <span class="number">5</span> , f[<span class="string">"Wrist"</span>] = <span class="number">6</span>;</span><br><span class="line">f[<span class="string">"Waist"</span>] = <span class="number">7</span> , f[<span class="string">"Legs"</span>] = <span class="number">8</span> , f[<span class="string">"Feet"</span>] = <span class="number">9</span>;</span><br><span class="line">f[<span class="string">"Finger"</span>] = <span class="number">12</span> , f[<span class="string">"Shield"</span>] = <span class="number">13</span> , f[<span class="string">"Weapon"</span>] = <span class="number">14</span>;</span><br><span class="line">f[<span class="string">"Two-Handed"</span>] = <span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove1</span><span class="params">()</span></span>&#123;<span class="comment">//处理 Finger。合并为编号 10 种类的装备。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; p[<span class="number">12</span>].size();i++)&#123;</span><br><span class="line">p[<span class="number">10</span>].push_back(p[<span class="number">12</span>][i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>;j &lt; p[<span class="number">12</span>].size();j++)&#123;</span><br><span class="line">X cnt1,cnt2;</span><br><span class="line">cnt1 = p[<span class="number">12</span>][i];</span><br><span class="line">cnt2 = p[<span class="number">12</span>][j];</span><br><span class="line">cnt1.d += cnt2.d;</span><br><span class="line">cnt1.t += cnt2.t;</span><br><span class="line">p[<span class="number">10</span>].push_back(cnt1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove2</span><span class="params">()</span></span>&#123;<span class="comment">//处理 Shield ,  Weapon , Two-Handed。合并为编号 11 种类的装备。</span></span><br><span class="line">X cnt1,cnt2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; p[<span class="number">14</span>].size();i++) p[<span class="number">11</span>].push_back(p[<span class="number">14</span>][i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; p[<span class="number">13</span>].size();i++)&#123;</span><br><span class="line">p[<span class="number">11</span>].push_back(p[<span class="number">13</span>][i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; p[<span class="number">14</span>].size();j++)&#123;</span><br><span class="line">cnt1 = p[<span class="number">13</span>][i];</span><br><span class="line">cnt2 = p[<span class="number">14</span>][j];</span><br><span class="line">cnt1.d += cnt2.d;</span><br><span class="line">cnt1.t += cnt2.t;</span><br><span class="line">p[<span class="number">11</span>].push_back(cnt1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; p[<span class="number">15</span>].size();i++)&#123;</span><br><span class="line">p[<span class="number">11</span>].push_back(p[<span class="number">15</span>][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">Init();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; t)&#123;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">20</span>;i++) p[i].clear();</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">X cnt;</span><br><span class="line"><span class="keyword">int</span> x,d,t;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s &gt;&gt; d &gt;&gt; t;</span><br><span class="line">x = f[s];</span><br><span class="line">cnt.d = d,cnt.t = t;</span><br><span class="line">p[x].push_back(cnt);</span><br><span class="line">&#125;</span><br><span class="line">slove1();</span><br><span class="line">slove2();</span><br><span class="line">dp[<span class="number">12</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">11</span>;i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt;= m;j++)&#123;</span><br><span class="line">dp[i][j] = max(dp[i][j],dp[i + <span class="number">1</span>][j]);</span><br><span class="line"><span class="keyword">if</span>(dp[i + <span class="number">1</span>][j] == <span class="number">-1</span>) <span class="keyword">continue</span>;<span class="comment">//这里表示 dp[i + 1][j] 状态不存在（在这道题等价于初始化为负无穷）。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; p[i].size();k++)&#123;<span class="comment">// dp 的含义是当前状态的最优解，不管当前状态之前怎么选。</span></span><br><span class="line"><span class="keyword">int</span> lim;</span><br><span class="line">X cnt;</span><br><span class="line">cnt = p[i][k];</span><br><span class="line"><span class="keyword">if</span>(j + cnt.t &gt; m) lim = m;<span class="comment">//第二维不一定要写 j , 这样就不用考虑耐久度超过 m 了。</span></span><br><span class="line"><span class="keyword">else</span> lim = j + cnt.t;</span><br><span class="line">dp[i][lim] = max(dp[i][lim],dp[i + <span class="number">1</span>][j] + cnt.d);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][m] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/07/08/ZOJ%20-%203769%20-%20Diablo%20III%20(%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85%20%EF%BC%8Cdp)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HDU-2955-Robberies(01背包，逆向思维)</title>
      <link>http://yoursite.com/2018/07/08/HDU-2955-Robberies(01%E8%83%8C%E5%8C%85%EF%BC%8C%E9%80%86%E5%90%91%E6%80%9D%E7%BB%B4)/</link>
      <guid>http://yoursite.com/2018/07/08/HDU-2955-Robberies(01%E8%83%8C%E5%8C%85%EF%BC%8C%E9%80%86%E5%90%91%E6%80%9D%E7%BB%B4)/</guid>
      <pubDate>Sun, 08 Jul 2018 02:52:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/100/6/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/100/6/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><ul><li>输入一个 <strong>t</strong> ，表示有 <strong>t</strong> 组数据。</li><li>每组数据先输入 一个 <strong>P</strong> 和 一个 <strong>n</strong>。</li><li><strong>P</strong> 代表被抓的概率需要低于 <strong>P</strong>，<strong>n</strong> 代表有 <strong>n</strong> 个银行。</li><li>接下来 <strong>n</strong> 行的每行输入一个 <strong>w</strong> 和 <strong>p</strong>。</li><li><strong>w</strong> 代表当前银行所有的金额，<strong>p</strong> 代码当前银行被抓的概率。</li></ul><p><strong>问</strong>：小偷在被抓的概率<strong>低于 P </strong>的情况下，<strong>最多</strong>能偷多少钱？</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line"></span><br><span class="line">0.04 3</span><br><span class="line">1 0.02</span><br><span class="line">2 0.03</span><br><span class="line">3 0.05</span><br><span class="line"></span><br><span class="line">0.06 3</span><br><span class="line">2 0.03</span><br><span class="line">2 0.03</span><br><span class="line">3 0.05</span><br><span class="line"></span><br><span class="line">0.10 3</span><br><span class="line">1 0.03</span><br><span class="line">2 0.02</span><br><span class="line">3 0.05</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br></pre></td></tr></table></figure><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><p>$ 0 &lt; T &lt;= 100$<br>$0.0 &lt;= P &lt;= 1.0$<br>$0 &lt; N &lt;= 100$<br>$0 &lt; Mj &lt;= 100$<br>$0.0 &lt;= Pj &lt;= 1.0$</p><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><ul><li><strong>被抓概率 = 1 - 不被抓概率</strong>，所以只要 <strong>不被抓概率 &gt;= 1 - P</strong>。</li><li><strong>01背包</strong>。</li><li><strong>dp[i]</strong> : 偷到 i 金额的钱，而不被抓的最大概率。</li><li><strong>dp[0] 初始化为 1.0</strong> , 因为不偷任何东西时，不被转最大概率为 1.0。</li><li><strong>转移方程</strong>：${dp[j] = dp[j - w[i]] * (1.0 - p[i]);}$</li><li>最后答案就在满足<strong>不被抓概率 &gt;= 1 - P</strong> 中，<strong>取最大金额</strong>。</li></ul><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> dp[<span class="number">10005</span>],p[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="keyword">double</span> P;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf %d"</span>,&amp;P,&amp;n);</span><br><span class="line">P = <span class="number">1.0</span> - P;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%d %lf"</span>,&amp;w[i],&amp;p[i]);</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">10000</span>;j &gt;= w[i];j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[j] &lt; dp[j - w[i]] * (<span class="number">1.0</span> - p[i]))&#123;</span><br><span class="line">dp[j] = dp[j - w[i]] * (<span class="number">1.0</span> - p[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">10000</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i] &gt;= P) sum = max(sum,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/07/08/HDU-2955-Robberies(01%E8%83%8C%E5%8C%85%EF%BC%8C%E9%80%86%E5%90%91%E6%80%9D%E7%BB%B4)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HDU - 2844 - Coins (多重背包,dp）</title>
      <link>http://yoursite.com/2018/07/08/HDU%20-%202844%20-%20Coins%20(%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85,dp%EF%BC%89/</link>
      <guid>http://yoursite.com/2018/07/08/HDU%20-%202844%20-%20Coins%20(%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85,dp%EF%BC%89/</guid>
      <pubDate>Sun, 08 Jul 2018 02:47:58 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/100/4/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/100/4/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><ul><li><p>多组输入。每组数据先输入一个 <strong>n</strong> , <strong>m</strong> 。</p></li><li><p><strong>n</strong> : 有 <strong>n</strong> 种硬币； <strong>m</strong> : 所选硬币总和不超过 <strong>m</strong> ;</p></li><li><p>接下来输入 <strong>A1 , A2 , A3…An</strong>。代表第 <strong>i</strong> 种硬币的面值。</p></li><li><p>接着再输入 <strong>C1 , C2 , C3…Cn</strong>。代表第 <strong>i</strong> 种硬币的数量。</p></li><li><p><strong>n == 0 &amp;&amp; m == 0</strong> 时结束。</p><p>问：在<strong>1 ~ m</strong> 种，有多少面值恰好能由所给的硬币组成？</p></li></ul><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3 10</span><br><span class="line">1 2 4 2 1 1</span><br><span class="line"></span><br><span class="line">2 5</span><br><span class="line">1 4 2 1</span><br><span class="line"></span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><p> $n(1 ≤ n ≤ 100)$ ,$m(m ≤ 100000)$,$(1 ≤ Ai ≤ 100000,1 ≤ Ci ≤ 1000)$ </p><h2 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h2><p><a href="http://blog.csdn.net/u012762625/article/details/43485973" target="_blank" rel="noopener">http://blog.csdn.net/u012762625/article/details/43485973</a><br><a href="http://blog.csdn.net/tinyguyyy/article/details/51203935" target="_blank" rel="noopener">http://blog.csdn.net/tinyguyyy/article/details/51203935</a></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h2><h3 id="解题代码①："><a href="#解题代码①：" class="headerlink" title="解题代码①："></a>解题代码①：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> dp[<span class="number">100005</span>];<span class="comment">//dp[j] : 前 i 种物品是否能组成 j 。</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>],c[<span class="number">105</span>],cnt[<span class="number">100005</span>];<span class="comment">//cnt[j] : 当组成 j 时，这时第 i 种物品已经用的个数。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,sum;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m))&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c[i]);</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>,sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = a[i];j &lt;= m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!dp[j] &amp;&amp; cnt[j - a[i]] &lt; c[i] &amp;&amp; dp[j - a[i]])&#123;</span><br><span class="line">dp[j] = <span class="number">1</span>;</span><br><span class="line">sum++;</span><br><span class="line">cnt[j] = cnt[j - a[i]] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题代码②"><a href="#解题代码②" class="headerlink" title="解题代码②:"></a>解题代码②:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> dp[<span class="number">100005</span>];<span class="comment">//dp[j]: 前 i 种物品是否能组成 j 。</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>],c[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,sum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZeroOnePack</span><span class="params">(<span class="keyword">int</span> cost)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = m;i &gt;= cost;i--)&#123;</span><br><span class="line">dp[i] = max(dp[i],dp[i - cost]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CompletePack</span><span class="params">(<span class="keyword">int</span> cost)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = cost;i &lt;= m;i++)&#123;</span><br><span class="line">dp[i] = max(dp[i],dp[i - cost]); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MultiPack</span><span class="params">(<span class="keyword">int</span> cost,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num * cost &gt; m)&#123;</span><br><span class="line">CompletePack(cost);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">1</span>;<span class="comment">//二进制思想</span></span><br><span class="line"><span class="keyword">while</span>(k &lt; num)&#123;</span><br><span class="line">ZeroOnePack(cost * k);</span><br><span class="line">num -= k;</span><br><span class="line">k &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ZeroOnePack(cost * num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m))&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c[i]);</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>,sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">MultiPack(a[i],c[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i]) sum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/07/08/HDU%20-%202844%20-%20Coins%20(%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85,dp%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HDU - 2159 - FATE(完全背包）</title>
      <link>http://yoursite.com/2018/07/08/HDU%20-%202159%20-%20FATE(%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%EF%BC%89/</link>
      <guid>http://yoursite.com/2018/07/08/HDU%20-%202159%20-%20FATE(%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%EF%BC%89/</guid>
      <pubDate>Sun, 08 Jul 2018 02:42:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/100/7/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/100/7/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><ul><li>多组数据。每组数据先输入 <strong>n，m，k，s</strong>。</li><li><strong>n</strong> : 升级所需要的经验。</li><li><strong>m</strong> : 所拥有的耐力。</li><li><strong>k</strong> : 怪的种类。</li><li><strong>s</strong> : 最多能杀的怪的数量。</li><li>接下来有 <strong>k</strong> 行，每行输入 <strong>a</strong> , <strong>b</strong>。</li><li><strong>a</strong> : 杀死第 <strong>i</strong> 个怪所能获得的经验。</li><li><p><strong>b</strong> : 杀死第 <strong>i</strong> 个怪所要消耗的耐力。</p><p><strong>问</strong>：在满足所杀的怪的数量<strong>不超过</strong>  <strong>s</strong> , 所消耗的耐力<strong>不超过</strong> <strong>m</strong> 时，<strong>最多</strong>剩下多少耐力？</p></li></ul><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">10 10 1 10</span><br><span class="line">1 1</span><br><span class="line"></span><br><span class="line">10 10 1 9</span><br><span class="line">1 1</span><br><span class="line"></span><br><span class="line">9 10 2 10</span><br><span class="line">1 1</span><br><span class="line">2 2</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">-1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><p> $(0 &lt; n,m,k,s &lt; 100)$ ,$(0 &lt; a,b &lt; 20)$ </p><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><ul><li>这道题可以转化为<strong>完全背包</strong>来做。<strong>m</strong> 等价于背包的容量。<strong>a</strong> 等价于物品的价值。<strong>b</strong> 等价于物品的体积。但是这道题有一点要注意的地方，就是题目要求所杀的怪的数量不能超过 <strong>s</strong>。</li><li>所以需要增加一个 <strong>cnt[j]</strong>。<strong>cnt[j]</strong> : 前 <strong>i</strong> 种怪中，花费耐力不超过 <strong>j</strong> ，并且在获得最多经验时，最少杀的怪的数量。其他就直接按完全背包来做。</li><li><strong>dp[j]</strong> : 前 <strong>i</strong> 种怪中，花费耐力不超过 <strong>j</strong> 时，最多能获得的经验。</li><li>转移方程看代码。</li><li>最后的答案就是在满足条件下，选一个剩下最多的经验。</li><li><strong>优先级</strong>：所获经验 &gt; 杀怪数量</li></ul><h2 id="AC代码如下："><a href="#AC代码如下：" class="headerlink" title="AC代码如下："></a>AC代码如下：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">105</span>];<span class="comment">// dp[j] : 前 i 种怪中，花费耐力不超过 j 时，最多能获得的经验。</span></span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">105</span>];<span class="comment">// cnt[j] : 前 i 种怪中，花费耐力不超过 j ，并且在获得最多经验时，最少杀的怪的数量。</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>],b[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,k,s;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; s)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = b[i];j &lt;= m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[j] &lt; dp[j - b[i]] + a[i])&#123;<span class="comment">//转移方程(优先经验)</span></span><br><span class="line">dp[j] = dp[j - b[i]] + a[i];</span><br><span class="line">cnt[j] = cnt[j - b[i]] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(dp[j] == dp[j - b[i]] + a[i])&#123;<span class="comment">//转移方程</span></span><br><span class="line">cnt[j] = min(cnt[j],cnt[j - b[i]] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i] &gt;= n &amp;&amp; cnt[i] &lt;= s) ans = max(m - i,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/07/08/HDU%20-%202159%20-%20FATE(%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%EF%BC%89/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
