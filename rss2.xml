<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>天之界</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>踏一步便是虚无</description>
    <pubDate>Mon, 19 Mar 2018 06:41:14 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>音乐测试</title>
      <link>http://yoursite.com/2018/03/19/%E9%9F%B3%E4%B9%90%E6%B5%8B%E8%AF%95/</link>
      <guid>http://yoursite.com/2018/03/19/%E9%9F%B3%E4%B9%90%E6%B5%8B%E8%AF%95/</guid>
      <pubDate>Mon, 19 Mar 2018 06:25:24 GMT</pubDate>
      <description>
      
        
        
          &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/19/%E9%9F%B3%E4%B9%90%E6%B5%8B%E8%AF%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>四校联赛2-C-Array Gcd</title>
      <link>http://yoursite.com/2018/03/18/%E5%9B%9B%E6%A0%A1%E8%81%94%E8%B5%9B2-C-Array-Gcd/</link>
      <guid>http://yoursite.com/2018/03/18/%E5%9B%9B%E6%A0%A1%E8%81%94%E8%B5%9B2-C-Array-Gcd/</guid>
      <pubDate>Sun, 18 Mar 2018 15:12:44 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;解题思路：&quot;&gt;&lt;a href=&quot;#解题思路：&quot; class=&quot;headerlink&quot; title=&quot;解题思路：&quot;&gt;&lt;/a&gt;解题思路：&lt;/h2&gt;&lt;p&gt;​    我们考虑到1操作也就是移除连续的一段区间的元素只能操作一次，而且长度是小于n的，那么最后得到的序列肯定是含有第一个元素或者是最后一个元素，那么根据这个性质我们就可以将 $a[1], a[1] +1, a[1] - 1, a[n], a[n] + 1, a[n] - 1$， 这6个数质数分解将质因子存在来，然后去枚举质因子， 对于每一个质因子序列里的每一个数成为这个质因子的代价是不同的，如果 $a[i]$ %  $p$ = 0, $cost[i]$ = $0$、 ($a[i]$ +1) % $p$ = $0$ || ($a[i]$ - 1) % p = $0$, $cost[i]$ = $B$, 否则  $cost[i]$ = oo。&lt;br&gt;那么这个时候我们就可以 $dp$ 了，&lt;/p&gt;
&lt;p&gt;$dp[i][0]$ 表示从一到  $i $ 这个位置还没有进行1操作的最小花费。&lt;br&gt;$dp[i][1]$ 表示从一到  $i$ 这个位置正在进行1操作的最小花费。&lt;br&gt;$dp[i][2]$ 表示从一到  $i$ 这个位置已经结束1操作了的最小花费。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>​    我们考虑到1操作也就是移除连续的一段区间的元素只能操作一次，而且长度是小于n的，那么最后得到的序列肯定是含有第一个元素或者是最后一个元素，那么根据这个性质我们就可以将 $a[1], a[1] +1, a[1] - 1, a[n], a[n] + 1, a[n] - 1$， 这6个数质数分解将质因子存在来，然后去枚举质因子， 对于每一个质因子序列里的每一个数成为这个质因子的代价是不同的，如果 $a[i]$ %  $p$ = 0, $cost[i]$ = $0$、 ($a[i]$ +1) % $p$ = $0$ || ($a[i]$ - 1) % p = $0$, $cost[i]$ = $B$, 否则  $cost[i]$ = oo。<br>那么这个时候我们就可以 $dp$ 了，</p><p>$dp[i][0]$ 表示从一到  $i $ 这个位置还没有进行1操作的最小花费。<br>$dp[i][1]$ 表示从一到  $i$ 这个位置正在进行1操作的最小花费。<br>$dp[i][2]$ 表示从一到  $i$ 这个位置已经结束1操作了的最小花费。</p><a id="more"></a><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL Max = <span class="number">1000000000000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">LL n;</span><br><span class="line">LL a, b, c[MaxN + <span class="number">5</span>], dp[MaxN + <span class="number">5</span>][<span class="number">4</span>];</span><br><span class="line">LL cost[MaxN + <span class="number">5</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;LL&gt; G;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">G_insert</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(LL i = <span class="number">2</span>;i * i &lt;= x;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(x % i == <span class="number">0</span>)&#123;</span><br><span class="line">G.push_back(i);</span><br><span class="line"><span class="keyword">while</span>(x % i == <span class="number">0</span>) x /= i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x != <span class="number">1</span>) G.push_back(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">G.clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%I64d"</span> , &amp;c[i]);</span><br><span class="line"><span class="keyword">for</span>(LL i = <span class="number">-1</span>;i &lt;= <span class="number">1</span>;i++) G_insert(c[<span class="number">1</span>] + i);</span><br><span class="line"><span class="keyword">for</span>(LL i = <span class="number">-1</span>;i &lt;= <span class="number">1</span>;i++) G_insert(c[n] + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">Work</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cost[i] = dp[i][<span class="number">0</span>] = dp[i][<span class="number">1</span>] = dp[i][<span class="number">2</span>] = <span class="number">1L</span>L &lt;&lt; <span class="number">40</span>;</span><br><span class="line"><span class="keyword">if</span>(c[i] % x == <span class="number">0</span>) cost[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((c[i] - <span class="number">1</span>) % x == <span class="number">0</span> || (c[i] + <span class="number">1</span>) % x == <span class="number">0</span>) cost[i] = b;</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = dp[<span class="number">0</span>][<span class="number">1</span>] = dp[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + cost[i];</span><br><span class="line">dp[i][<span class="number">1</span>] = min(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>]) + a;</span><br><span class="line">dp[i][<span class="number">2</span>] = min(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]) + cost[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> min(dp[n][<span class="number">0</span>] , min(dp[n][<span class="number">1</span>], dp[n][<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">LL ans = <span class="number">1L</span>L &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; G.size();i++)&#123;</span><br><span class="line">ans = min(ans , Work(G[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span> , ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%I64d%I64d%I64d"</span> , &amp;n , &amp;a , &amp;b))&#123;</span><br><span class="line">Init();</span><br><span class="line">Solve();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/18/%E5%9B%9B%E6%A0%A1%E8%81%94%E8%B5%9B2-C-Array-Gcd/#disqus_thread</comments>
    </item>
    
    <item>
      <title>四校联赛2-D-D商店</title>
      <link>http://yoursite.com/2018/03/18/%E5%9B%9B%E6%A0%A1%E8%81%94%E8%B5%9B2-D-D%E5%95%86%E5%BA%97/</link>
      <guid>http://yoursite.com/2018/03/18/%E5%9B%9B%E6%A0%A1%E8%81%94%E8%B5%9B2-D-D%E5%95%86%E5%BA%97/</guid>
      <pubDate>Sun, 18 Mar 2018 12:43:52 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;​    先输入 $n，k$  分别代表有 $n$ 天，可以让任意 $k$ 天的的物品数量翻倍(每天最多只能翻一次）。接下来有 $n$ 行，第 $i$ 行有两个数 $ai，bi$ 分别代表在第 $i$ 天有  $ai$  件物品，有 $bi$ 个顾客。每个顾客都会买一件物品。问 n 天后&lt;strong&gt;最多&lt;/strong&gt;卖出多少件物品?&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h2><p>​    先输入 $n，k$  分别代表有 $n$ 天，可以让任意 $k$ 天的的物品数量翻倍(每天最多只能翻一次）。接下来有 $n$ 行，第 $i$ 行有两个数 $ai，bi$ 分别代表在第 $i$ 天有  $ai$  件物品，有 $bi$ 个顾客。每个顾客都会买一件物品。问 n 天后<strong>最多</strong>卖出多少件物品?</p><a id="more"></a><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><p>$1 \leq n \leq 10^5$</p><p>$0 \leq k \leq n$</p><p>$1 \leq a_i ,bi\leq 10^9$</p><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><ul><li>当天的<strong>存货量大于等于需求量</strong>的时候，这一天的存货量是不需要翻倍的。</li><li>当天存货量小于需求量的时候，先让这一天的存货量翻倍，求出当天 ”<strong>可增加</strong>“ 的销售量，然后根据可增加的销售量<strong>从大到小</strong>排序，选出前 $k$ 天。</li></ul><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn],b[maxn],s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">cmp</span><span class="params">(LL x,LL y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &gt; y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line">LL ans = <span class="number">0</span>,sum;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%I64d %I64d"</span>,&amp;a[i],&amp;b[i]);</span><br><span class="line"><span class="keyword">if</span>(b[i] &gt; a[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span> * a[i] &lt;= b[i]) s[i] = a[i];</span><br><span class="line"><span class="keyword">else</span> s[i] = b[i] - a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">s[i] = <span class="number">0</span>;</span><br><span class="line">a[i] = b[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(s + <span class="number">1</span>,s + n + <span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k;i++) ans += s[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) ans += a[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/18/%E5%9B%9B%E6%A0%A1%E8%81%94%E8%B5%9B2-D-D%E5%95%86%E5%BA%97/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforces911D---Inversion Counting</title>
      <link>http://yoursite.com/2018/03/16/Codeforces911D---Inversion%20Counting/</link>
      <guid>http://yoursite.com/2018/03/16/Codeforces911D---Inversion%20Counting/</guid>
      <pubDate>Fri, 16 Mar 2018 13:46:12 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;给你 $n$ 个数，和 $m$ 个操作询问，每个询问给你 $l,r$ 两个数，问你反转 $l,r$ 区间的元素后，整个序列的逆序对的个数是奇数个还是偶数个，奇数个输出 $odd$ ,偶数个则输出 $even$ ,该逆序对以从小到大为标准次序，反转后不会恢复为原序列，且保证 $n$ 个数中每个数都不相同。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h2><p>给你 $n$ 个数，和 $m$ 个操作询问，每个询问给你 $l,r$ 两个数，问你反转 $l,r$ 区间的元素后，整个序列的逆序对的个数是奇数个还是偶数个，奇数个输出 $odd$ ,偶数个则输出 $even$ ,该逆序对以从小到大为标准次序，反转后不会恢复为原序列，且保证 $n$ 个数中每个数都不相同。</p><a id="more"></a><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><p>$1 \leq n \leq 1500,1 \leq m \leq 2 \cdot 10^5,1 \leq l_i \leq r_i \leq n,1 \leq a_i \leq n;​$</p><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>因为要求每次操作后逆序对的对数的奇偶性，如果想暴力做的话，每次对序列进行反转就是 $O(n)$ 的复杂度，还得重新求总逆序对个数，总复杂度就变为了 $O(n^{2}\cdot{m})$ ，这显然会 $TLE$ 的，所以得换个想法，我们先求出初始序列的总逆序对个数 $res$ ，根据 $[l,r]$ 区间逆序对的变化转换为总逆序对个数，但是真正的个数我们其实并不太需要，只需要知道奇偶性就行了；我们知道一个长度为len长的序列，它的逆序对最多为 $len\cdot(len-1)/2$ (假如该序列为从大到小排序，即总逆序对个数为 ($1+2+3+\dots+(len-1)=len\cdot(len-1)/2$) 暂且称为满逆序对,那么现逆序对个数即与满逆序对个数有关，若满逆序对个数为偶数个，那么现逆序对奇偶性与原逆序对相同，即为加减偶数个数，可以用 $len\cdot(len-1)/2$ 代替，否则当满逆序对个数为奇数个时，那么现逆序对奇偶性与原逆序对相反，即为加减奇数个，也可用 $len\cdot(len-1)/2$ 代替，所以每次只需要将 $res+=len\cdot(len-1)/2$ 后就可以直接判断奇偶性，$O(1)$ 出答案。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1500</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, cnt;</span><br><span class="line"><span class="keyword">int</span> a[maxn + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt; a[j])cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">cnt += (r - l + <span class="number">1</span>) * (r - l) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(cnt &amp; <span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"odd\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"even\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目链接：Go-to"><a href="#题目链接：Go-to" class="headerlink" title="题目链接：Go to!"></a>题目链接：<a href="http://codeforces.com/problemset/problem/911/D" target="_blank" rel="noopener">Go to!</a></h2>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/16/Codeforces911D---Inversion%20Counting/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://yoursite.com/2018/03/16/HELLO%20WORLD/</link>
      <guid>http://yoursite.com/2018/03/16/HELLO%20WORLD/</guid>
      <pubDate>Fri, 16 Mar 2018 09:25:09 GMT</pubDate>
      <description>
      
        
        
          &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/16/HELLO%20WORLD/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
