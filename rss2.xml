<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>天之界</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>踏一步便是虚无</description>
    <pubDate>Tue, 02 Oct 2018 02:31:08 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Codeforces - gym - 101808 - I. Ildar Yalalov (博弈，dp)</title>
      <link>http://yoursite.com/2018/10/02/Codeforces%20-%20gym%20-%20101808%20-%20I.%20Ildar%20Yalalov%20(%E5%8D%9A%E5%BC%88%EF%BC%8Cdp)/</link>
      <guid>http://yoursite.com/2018/10/02/Codeforces%20-%20gym%20-%20101808%20-%20I.%20Ildar%20Yalalov%20(%E5%8D%9A%E5%BC%88%EF%BC%8Cdp)/</guid>
      <pubDate>Tue, 02 Oct 2018 02:02:16 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/5369/1522398270213/thumb_Fri_Mar_30_2018.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/5369/1522398270213/thumb_Fri_Mar_30_2018.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://codeforces.com/gym/101808/problem/I" target="_blank" rel="noopener">http://codeforces.com/gym/101808/problem/I</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>T 组数据</p><p>有 $n$ 堆石子，第 $i$ 堆有 $A_i$ 个石子，$Yalalov$ 和 $Shin$ 两人轮流拿，总共有 $2$ 种操作：</p><ul><li>选任意一堆石子，拿走这堆石子中的一个石子。</li><li>拿走每一堆石子中的一个石子（当所有堆石子个数大于等于 $1$ 时，才能选择此操作）</li></ul><p>如果当前轮，拿不了石子时，处在当前轮的人算输。</p><p>问：当 $Yalalov$ 先手时，最后谁赢？</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$1 ≤ N ≤ 100$</li><li>$1 ≤ A_i ≤ 10^6$ </li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yalalov</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>这道题可以看做两部分：</p><p><img src="C:\Users\GP62\AppData\Roaming\Typora\typora-user-images\1538446984136.png" alt="1538446984136"></p><ul><li>上部分</li><li>下部分</li></ul><p>所以状态为：</p><ul><li>$dp[maxn][5]$ ; 底下为i层，上面石子总数为0，奇数，偶数时的获胜状态。</li></ul><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,n) for(int i = a;i &lt;= n;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,n,a) for(int i = n;i &gt;= a;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF_INT = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x7fffffff</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">5</span>]; <span class="comment">// 底下为i层，上面石子总数为0，奇数，偶数时的获胜状态。</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  1</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> x &amp; <span class="number">1</span> == <span class="number">1</span> ? <span class="number">1</span> : <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> deep,<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">// 把所有状态转移都写出来，也就是看下一层是否有必败态。</span></span><br><span class="line"><span class="keyword">if</span>(dp[deep][x] != <span class="number">0</span>) <span class="keyword">return</span> dp[deep][x];</span><br><span class="line">dp[deep][x] = <span class="number">1</span>; <span class="comment">// 初始都为必败态，只要下面有一个必败态就赢。</span></span><br><span class="line"><span class="keyword">if</span>(deep - <span class="number">1</span> &gt;= <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(Solve(deep - <span class="number">1</span>,x) == <span class="number">1</span>) dp[deep][x] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> tmp = x + n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(Solve(deep - <span class="number">1</span>,Get(tmp)) == <span class="number">1</span>) dp[deep][x] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">0</span>) <span class="keyword">if</span>(Solve(deep,x - <span class="number">1</span>) == <span class="number">1</span>) dp[deep][x] = <span class="number">2</span>; </span><br><span class="line"><span class="keyword">return</span> dp[deep][x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="keyword">int</span> mi = maxn, tot = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">rep(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]), mi = min(mi,a[i]);</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>, dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>, dp[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n) tot += a[i] - mi;</span><br><span class="line">Solve(mi,Get(tot)) == <span class="number">2</span> ? <span class="built_in">printf</span>(<span class="string">"Yalalov\n"</span>) : <span class="built_in">printf</span>(<span class="string">"Shin\n"</span>);</span><br><span class="line">rep(i,<span class="number">0</span>,mi) rep(j,<span class="number">0</span>,<span class="number">2</span>) dp[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/10/02/Codeforces%20-%20gym%20-%20101808%20-%20I.%20Ildar%20Yalalov%20(%E5%8D%9A%E5%BC%88%EF%BC%8Cdp)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>hiho - 1828 -  Saving Tang Monk II(状态，最短路)</title>
      <link>http://yoursite.com/2018/10/02/hiho%20-%201828%20-%20%20Saving%20Tang%20Monk%20II(%E7%8A%B6%E6%80%81%EF%BC%8C%E6%9C%80%E7%9F%AD%E8%B7%AF)/</link>
      <guid>http://yoursite.com/2018/10/02/hiho%20-%201828%20-%20%20Saving%20Tang%20Monk%20II(%E7%8A%B6%E6%80%81%EF%BC%8C%E6%9C%80%E7%9F%AD%E8%B7%AF)/</guid>
      <pubDate>Tue, 02 Oct 2018 00:59:48 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/246262/1536387849024/thumb_Sat_Sep_08_2018.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/246262/1536387849024/thumb_Sat_Sep_08_2018.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://hihocoder.com/problemset/problem/1828" target="_blank" rel="noopener">http://hihocoder.com/problemset/problem/1828</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><ul><li>给你一个 $N * M$ 的矩阵</li><li>矩阵里总共有 $6$ 个符号 $S$ , $T$ , $.$ , $#$ , $B$ , $P$</li><li>$S$ : 出发的位置</li><li>$T$ : 终点的位置</li><li>$.$ : 可以走的位置</li><li>$#$ : 有毒气的位置</li><li>$B$ : 拥有氧气的位置</li><li>$P$ : 拥有加速卡的位置</li><li>经过 $.$ , $B$ 花费 $1$ 秒</li><li>经过 $P$ 花费 $0$ 秒</li><li>经过 $#$ 花费 $2$ 秒，和消耗一瓶氧气，经过此处必须至少携带一瓶氧气</li></ul><p>问：在最多只能同时携带 $5$ 瓶氧气的条件下，从 $S$ 到 $T$ 最少需要花费多少秒？</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$0 &lt; N,M ≤ 100$</li><li>最多 $25$ 组样例</li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2 2</span><br><span class="line">S#</span><br><span class="line">#T</span><br><span class="line"></span><br><span class="line">2 5</span><br><span class="line">SB###</span><br><span class="line">##P#T</span><br><span class="line"></span><br><span class="line">4 7</span><br><span class="line">SP.....</span><br><span class="line">P#.....</span><br><span class="line">......#</span><br><span class="line">B...##T</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br><span class="line">8</span><br><span class="line">11</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>因为最多只能同时携带 $5$ 瓶氧气，所以我们可以想到这个状态：</p><ul><li>$dis[i][j][k]$ : 从 $S$ 出发到 $(i,j)$ ,携带 $k$ 瓶氧气时，最少花费时间（最短距离）是多少？</li></ul><p>然后我们就跑一个最短路就行。下面是跑 $spfa$ 的代码。（转移见代码）</p><p>最后答案氧气从 $0$ ~ $5$ 取个最小值。 </p><p>其实，跑最短路也是一个状态转移的过程，所以碰到此类题时，可以先想想每一个点的状态可以这么表示。</p><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">29</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> dis[maxn][maxn][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">char</span> s[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,Sx,Sy,Tx,Ty;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">NODE () &#123;&#125;</span><br><span class="line">NODE (<span class="keyword">int</span> _x,<span class="keyword">int</span> _y)&#123;</span><br><span class="line">x = _x;</span><br><span class="line">y = _y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= m;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> sta = <span class="number">0</span>;sta &lt;= <span class="number">5</span>;sta++)&#123;</span><br><span class="line">dis[i][j][sta] = inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dis[Sx][Sy][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> nx,<span class="keyword">int</span> ny)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(nx &lt;= <span class="number">0</span> || ny &lt;= <span class="number">0</span> || nx &gt; n || ny &gt; m) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;NODE&gt; seq;</span><br><span class="line">seq.push(NODE(Sx,Sy));</span><br><span class="line"><span class="keyword">while</span>(!seq.empty())&#123;</span><br><span class="line">NODE now = seq.front();</span><br><span class="line">seq.pop();</span><br><span class="line">vis[now.x][now.y] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">-1</span>;i &lt;= <span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">-1</span>;j &lt;= <span class="number">1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">int</span> nx = now.x + i;</span><br><span class="line"><span class="keyword">int</span> ny = now.y + j;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(Check(nx,ny) &amp;&amp; i * j == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[nx][ny] == <span class="string">'P'</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> sta = <span class="number">0</span>;sta &lt;= <span class="number">5</span>;sta++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[nx][ny][sta] &gt; dis[now.x][now.y][sta])&#123;</span><br><span class="line">dis[nx][ny][sta] = dis[now.x][now.y][sta];</span><br><span class="line"><span class="keyword">if</span>(!vis[nx][ny])&#123;</span><br><span class="line">vis[nx][ny] = <span class="number">1</span>;</span><br><span class="line">seq.push(NODE(nx,ny));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[nx][ny] == <span class="string">'#'</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> sta = <span class="number">0</span>;sta &lt;= <span class="number">4</span>;sta++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[nx][ny][sta] &gt; dis[now.x][now.y][sta + <span class="number">1</span>] + <span class="number">2</span>)&#123;</span><br><span class="line">dis[nx][ny][sta] = dis[now.x][now.y][sta + <span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[nx][ny])&#123;</span><br><span class="line">vis[nx][ny] = <span class="number">1</span>;</span><br><span class="line">seq.push(NODE(nx,ny));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[nx][ny] == <span class="string">'.'</span> || s[nx][ny] == <span class="string">'S'</span> || s[nx][ny] == <span class="string">'T'</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> sta = <span class="number">0</span>;sta &lt;= <span class="number">5</span>;sta++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[nx][ny][sta] &gt; dis[now.x][now.y][sta] + <span class="number">1</span>)&#123;</span><br><span class="line">dis[nx][ny][sta] = dis[now.x][now.y][sta] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[nx][ny])&#123;</span><br><span class="line">vis[nx][ny] = <span class="number">1</span>;</span><br><span class="line">seq.push(NODE(nx,ny));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[nx][ny] == <span class="string">'B'</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>sta = <span class="number">0</span>;sta &lt;= <span class="number">4</span>;sta++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[nx][ny][sta + <span class="number">1</span>] &gt; dis[now.x][now.y][sta] + <span class="number">1</span>)&#123;</span><br><span class="line">dis[nx][ny][sta + <span class="number">1</span>] = dis[now.x][now.y][sta] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[nx][ny])&#123;</span><br><span class="line">vis[nx][ny] = <span class="number">1</span>;</span><br><span class="line">seq.push(NODE(nx,ny));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m))&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= m;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %c"</span>,&amp;s[i][j]);</span><br><span class="line"><span class="keyword">if</span>(s[i][j] == <span class="string">'S'</span>) Sx = i, Sy = j;</span><br><span class="line"><span class="keyword">if</span>(s[i][j] == <span class="string">'T'</span>) Tx = i, Ty = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Init();</span><br><span class="line">Spfa();</span><br><span class="line"><span class="keyword">int</span> mi = inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">5</span>;i++) mi = min(mi,dis[Tx][Ty][i]);</span><br><span class="line"><span class="keyword">if</span>(mi == inf) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,mi);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/10/02/hiho%20-%201828%20-%20%20Saving%20Tang%20Monk%20II(%E7%8A%B6%E6%80%81%EF%BC%8C%E6%9C%80%E7%9F%AD%E8%B7%AF)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ - 2104 - K-th Number(区间第k大)</title>
      <link>http://yoursite.com/2018/10/02/POJ%20-%202104%20-%20K-th%20Number(%E5%8C%BA%E9%97%B4%E7%AC%ACk%E5%A4%A7)/</link>
      <guid>http://yoursite.com/2018/10/02/POJ%20-%202104%20-%20K-th%20Number(%E5%8C%BA%E9%97%B4%E7%AC%ACk%E5%A4%A7)/</guid>
      <pubDate>Tue, 02 Oct 2018 00:51:02 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/115/4/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/115/4/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://poj.org/problem?id=2104" target="_blank" rel="noopener">http://poj.org/problem?id=2104</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>求区间第 $k$ 大</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$1 &lt;= n &lt;= 100 000$</li><li>$1 &lt;= m &lt;= 5 000$</li><li>$1 &lt;= i &lt;= j &lt;= n$</li><li>$1 &lt;= k &lt;= j - i + 1$</li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">7 3</span><br><span class="line">1 5 2 6 3 7 4</span><br><span class="line">2 5 3</span><br><span class="line">4 4 1</span><br><span class="line">1 7 3</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">6</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF_INT = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,n) for(int i = a;i &lt;= n;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,n,a) for(int i = n;i &gt;= a;i--)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">OPEN</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">freopen((s + <span class="string">".in"</span>).c_str(), <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen((s + <span class="string">".out"</span>).c_str(), <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,cnt,root[maxn],a[maxn],x,y,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> l,r,sum;&#125; T[maxn * <span class="number">40</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getid</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> lower_bound(v.begin(),v.end(),x) - v.begin() + <span class="number">1</span>;&#125; <span class="comment">//找出第一个大于等于 x 的下标 + 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y,<span class="keyword">int</span> pos)</span></span>&#123; <span class="comment">// y 是上一个线段树对应的节点</span></span><br><span class="line">T[++cnt] = T[y], T[cnt].sum++, x = cnt; <span class="comment">// 上一个节点指向下一个新节点</span></span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(mid &gt;= pos) update(l,mid,T[x].l,T[y].l,pos);</span><br><span class="line"><span class="keyword">else</span> update(mid + <span class="number">1</span>,r,T[x].r,T[y].r,pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> sum = T[T[y].l].sum - T[T[x].l].sum;</span><br><span class="line"><span class="keyword">if</span>(sum &gt;= k) <span class="keyword">return</span> query(l,mid,T[x].l,T[y].l,k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(mid + <span class="number">1</span>,r,T[x].r,T[y].r,k - sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line"></span><br><span class="line">rep(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]), v.pb(a[i]);</span><br><span class="line">sort(v.begin(),v.end()), v.erase(unique(v.begin(),v.end()),v.end());</span><br><span class="line"></span><br><span class="line">rep(i,<span class="number">1</span>,n) update(<span class="number">1</span>,n,root[i],root[i - <span class="number">1</span>],getid(a[i]));</span><br><span class="line"></span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;x,&amp;y,&amp;k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,v[query(<span class="number">1</span>,n,root[x - <span class="number">1</span>],root[y],k) - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对数据离散化后,每个节点维护对应离散化后值区间的数的总个数size。自上至下进行询问操作时，判断当前点左子树的size与要查询的排名k的大小关系。如果小于等于，就到左子树中找，k不变。否则到右子树中找排名k−size的值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//权值线段树每一个节点,记录的是在当前时刻 [值l 到 值r] 的总个数.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//建 n 个权值线段树,第 i 个权值线段树记录 1 ~ i 时刻 [值l 到 值r] 的总个数,相当于是前缀和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//区间[L,R] 中 [值l 到 值r] 的总个数,答案 =  第 R 个权值线段树代表 [值l 到 值r] 的节点 - 第 L 个权值线段树代表 [值l 到 值r] 的节点.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为这些线段树都是完全相等的,都会有对应的节点,所以可以直接相减.</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/10/02/POJ%20-%202104%20-%20K-th%20Number(%E5%8C%BA%E9%97%B4%E7%AC%ACk%E5%A4%A7)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>产生随机数</title>
      <link>http://yoursite.com/2018/09/25/%E4%BA%A7%E7%94%9F%E9%9A%8F%E6%9C%BA%E6%95%B0/</link>
      <guid>http://yoursite.com/2018/09/25/%E4%BA%A7%E7%94%9F%E9%9A%8F%E6%9C%BA%E6%95%B0/</guid>
      <pubDate>Tue, 25 Sep 2018 14:10:26 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/114/4/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/114/4/thumb.jpg" alt="img"></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = (<span class="number">1.0</span> * rand() / RAND_MAX) * n + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/09/25/%E4%BA%A7%E7%94%9F%E9%9A%8F%E6%9C%BA%E6%95%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>弦图与区间图</title>
      <link>http://yoursite.com/2018/09/15/%E5%BC%A6%E5%9B%BE%E4%B8%8E%E5%8C%BA%E9%97%B4%E5%9B%BE/</link>
      <guid>http://yoursite.com/2018/09/15/%E5%BC%A6%E5%9B%BE%E4%B8%8E%E5%8C%BA%E9%97%B4%E5%9B%BE/</guid>
      <pubDate>Sat, 15 Sep 2018 15:39:39 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/108/1/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/108/1/thumb.jpg" alt="img"></p><a id="more"></a><h3 id="诱导子图："><a href="#诱导子图：" class="headerlink" title="诱导子图："></a>诱导子图：</h3><p>若选择了某些点，要把在原图上与这些点有相连的边都包含。</p><h3 id="团："><a href="#团：" class="headerlink" title="团："></a>团：</h3><p>是G的一个子图，完全图，也就是两两点有连边。</p><h3 id="极大团："><a href="#极大团：" class="headerlink" title="极大团："></a>极大团：</h3><p>不是其它团的子集。</p><h3 id="最大团-W-G-："><a href="#最大团-W-G-：" class="headerlink" title="最大团 W(G)："></a>最大团 W(G)：</h3><p>顶点最多的极大团。</p><h3 id="最小染色-X-G"><a href="#最小染色-X-G" class="headerlink" title="最小染色 X(G):"></a>最小染色 X(G):</h3><p>用最少的颜色给点染色使得相邻点颜色不同。</p><h3 id="最大独立集-α-G-："><a href="#最大独立集-α-G-：" class="headerlink" title="最大独立集 α(G)："></a>最大独立集 α(G)：</h3><p>最大的一个点的子集使得任何两个点不相邻。</p><h3 id="最小团覆盖-K-G-："><a href="#最小团覆盖-K-G-：" class="headerlink" title="最小团覆盖 K(G)："></a>最小团覆盖 K(G)：</h3><p>用最少个数的团覆盖所有的点。</p><h3 id="W-G-lt-X-G-普通图"><a href="#W-G-lt-X-G-普通图" class="headerlink" title="W(G) &lt;= X(G)  (普通图)"></a>W(G) &lt;= X(G)  (普通图)</h3><h3 id="α-G-lt-K-G-普通图"><a href="#α-G-lt-K-G-普通图" class="headerlink" title="α(G) &lt;= K(G) (普通图)"></a>α(G) &lt;= K(G) (普通图)</h3><h3 id="W-G-X-G-弦图-最大团数-最小色数"><a href="#W-G-X-G-弦图-最大团数-最小色数" class="headerlink" title="W(G) == X(G)  (弦图)  最大团数 = 最小色数"></a>W(G) == X(G)  (弦图)  最大团数 = 最小色数</h3><h3 id="α-G-K-G-弦图-最大独立集-最小团覆盖"><a href="#α-G-K-G-弦图-最大独立集-最小团覆盖" class="headerlink" title="α(G) == K(G)  (弦图)  最大独立集 = 最小团覆盖"></a>α(G) == K(G)  (弦图)  最大独立集 = 最小团覆盖</h3><h3 id="弦："><a href="#弦：" class="headerlink" title="弦："></a>弦：</h3><p>连接环中不相邻的两个点的边。</p><h3 id="弦图："><a href="#弦图：" class="headerlink" title="弦图："></a>弦图：</h3><p>一个无向图称为弦图，当图中任意长度大于3的环都至少有一个弦。</p><h3 id="单纯点："><a href="#单纯点：" class="headerlink" title="单纯点："></a>单纯点：</h3><p>若一个点加上它相邻的点的诱导子图为一个团，则这个点为单纯点。</p><h3 id="引理："><a href="#引理：" class="headerlink" title="引理："></a>引理：</h3><p>任何一个弦图都至少有一个单纯点，不是完全图的弦图至少有两个不相邻的单纯点。</p><h3 id="完美消除序列："><a href="#完美消除序列：" class="headerlink" title="完美消除序列："></a>完美消除序列：</h3><p>对与序列中的点vi，排在vi后面并且和vi相连的点是一个团 </p><h3 id="定理："><a href="#定理：" class="headerlink" title="定理："></a>定理：</h3><p>一个无向图是弦图当且仅当它有一个完美消除序列。</p><h3 id="完美消除序列的作用："><a href="#完美消除序列的作用：" class="headerlink" title="完美消除序列的作用："></a>完美消除序列的作用：</h3><p>求弦图的最大团数/最小色数的时候，只要在完美消除序列上从后往前贪心染色即可。  </p><p>而求最大独立集/最小团覆盖的时候，只要在完美消除序列上从前往后贪心取点即可。 </p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/09/15/%E5%BC%A6%E5%9B%BE%E4%B8%8E%E5%8C%BA%E9%97%B4%E5%9B%BE/#disqus_thread</comments>
    </item>
    
    <item>
      <title>后缀数组-出现次数大于等于k次的子串种类(String and Times)</title>
      <link>http://yoursite.com/2018/09/15/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8Ek%E6%AC%A1%E7%9A%84%E5%AD%90%E4%B8%B2%E7%A7%8D%E7%B1%BB(String%20and%20Times)/</link>
      <guid>http://yoursite.com/2018/09/15/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8Ek%E6%AC%A1%E7%9A%84%E5%AD%90%E4%B8%B2%E7%A7%8D%E7%B1%BB(String%20and%20Times)/</guid>
      <pubDate>Sat, 15 Sep 2018 15:00:56 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/113/10/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/113/10/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="https://nanti.jisuanke.com/t/31717" target="_blank" rel="noopener">https://nanti.jisuanke.com/t/31717</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>给你一个字符串 $S$ ，问字符串 $S$ 中有多少种子串出现（可重叠）次数在 $[A,B]$ ？</p><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AAA 2 3</span><br><span class="line">ABAB 2 2</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li><p>$∑length(S)≤2×106$</p></li><li><p>$1 \le A \le B \le length(S)$</p></li><li>单组字符串长度不超过 $1e5$</li></ul><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>答案 $=$ 出现次数大于等于 $A$ 次的种类 - 出现次数大于 $B$ 次的种类</p><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> w[maxn], r[maxn * <span class="number">2</span>], cnt[maxn * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> root,last;</span><br><span class="line"><span class="keyword">int</span> all;  <span class="comment">//总结点</span></span><br><span class="line"><span class="keyword">int</span> l;  <span class="comment">//字符串长度</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sam_node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> fa,son[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _len)</span></span>&#123;</span><br><span class="line">len = _len;</span><br><span class="line">fa = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">memset</span>(son,<span class="number">-1</span>,<span class="keyword">sizeof</span>(son));</span><br><span class="line">&#125;</span><br><span class="line">&#125;t[maxn * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sam_init</span><span class="params">()</span></span>&#123;</span><br><span class="line">all = <span class="number">0</span>;</span><br><span class="line">root = last = <span class="number">0</span>;</span><br><span class="line">t[all].init(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = last;</span><br><span class="line"><span class="keyword">int</span> np = ++all;</span><br><span class="line">t[all].init(t[p].len + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> q,nq;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="number">-1</span> &amp;&amp; t[p].son[w] == <span class="number">-1</span>)&#123;</span><br><span class="line">t[p].son[w] = np;</span><br><span class="line">p = t[p].fa;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p == <span class="number">-1</span>) t[np].fa = root;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">q = t[p].son[w];</span><br><span class="line"><span class="keyword">if</span>(t[p].len + <span class="number">1</span> == t[q].len) t[np].fa = q;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">nq = ++all;</span><br><span class="line">t[nq].init(<span class="number">0</span>);</span><br><span class="line">t[nq] = t[q];</span><br><span class="line">t[nq].len = t[p].len + <span class="number">1</span>;</span><br><span class="line">t[q].fa = nq;</span><br><span class="line">t[np].fa = nq;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="number">-1</span> &amp;&amp; t[p].son[w] == q)&#123;</span><br><span class="line">t[p].son[w] = nq;</span><br><span class="line">p = t[p].fa;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">last = np;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= l; ++i) w[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= all; ++i) w[t[i].len]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= l; ++i) w[i] += w[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = all; i &gt;= <span class="number">1</span>; --i) r[w[t[i].len]--] = i;</span><br><span class="line">r[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, A, B, p;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s %d %d"</span>,&amp;s,&amp;A,&amp;B))&#123;</span><br><span class="line"><span class="keyword">int</span> tl = <span class="built_in">strlen</span>(s);</span><br><span class="line">l = <span class="number">0</span>;</span><br><span class="line">sam_init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tl; ++i)&#123;</span><br><span class="line">++l;</span><br><span class="line">s[i] = s[i] + <span class="number">32</span>; <span class="comment">// 这里规定输入的字符只有大写字母。</span></span><br><span class="line">extend(s[i] - <span class="string">'a'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= all; ++i) cnt[i] = <span class="number">0</span>;</span><br><span class="line">Solve();</span><br><span class="line">p = root;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i)&#123;</span><br><span class="line">p = t[p].son[s[i] - <span class="string">'a'</span>];</span><br><span class="line">cnt[p]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = all; i &gt;= <span class="number">1</span>; --i)&#123;</span><br><span class="line">p = r[i];</span><br><span class="line"><span class="keyword">if</span>(t[p].fa != <span class="number">-1</span>)&#123;</span><br><span class="line">cnt[t[p].fa] += cnt[p];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">LL ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= all; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[i] &gt;= A) ans1 += t[i].len-t[t[i].fa].len; <span class="comment">// 计算出现次数大于等于A的种类</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= all; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[i] &gt; B) ans2 += t[i].len-t[t[i].fa].len; <span class="comment">// 计算出现次数大于B的种类</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans1 - ans2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/09/15/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8Ek%E6%AC%A1%E7%9A%84%E5%AD%90%E4%B8%B2%E7%A7%8D%E7%B1%BB(String%20and%20Times)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SG函数模板</title>
      <link>http://yoursite.com/2018/09/12/SG%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/</link>
      <guid>http://yoursite.com/2018/09/12/SG%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/</guid>
      <pubDate>Wed, 12 Sep 2018 13:37:05 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/109/9/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/109/9/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="模板一："><a href="#模板一：" class="headerlink" title="模板一："></a>模板一：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//f[]：可以取走的石子个数</span></span><br><span class="line"><span class="comment">//sg[]:0~n的SG函数值</span></span><br><span class="line"><span class="comment">//hash[]:mex&#123;&#125;</span></span><br><span class="line"><span class="keyword">int</span> f[K],sg[N],hash[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getSG</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(sg,<span class="number">0</span>,<span class="keyword">sizeof</span>(sg));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">                <span class="built_in">memset</span>(hash,<span class="number">0</span>,<span class="keyword">sizeof</span>(hash));</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; f[j]&lt;=i &amp;&amp; j &lt; k; j++) <span class="comment">//k是f[]的有效长度</span></span><br><span class="line">                        hash[sg[i-f[j]]]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; ; j++) &#123;   <span class="comment">//求mes&#123;&#125;中未出现的最小的非负整数</span></span><br><span class="line">                        <span class="keyword">if</span>(hash[j]==<span class="number">0</span>) &#123;</span><br><span class="line">                                sg[i]=j;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板二："><a href="#模板二：" class="headerlink" title="模板二："></a>模板二：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意 S数组要按从小到大排序 SG函数要初始化为-1 对于每个集合只需初始化1遍</span></span><br><span class="line"><span class="comment">//n是集合s的大小 S[i]是定义的特殊取法规则的数组</span></span><br><span class="line"><span class="keyword">int</span> s[N],sg[N],n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSG</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sg[x]!=<span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">return</span> sg[x];</span><br><span class="line">        <span class="keyword">bool</span> vis[M];</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(x&gt;=s[i])</span><br><span class="line">                        vis[getSG(x-s[i])]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;; i++)</span><br><span class="line">                <span class="keyword">if</span>(!vis[i]) &#123;</span><br><span class="line">                        sg[x]=i;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">return</span> sg[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/09/12/SG%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/#disqus_thread</comments>
    </item>
    
    <item>
      <title>BZOJ-2084-[Poi2010]Antisymmetry(回文自动机)</title>
      <link>http://yoursite.com/2018/09/11/BZOJ-2084-%5BPoi2010%5DAntisymmetry(%E5%9B%9E%E6%96%87%E8%87%AA%E5%8A%A8%E6%9C%BA)/</link>
      <guid>http://yoursite.com/2018/09/11/BZOJ-2084-%5BPoi2010%5DAntisymmetry(%E5%9B%9E%E6%96%87%E8%87%AA%E5%8A%A8%E6%9C%BA)/</guid>
      <pubDate>Tue, 11 Sep 2018 01:30:01 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/111/9/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/111/9/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2084" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=2084</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><ul><li>输入一个长度为 $n$ 的字符串 $S$</li><li>定义反对称：对于一个 $01$ 字符串，如果将这个字符串 $0$ 和 $1$ 取反后，再将整个串反过来和原串一样，就称作“反对称”字符串。比如 $00001111$ 和 $010101$ 就是反对称的，$1001$ 就不是。</li></ul><p>问：它有多少个子串是反对称的？</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$n \leq 5e^5$</li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">11001011</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><p>$hint$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7个反对称子串分别是：01(出现两次), 10(出现两次), 0101, 1100和001011</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><ul><li>所谓的反对称，其实就是：对称位置为 [0,1] 或 [1,0]。不过要注意的一点是一个字符不算反对称。</li><li>然后就可以使用回文自动机求解了。</li><li>要注意的是因为一个字符不算反对称，也就是说只要是长度为奇数的子串一定不是反对称。所以回文树上我们就可以不要长度为奇数的节点了。也就是，回溯时碰到节点1就不再往下做了。</li></ul><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,n) for(int i = a;i &lt;= n;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,n,a) for(int i = n;i &gt;= a;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF_INT=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL=<span class="number">0x7fffffff</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">OPEN</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">    freopen((s + <span class="string">".in"</span>).c_str(), <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen((s + <span class="string">".out"</span>).c_str(), <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PalindromeAutomaton</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ch[maxn][<span class="number">5</span>], fail[maxn], len[maxn], cnt[maxn], tot, lst;</span><br><span class="line">    PalindromeAutomaton()&#123;</span><br><span class="line">        tot = <span class="number">1</span>; fail[<span class="number">0</span>] = fail[<span class="number">1</span>] = <span class="number">1</span>; len[<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = lst;</span><br><span class="line">        <span class="keyword">while</span>(n - len[p] - <span class="number">1</span> != n &amp;&amp; (n - len[p] - <span class="number">1</span> &lt;= <span class="number">0</span> || s[n - len[p] - <span class="number">1</span>] == s[n]))&#123;</span><br><span class="line">            p = fail[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="number">1</span>) &#123;lst = <span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(!ch[p][c])&#123;</span><br><span class="line">            <span class="keyword">int</span> now = ++tot,k = fail[p];</span><br><span class="line">            len[now] = len[p] + <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">while</span>(n - len[k] - <span class="number">1</span> != n &amp;&amp; (n - len[k] - <span class="number">1</span> &lt;= <span class="number">0</span> || s[n - len[k] - <span class="number">1</span>] == s[n])) k = fail[k];</span><br><span class="line">            fail[now] = ch[k][c];</span><br><span class="line">            ch[p][c] = now;</span><br><span class="line">        &#125;</span><br><span class="line">        lst = ch[p][c]; cnt[lst]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LL ans = <span class="number">0</span>;</span><br><span class="line">        per(i,tot,<span class="number">1</span>)&#123;</span><br><span class="line">            cnt[fail[i]] += cnt[i];</span><br><span class="line">            ans += cnt[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; pam;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s + <span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,len) pam.extend(s[i] - <span class="string">'0'</span> + <span class="number">2</span>,i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,pam.solve());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/09/11/BZOJ-2084-%5BPoi2010%5DAntisymmetry(%E5%9B%9E%E6%96%87%E8%87%AA%E5%8A%A8%E6%9C%BA)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>BE, GE or NE(DP,博弈)</title>
      <link>http://yoursite.com/2018/09/10/BE,%20GE%20or%20NE(dp,%E5%8D%9A%E5%BC%88)/</link>
      <guid>http://yoursite.com/2018/09/10/BE,%20GE%20or%20NE(dp,%E5%8D%9A%E5%BC%88)/</guid>
      <pubDate>Mon, 10 Sep 2018 13:55:51 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/111/8/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/111/8/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="https://nanti.jisuanke.com/t/31454" target="_blank" rel="noopener">https://nanti.jisuanke.com/t/31454</a></p><h2 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h2><p>有两个人在玩游戏，他们最开始有积分 $m$ 分，如果最终的积分 $val&gt;=k$，则进入 $Bad Ending$，如果最终积分 $val&lt;l$ 则进入 $Good Ending$。现在一共有 $n$ 个关卡，每个选项有三个选项 $a,b,c$，$a$ 代表使得积分 $+a$，$b$ 代表使得积分 $+b$，$c==1$ 代表使得积分 $*(-1)$。如果 $a$ 或$ b$ 等于 $0$ ，则不能选择，题目保证 $a$，$b$，$c$ 不同时为$0$，$A$ 先选，$B$ 后选，$A$ 想要进入 $GE$，$B$ 想要进入 $BE$，他们都会进行最优的操作，问你最后的结局。</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><p>$1 \leq n \leq 10^3$</p><p>$-100 \leq m,k,l \leq 100$</p><p>$0 \leq a,b $</p><p>$0 \leq c \leq 1$</p><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 -8 5 -5</span><br><span class="line">3 1 1</span><br><span class="line">2 0 1</span><br><span class="line">0 2 1</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Good Ending</span><br></pre></td></tr></table></figure><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 0 10 3</span><br><span class="line">0 0 1</span><br><span class="line">0 10 1</span><br><span class="line">0 2 1</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bad Ending</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><pre><code>因为要满足 $GE$，分数越高越好，而要满足 $BE$，分数越低越好，因此 $A$ 的策略应当是取尽可能大的，$B$ 的策略应当是取尽可能小的。从后往前推。</code></pre><ul><li><strong>状态方程</strong>：$dp[i][j]$ 代表在第 $i$ 个关卡中，分数为 $j$ 分时，选择操作后，最后所能获得的最大的分数。</li></ul><ul><li>初始化：$dp[n + 1][i] = i$ 至于为什么自己举一个只有一轮的例子模拟一下就知道了。</li></ul><ul><li><p><strong>转移方程</strong>：</p><p>见代码</p><p>而对于 $i$ 为奇数情况下是 $A$ 选，则 $i$ 的状态要优先选最大值；而对于 $i$ 为偶数的情况下 $B$ 选，则优先选最小。</p></li></ul><ul><li><strong>最后答案</strong>：判断 $dp[1][m]$ 满足什么条件后输出相应的答案。</li></ul><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a><strong>AC</strong>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,n) for(int i = a;i &lt;= n;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,n,a) for(int i = n;i &gt;= a;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF_INT = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x7fffffff</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],c[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">405</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> bits = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,k,l;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>,&amp;n,&amp;m,&amp;k,&amp;l);</span><br><span class="line">rep(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;a[i],&amp;b[i],&amp;c[i]);</span><br><span class="line">rep(i,<span class="number">0</span>,<span class="number">200</span>) dp[n + <span class="number">1</span>][i] = i - <span class="number">100</span>;</span><br><span class="line">per(i,n,<span class="number">1</span>)&#123;</span><br><span class="line">rep(j,<span class="number">0</span>,<span class="number">200</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> k1 = dp[i + <span class="number">1</span>][min(<span class="number">200</span>,j + a[i])];</span><br><span class="line"><span class="keyword">int</span> k2 = dp[i + <span class="number">1</span>][max(<span class="number">0</span>,j - b[i])];</span><br><span class="line"><span class="keyword">int</span> k3 = dp[i + <span class="number">1</span>][<span class="number">200</span> - j];</span><br><span class="line"><span class="keyword">if</span>(i &amp; <span class="number">1</span>)&#123; <span class="comment">// max</span></span><br><span class="line">dp[i][j] = <span class="number">-100</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i]) dp[i][j] = max(dp[i][j],k1);</span><br><span class="line"><span class="keyword">if</span>(b[i]) dp[i][j] = max(dp[i][j],k2);</span><br><span class="line"><span class="keyword">if</span>(c[i]) dp[i][j] = max(dp[i][j],k3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="comment">// min</span></span><br><span class="line">dp[i][j] = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i]) dp[i][j] = min(dp[i][j],k1);</span><br><span class="line"><span class="keyword">if</span>(b[i]) dp[i][j] = min(dp[i][j],k2);</span><br><span class="line"><span class="keyword">if</span>(c[i]) dp[i][j] = min(dp[i][j],k3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dp[<span class="number">1</span>][m + <span class="number">100</span>] &gt;= k) <span class="built_in">printf</span>(<span class="string">"Good Ending\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(dp[<span class="number">1</span>][m + <span class="number">100</span>] &lt;= l) <span class="built_in">printf</span>(<span class="string">"Bad Ending\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Normal Ending\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/09/10/BE,%20GE%20or%20NE(dp,%E5%8D%9A%E5%BC%88)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>回文自动机</title>
      <link>http://yoursite.com/2018/09/09/%E5%9B%9E%E6%96%87%E8%87%AA%E5%8A%A8%E6%9C%BA/</link>
      <guid>http://yoursite.com/2018/09/09/%E5%9B%9E%E6%96%87%E8%87%AA%E5%8A%A8%E6%9C%BA/</guid>
      <pubDate>Sun, 09 Sep 2018 02:41:33 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/108/2/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/108/2/thumb.jpg" alt="img"></p><a id="more"></a><h1 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h1><ul><li><a href="https://ksmeow.moe/palindromic_tree/" target="_blank" rel="noopener">https://ksmeow.moe/palindromic_tree/</a></li><li><a href="https://blog.csdn.net/u013368721/article/details/42100363" target="_blank" rel="noopener">https://blog.csdn.net/u013368721/article/details/42100363</a></li></ul><h2 id="截图："><a href="#截图：" class="headerlink" title="截图："></a>截图：</h2><p><img src="C:\Users\GP62\Pictures\Camera Roll\GitHub-picture\Snipaste_2018-09-15_23-42-10.jpg" alt="Snipaste_2018-09-15_23-42-10"></p><p><img src="C:\Users\GP62\Pictures\Camera Roll\GitHub-picture\Snipaste_2018-09-15_23-43-28.jpg" alt="Snipaste_2018-09-15_23-43-28"></p><p><img src="C:\Users\GP62\Pictures\Camera Roll\GitHub-picture\Snipaste_2018-09-15_23-43-48.jpg" alt="Snipaste_2018-09-15_23-43-48"></p><p><img src="C:\Users\GP62\Pictures\Camera Roll\GitHub-picture\Snipaste_2018-09-15_23-43-54.jpg" alt="Snipaste_2018-09-15_23-43-54"></p><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3676" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=3676</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><ul><li>给你一个只由小写字母构成的字符串 $S$ </li></ul><p>问 ：字符串 $S$ 中每一个不同回文串出现的次数乘长度之和为多少？</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$ 1 \leq |S| \leq 3e^5$ </li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abacaba</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p>$hint$ </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">一个串是回文的，当且仅当它从左到右读和从右到左读完全一样。 </span><br><span class="line"></span><br><span class="line">在第一个样例中，回文子串有7个：a，b，c，aba，aca，bacab，abacaba，其中： </span><br><span class="line"></span><br><span class="line">● a出现4次，其出现值为4：1：1=4 </span><br><span class="line"></span><br><span class="line">● b出现2次，其出现值为2：1：1=2 </span><br><span class="line"></span><br><span class="line">● c出现1次，其出现值为l：1：l=l </span><br><span class="line"></span><br><span class="line">● aba出现2次，其出现值为2：1：3=6 </span><br><span class="line"></span><br><span class="line">● aca出现1次，其出现值为1=1：3=3 </span><br><span class="line"></span><br><span class="line">● bacab出现1次，其出现值为1：1：5=5 </span><br><span class="line"></span><br><span class="line">● abacaba出现1次，其出现值为1：1：7=7 </span><br><span class="line"></span><br><span class="line">故最大回文子串出现值为7。 xxxxxxxxxx 一个串是回文的，当且仅当它从左到右读和从右到左读完全一样。 在第一个样例中，回文子串有7个：a，b，c，aba，aca，bacab，abacaba，其中：</span><br><span class="line">​● a出现4次，其出现值为4：1：1=4 </span><br><span class="line">​● b出现2次，其出现值为2：1：1=2 </span><br><span class="line">​● c出现1次，其出现值为l：1：l=l </span><br><span class="line">​● aba出现2次，其出现值为2：1：3=6 </span><br><span class="line">​● aca出现1次，其出现值为1=1：3=3 </span><br><span class="line">​●bacab出现1次，其出现值为1：1：5=5 </span><br><span class="line">​● abacaba出现1次，其出现值为1：1：7=7 </span><br><span class="line">​故最大回文子串出现值为7。 www</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>回文自动机</p><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,n) for(int i = a;i &lt;= n;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,n,a) for(int i = n;i &gt;= a;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF_INT = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x7fffffff</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PalindromAutomaton</span>&#123;</span> <span class="comment">//每个节点代表一个不同的回文串</span></span><br><span class="line"><span class="keyword">int</span> ch[maxn][<span class="number">26</span>], fail[maxn], len[maxn], cnt[maxn], tot, lst;</span><br><span class="line"><span class="comment">//ch[i][j] : 表示节点 i 有一条 j 边指向的节点 </span></span><br><span class="line"><span class="comment">//fail[i]:   表示节点 i 失配后跳转的节点</span></span><br><span class="line"><span class="comment">//len[i] :   表示节点 i 所代表的回文串的长度</span></span><br><span class="line"><span class="comment">//cnt[i] :   表示节点 i 所代表的回文串出现的次数(建树时求出的不是完全的，最后需要倒着跑一遍以后 才是正确的)</span></span><br><span class="line"><span class="comment">//tot :      表示总共节点数</span></span><br><span class="line"><span class="comment">//lst :      表示上一次匹配到的节点</span></span><br><span class="line">PalindromAutomaton()&#123;</span><br><span class="line">tot = <span class="number">1</span>; fail[<span class="number">0</span>] = fail[<span class="number">1</span>] = <span class="number">1</span>; len[<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = lst;</span><br><span class="line"><span class="keyword">while</span>(s[n - len[p] - <span class="number">1</span>] != s[n]) p = fail[p];</span><br><span class="line"><span class="keyword">if</span>(!ch[p][c])&#123; <span class="comment">// 若ch[p][c]不存在, 表示会形成一个新的回文串</span></span><br><span class="line"><span class="keyword">int</span> now = ++tot, k = fail[p];</span><br><span class="line">len[now] = len[p] + <span class="number">2</span>;</span><br><span class="line">cnt[now]++;</span><br><span class="line"><span class="keyword">while</span>(s[n - len[k] - <span class="number">1</span>] != s[n]) k = fail[k];</span><br><span class="line">fail[now] = ch[k][c]; ch[p][c] = now;</span><br><span class="line">&#125;</span><br><span class="line">lst = ch[p][c];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">per(i,tot,<span class="number">1</span>) cnt[fail[i]] += cnt[i];</span><br><span class="line">rep(i,<span class="number">1</span>,tot) ans = max(ans,cnt[i] * len[i]);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;pam;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s + <span class="number">1</span>);</span><br><span class="line">n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">rep(i,<span class="number">1</span>,n) pam.extend(s[i] - <span class="string">'a'</span>,i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,pam.solve());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/09/09/%E5%9B%9E%E6%96%87%E8%87%AA%E5%8A%A8%E6%9C%BA/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
