<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>天之界</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>踏一步便是虚无</description>
    <pubDate>Sun, 11 Nov 2018 10:47:51 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Codeforces - gym - 101630 - C.Connections(强连通+思维)</title>
      <link>http://yoursite.com/2018/11/11/Codeforces%20-%20gym%20-%20101630%20-%20C.Connections(%E5%BC%BA%E8%BF%9E%E9%80%9A+%E6%80%9D%E7%BB%B4)/</link>
      <guid>http://yoursite.com/2018/11/11/Codeforces%20-%20gym%20-%20101630%20-%20C.Connections(%E5%BC%BA%E8%BF%9E%E9%80%9A+%E6%80%9D%E7%BB%B4)/</guid>
      <pubDate>Sun, 11 Nov 2018 10:29:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/120/8/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/120/8/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://codeforces.com/gym/101630/attachments" target="_blank" rel="noopener">http://codeforces.com/gym/101630/attachments</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>$T$ 组数据，给你一幅有向图，有 $n$ 个点，$m$ 条边，问删除哪 $m - 2 * n$ 条边，可以使得剩下的图任意两点之间能互相到达。</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$n &gt;= 4$</li><li>$m &gt; 2 * n$</li><li>$The$ $sum$ $of$ $m$ $over$ $all$ $test$ $cases$ $in$ $a$ $single$ $input$ $does$ $not$ $exceed$ $100 000$.</li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">4 9</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 3</span><br><span class="line">2 4</span><br><span class="line">3 2</span><br><span class="line">3 4</span><br><span class="line">4 1</span><br><span class="line">4 2</span><br><span class="line">4 3</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 3</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><ul><li>首先要注意 $n$ 的范围，因为 $m$ 最大为 $100000$，但 $n$ 不一定是小于 $1000$ 的，所以直接就开 $2e5$ , 这样能保证当点数为 $2e5$ 时，由 $100000$ 条边是一定形成不了强连通图的。</li><li>我们可以把 $1$ 点当做中转站，那么我们先从 $1$ 点跑到其他所有点，然后把经过的边给标记。接着我们把边反向建，形成一幅新的图，再从 $1$ 点跑到其他所有点，若当前是 $u -&gt; v$ 那么把 $vis[v][u]$ 标记了。这样最多会标记 $2 * (n - 1)$ 条边，然后其他边可以随便选。因为这样保证一定能形成强连通图，也可以说强连通图有这个性质。</li></ul><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> x[maxn],y[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G1[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G2[maxn];</span><br><span class="line"><span class="keyword">bool</span> arrive[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;pii,<span class="keyword">bool</span>&gt; vis;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">arrive[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; G1[u].size();i++)&#123;</span><br><span class="line"><span class="keyword">int</span> v = G1[u][i];</span><br><span class="line"><span class="keyword">if</span>(!arrive[v])&#123;</span><br><span class="line">vis[make_pair(u,v)] = <span class="number">1</span>;</span><br><span class="line">Dfs1(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs2</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">arrive[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; G2[u].size();i++)&#123;</span><br><span class="line"><span class="keyword">int</span> v = G2[u][i];</span><br><span class="line"><span class="keyword">if</span>(!arrive[v])&#123;</span><br><span class="line">vis[make_pair(u,v)] = <span class="number">1</span>;</span><br><span class="line">Dfs2(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">G1[i].clear();</span><br><span class="line">G2[i].clear();</span><br><span class="line">&#125;</span><br><span class="line">vis.clear();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">G1[x[i]].push_back(y[i]);</span><br><span class="line">G2[y[i]].push_back(x[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dfs1(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) arrive[i] = <span class="number">0</span>;</span><br><span class="line">Dfs2(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) arrive[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt = m - <span class="number">2</span> * n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m &amp;&amp; cnt;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[make_pair(x[i],y[i])])&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,x[i],y[i]);</span><br><span class="line">cnt--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/11/11/Codeforces%20-%20gym%20-%20101630%20-%20C.Connections(%E5%BC%BA%E8%BF%9E%E9%80%9A+%E6%80%9D%E7%BB%B4)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforces - gym - 101550 - C.Card Hand Sorting(最长公共子序列)</title>
      <link>http://yoursite.com/2018/11/05/Codeforces%20-%20gym%20-%20101550%20-%20C.Card%20Hand%20Sorting(%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97)/</link>
      <guid>http://yoursite.com/2018/11/05/Codeforces%20-%20gym%20-%20101550%20-%20C.Card%20Hand%20Sorting(%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97)/</guid>
      <pubDate>Mon, 05 Nov 2018 03:32:49 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/119/2/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/119/2/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://codeforces.com/gym/101550/attachments" target="_blank" rel="noopener">http://codeforces.com/gym/101550/attachments</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><ul><li><p>输入一个 $n$ 表示有 $n$ 张牌</p></li><li><p>牌一共有 $4$ 种颜色 ${s, h, d, c}$ </p></li><li><p>牌上的符号有(从小到大) ${2,3,4,5,6,7,8,9,T, J, Q, K,A}$  </p></li><li><p>每张牌给的格式为：符号+牌的颜色 如：$2h$ , $Jd$</p></li><li><p>问是否以一种排列满足</p><ul><li>相同颜色的牌放在一起</li><li>相同颜色的牌要 递增 或 递减 的排列</li><li>颜色的顺序可以随便</li></ul><p>使得这一种排列放回原来的排列步数最少的多少？</p></li></ul><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$1 &lt;= n &lt;= 52$</li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">2h Th 8c Qh</span><br><span class="line"></span><br><span class="line">7</span><br><span class="line">9d As 2s Qd 2c Jd 8h</span><br><span class="line"></span><br><span class="line">4</span><br><span class="line">2h 3h 9c 8c</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>那么可以先暴力求出所有的排列情况，然后求出每种排列与原排列的最长公共子序列，那么答案为 $min(n - 最长公共子序列)$</p><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">300</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">55</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">55</span>],b[<span class="number">55</span>],p[<span class="number">6</span>],pos[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="string">'1'</span>;i &lt;= <span class="string">'9'</span>;i++) f[i] = i - <span class="string">'0'</span>;</span><br><span class="line">f[<span class="string">'T'</span>] = <span class="number">10</span>; f[<span class="string">'J'</span>] = <span class="number">11</span>;</span><br><span class="line">f[<span class="string">'Q'</span>] = <span class="number">12</span>; f[<span class="string">'K'</span>] = <span class="number">13</span>;</span><br><span class="line">f[<span class="string">'A'</span>] = <span class="number">14</span>;</span><br><span class="line">p[<span class="number">1</span>] = <span class="number">1</span>; p[<span class="number">2</span>] = <span class="number">2</span>; p[<span class="number">3</span>] = <span class="number">3</span>; p[<span class="number">4</span>] = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &gt; y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n + <span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>;j &lt;= n + <span class="number">1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>]) dp[i][j] = max(dp[i][j],dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> dp[i][j] = max(dp[i][j - <span class="number">1</span>],dp[i - <span class="number">1</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n - dp[n + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">Init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i] + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">G[<span class="number">1</span>].clear(); G[<span class="number">2</span>].clear(); G[<span class="number">3</span>].clear(); G[<span class="number">4</span>].clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">4</span>;i++) pos[p[i]] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i][<span class="number">2</span>] == <span class="string">'s'</span>) a[i] = pos[<span class="number">1</span>] * <span class="number">100</span> + f[s[i][<span class="number">1</span>]], G[<span class="number">1</span>].push_back(a[i]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i][<span class="number">2</span>] == <span class="string">'h'</span>)&#123;</span><br><span class="line">                a[i] = pos[<span class="number">2</span>] * <span class="number">100</span> + f[s[i][<span class="number">1</span>]], G[<span class="number">2</span>].push_back(a[i]);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i][<span class="number">2</span>] == <span class="string">'d'</span>)&#123;</span><br><span class="line">                a[i] = pos[<span class="number">3</span>] * <span class="number">100</span> + f[s[i][<span class="number">1</span>]], G[<span class="number">3</span>].push_back(a[i]);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i][<span class="number">2</span>] == <span class="string">'c'</span>)&#123;</span><br><span class="line">                a[i] = pos[<span class="number">4</span>] * <span class="number">100</span> + f[s[i][<span class="number">1</span>]], G[<span class="number">4</span>].push_back(a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt;= <span class="number">15</span>;j++)&#123;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>((j &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span>)&#123; <span class="comment">// small -&gt; big</span></span><br><span class="line">sort(G[p[i + <span class="number">1</span>]].begin(),G[p[i + <span class="number">1</span>]].end());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="comment">// big -&gt; small</span></span><br><span class="line">sort(G[p[i + <span class="number">1</span>]].begin(),G[p[i + <span class="number">1</span>]].end(),cmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; G[p[i + <span class="number">1</span>]].size();k++)&#123;</span><br><span class="line">b[++tot] = G[p[i + <span class="number">1</span>]][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = min(ans,Solve());</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(next_permutation(p + <span class="number">1</span>,p + <span class="number">1</span> + <span class="number">4</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/11/05/Codeforces%20-%20gym%20-%20101550%20-%20C.Card%20Hand%20Sorting(%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LCA模板</title>
      <link>http://yoursite.com/2018/11/04/LCA%E6%A8%A1%E6%9D%BF/</link>
      <guid>http://yoursite.com/2018/11/04/LCA%E6%A8%A1%E6%9D%BF/</guid>
      <pubDate>Sun, 04 Nov 2018 11:05:29 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/119/1/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/119/1/thumb.jpg" alt="img"></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> MAXN 500001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, s;</span><br><span class="line"><span class="keyword">int</span> f[MAXN][<span class="number">25</span>], deep[MAXN];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; vec[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, v;</span><br><span class="line">    deep[u] = deep[f[u][<span class="number">0</span>]] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; f[u][i]; i++) f[u][i + <span class="number">1</span>] = f[f[u][i]][i];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; vec[u].size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v = vec[u][i];</span><br><span class="line">        <span class="keyword">if</span>(!deep[v]) f[v][<span class="number">0</span>] = u, dfs(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(deep[x] &lt; deep[y]) swap(x, y);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span>(deep[f[x][i]] &gt;= deep[y])</span><br><span class="line">            x = f[x][i];</span><br><span class="line">    <span class="keyword">if</span>(x == y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span>(f[x][i] != f[y][i])</span><br><span class="line">            x = f[x][i], y = f[y][i];</span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, x, y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;n,&amp;m,&amp;s)</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x = get_num();</span><br><span class="line">        y = get_num();</span><br><span class="line">        vec[x].push_back(y);</span><br><span class="line">        vec[y].push_back(x);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(s);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lca(x, y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/11/04/LCA%E6%A8%A1%E6%9D%BF/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforces - gym - 101550 - A.Artwork(并查集)</title>
      <link>http://yoursite.com/2018/11/04/Codeforces%20-%20gym%20-%20101550%20-%20A.Artwork(%E5%B9%B6%E6%9F%A5%E9%9B%86)/</link>
      <guid>http://yoursite.com/2018/11/04/Codeforces%20-%20gym%20-%20101550%20-%20A.Artwork(%E5%B9%B6%E6%9F%A5%E9%9B%86)/</guid>
      <pubDate>Sun, 04 Nov 2018 06:22:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/119/11/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/119/11/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://codeforces.com/gym/101550/attachments" target="_blank" rel="noopener">http://codeforces.com/gym/101550/attachments</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>有一个 $n*m$ 的矩阵，初始格子都为白色，然后有 $q$ 个操作，每个操作给你一条线段的两个端点，$(x_1,y_1)$ $(x_2,y_2)$ , 然后把这条线段上的格子涂黑，问当前（每个操作不独立）有白色格子联通块？</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$1 &lt;= n ,m&lt;= 1000$ </li><li>$1 &lt;= q &lt;= 1e4$</li><li>$1 &lt;= x_1 &lt;= x_2 &lt;= n$</li><li>$1 &lt;= y_1 &lt;= y_2 &lt;= m$</li><li>4s</li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4 6 5</span><br><span class="line">2 2 2 6</span><br><span class="line">1 3 4 3</span><br><span class="line">2 5 3 5</span><br><span class="line">4 6 4 6</span><br><span class="line">1 6 4 6</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>利用并查集，倒着推，在删除黑格时，判断四个方向会不会多产生白色联通块或减少联通块。</p><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn],ans[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,q,num,flag;</span><br><span class="line"><span class="keyword">int</span> nx,ny,id,nid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[MaxN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x_1,y_1;</span><br><span class="line"><span class="keyword">int</span> x_2,y_2;</span><br><span class="line">&#125;node[<span class="number">10005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">GetID</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m * (x - <span class="number">1</span>) + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == father[x]) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> father[x] = Find(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= n &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= m) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> F)</span></span>&#123;</span><br><span class="line">vis[x][y] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> now = GetID(x,y);</span><br><span class="line"><span class="keyword">if</span>(Find(now) != F) father[Find(now)] = father[Find(F)];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">-1</span>;i &lt;= <span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">-1</span>;j &lt;= <span class="number">1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + i;</span><br><span class="line"><span class="keyword">int</span> ny = y + j;</span><br><span class="line"><span class="keyword">if</span>(i * j == <span class="number">0</span> &amp;&amp; Check(nx,ny) &amp;&amp; !vis[nx][ny] &amp;&amp; a[nx][ny] == <span class="number">0</span>)&#123;</span><br><span class="line">Dfs(nx,ny,Find(now));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Get</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Check(nx,ny) &amp;&amp; a[nx][ny] == <span class="number">0</span>)&#123;</span><br><span class="line">nid = GetID(nx,ny);</span><br><span class="line"><span class="keyword">if</span>(Find(nid) != Find(id))&#123;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">1</span>) num--;</span><br><span class="line">father[Find(nid)] = father[Find(id)];</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">id = GetID(x,y);</span><br><span class="line">nx = x + <span class="number">1</span>; <span class="comment">// up</span></span><br><span class="line">ny = y;</span><br><span class="line">Get();</span><br><span class="line">nx = x - <span class="number">1</span>; <span class="comment">// down</span></span><br><span class="line">ny = y;</span><br><span class="line">Get();</span><br><span class="line">nx = x;     <span class="comment">// left</span></span><br><span class="line">ny = y - <span class="number">1</span>; </span><br><span class="line">Get();</span><br><span class="line">nx = x;    <span class="comment">// right</span></span><br><span class="line">ny = y + <span class="number">1</span>;</span><br><span class="line">Get();</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">0</span>) num++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= q;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>,&amp;node[i].x_1,&amp;node[i].y_1,&amp;node[i].x_2,&amp;node[i].y_2);</span><br><span class="line"><span class="keyword">if</span>(node[i].x_1 == node[i].x_2)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = node[i].y_1;j &lt;= node[i].y_2;j++) a[node[i].x_1][j]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = node[i].x_1;j &lt;= node[i].x_2;j++) a[j][node[i].y_1]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n * m;i++) father[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j] == <span class="number">0</span> &amp;&amp; !vis[i][j])&#123;</span><br><span class="line">num++;</span><br><span class="line">Dfs(i,j,Find(GetID(i,j)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans[q] = num;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = q;i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(node[i].x_1 == node[i].x_2)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = node[i].y_1;j &lt;= node[i].y_2;j++)&#123;</span><br><span class="line">a[node[i].x_1][j]--;</span><br><span class="line"><span class="keyword">int</span> nowx = node[i].x_1;</span><br><span class="line"><span class="keyword">int</span> nowy = j;</span><br><span class="line"><span class="keyword">if</span>(a[nowx][nowy] == <span class="number">0</span>)&#123;</span><br><span class="line">Solve(nowx,nowy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = node[i].x_1;j &lt;= node[i].x_2;j++)&#123;</span><br><span class="line">a[j][node[i].y_1]--;</span><br><span class="line"><span class="keyword">int</span> nowx = j;</span><br><span class="line"><span class="keyword">int</span> nowy = node[i].y_1;</span><br><span class="line"><span class="keyword">if</span>(a[nowx][nowy] == <span class="number">0</span>)&#123;</span><br><span class="line">Solve(nowx,nowy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans[i - <span class="number">1</span>] = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= q;i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/11/04/Codeforces%20-%20gym%20-%20101550%20-%20A.Artwork(%E5%B9%B6%E6%9F%A5%E9%9B%86)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>读题单词</title>
      <link>http://yoursite.com/2018/11/04/%E8%AF%BB%E9%A2%98%E5%8D%95%E8%AF%8D/</link>
      <guid>http://yoursite.com/2018/11/04/%E8%AF%BB%E9%A2%98%E5%8D%95%E8%AF%8D/</guid>
      <pubDate>Sun, 04 Nov 2018 06:22:40 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/119/6/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/119/6/thumb.jpg" alt="img"></p><a id="more"></a><p>$excluding$ : 不包括</p><p>$ cheat$ : 作弊</p><p>$against​$ ：反对</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/11/04/%E8%AF%BB%E9%A2%98%E5%8D%95%E8%AF%8D/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforces - gym - 101873 - C.Joyride!(Dijkstra+状态转移)</title>
      <link>http://yoursite.com/2018/10/29/Codeforces%20-%20gym%20-%20101873%20-%20C.Joyride!(Dijkstra+%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB)/</link>
      <guid>http://yoursite.com/2018/10/29/Codeforces%20-%20gym%20-%20101873%20-%20C.Joyride!(Dijkstra+%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB)/</guid>
      <pubDate>Mon, 29 Oct 2018 13:45:36 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/34579/1535724568669/thumb_Fri_Aug_31_2018.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/34579/1535724568669/thumb_Fri_Aug_31_2018.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="https://codeforces.com/gym/101873/problem/C" target="_blank" rel="noopener">https://codeforces.com/gym/101873/problem/C</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><ul><li>给你一副无向图，有 $n$ 个点，第 $i$ 个点花费时间为 $t_i$ 和 花费价钱为 $p_i$ </li><li>$m$ 条边，经过每条边的花费时间都为 $t$</li></ul><p>问：从 $1$ 点出发，最后回到 $1$ 点时花费时间恰好为 $x$ ，最少花费价钱为多少？（可以在同一个点不动，但还是要花费时间和价钱，只要经过就花），如果不能恰好到达 $1$ 点，就输出 $It$ $is$ $a$ $trap.$</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$1 &lt;= x &lt;= 1000$</li><li>$1 &lt;= n,m &lt;= 1000$</li><li>$1 &lt;= t &lt;= 1000 $</li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4 4 1</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">4 1</span><br><span class="line">1 2</span><br><span class="line">2 1</span><br><span class="line">5 4</span><br><span class="line">3 3</span><br><span class="line"></span><br><span class="line">6</span><br><span class="line">4 4 1</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">4 1</span><br><span class="line">1 2</span><br><span class="line">2 1</span><br><span class="line">5 4</span><br><span class="line">3 3</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line"></span><br><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>因为题目要求最小花费价钱，所以第一反应就要想到跑个最短路。那么现在的问题就是这么解决每个点的状态？</p><p>因为 $x$ 不超过 $1000$ ，我们可以把每个点的状态设为：$dp[i][j]$ 当在第 $i$ 点，花费时间为 $j$ 时的最少花费价钱。</p><p>然后我们就可以按照 $Dijkstra$ 转移了。(但这个复杂度我不太清楚这么算……)</p><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> id,x,cost;</span><br><span class="line">Node () &#123;&#125;</span><br><span class="line">Node (<span class="keyword">int</span> _id,<span class="keyword">int</span> _x,<span class="keyword">int</span> _cost)&#123;</span><br><span class="line">id = _id;</span><br><span class="line">x = _x;</span><br><span class="line">cost = _cost;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">friend</span> <span class="keyword">operator</span> &lt; (Node a,Node b)&#123;</span><br><span class="line"><span class="keyword">return</span> a.cost &gt; b.cost;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span> * maxn + <span class="number">5</span>][maxn + <span class="number">5</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="keyword">int</span> t[<span class="number">2</span> * maxn + <span class="number">5</span>],p[<span class="number">2</span> * maxn + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> T,n,m,X;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">2</span> * n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt;= X;j++)&#123;</span><br><span class="line">dp[i][j] = inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[s][t[s]] = p[s];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">Init(s);</span><br><span class="line">priority_queue&lt;Node&gt; pq;</span><br><span class="line">pq.push(Node(s,t[s],p[s]));</span><br><span class="line"><span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">Node now = pq.top();</span><br><span class="line">pq.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; G[now.id].size();i++)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">int</span> v = G[now.id][i];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(v - now.id) == n) tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> tmp = T;</span><br><span class="line">tmp = now.x + tmp + t[v];</span><br><span class="line"><span class="comment">//printf("tmp = %d ,v = %d\n",tmp,v);</span></span><br><span class="line"><span class="comment">//printf("** %d\n",dp[v][tmp]);</span></span><br><span class="line"><span class="comment">//printf("%d %d %d %d\n",now.id,now.x,p[v],dp[now.id][now.x] + p[v]);</span></span><br><span class="line"><span class="keyword">if</span>(tmp &lt;= X &amp;&amp; dp[v][tmp] &gt; dp[now.id][now.x] + p[v])&#123;</span><br><span class="line">dp[v][tmp] = dp[now.id][now.x] + p[v];</span><br><span class="line">pq.push(Node(v,tmp,dp[v][tmp]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">2</span> * maxn + <span class="number">5</span>][<span class="number">2</span> * maxn + <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;X);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;n,&amp;m,&amp;T);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</span><br><span class="line">G[u].push_back(v);</span><br><span class="line">G[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;t[i],&amp;p[i]);</span><br><span class="line">t[i + n] = t[i];</span><br><span class="line">p[i + n] = p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; G[i].size();j++)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = G[i][j];</span><br><span class="line"><span class="keyword">if</span>(vis[i + n][tmp] == <span class="number">0</span>)&#123;</span><br><span class="line">G[i + n].push_back(tmp);</span><br><span class="line">G[tmp].push_back(i + n);</span><br><span class="line">vis[i + n][tmp] = <span class="number">1</span>;</span><br><span class="line">vis[tmp][i + n] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(vis[i + n][tmp + n] == <span class="number">0</span>)&#123;</span><br><span class="line">G[i + n].push_back(tmp + n);</span><br><span class="line">G[tmp + n].push_back(i + n);</span><br><span class="line">vis[i + n][tmp + n] = <span class="number">1</span>;</span><br><span class="line">vis[tmp + n][i + n] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">G[i].push_back(i + n);</span><br><span class="line">G[i + n].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">Dijstra(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> mi = inf;</span><br><span class="line">mi = min(mi,dp[<span class="number">1</span>][X]);</span><br><span class="line">mi = min(mi,dp[<span class="number">1</span> + n][X]);</span><br><span class="line"><span class="keyword">if</span>(mi == inf) <span class="built_in">printf</span>(<span class="string">"It is a trap.\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,mi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/10/29/Codeforces%20-%20gym%20-%20101873%20-%20C.Joyride!(Dijkstra+%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>set的用法(C++)</title>
      <link>http://yoursite.com/2018/10/28/set%E7%9A%84%E7%94%A8%E6%B3%95(C++)/</link>
      <guid>http://yoursite.com/2018/10/28/set%E7%9A%84%E7%94%A8%E6%B3%95(C++)/</guid>
      <pubDate>Sun, 28 Oct 2018 14:13:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/118/5/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/118/5/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="set-的函数调用"><a href="#set-的函数调用" class="headerlink" title="set 的函数调用"></a>set 的函数调用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">c++ stl容器set成员函数:begin()--返回指向第一个元素的迭代器</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:clear()--清除所有元素</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:count()--返回某个值元素的个数</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:empty()--如果集合为空，返回true</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:end()--返回指向最后一个元素的迭代器</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:equal_range()--返回集合中与给定值相等的上下限的两个迭代器</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:erase()--删除集合中的元素</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:find()--返回一个指向被查找到元素的迭代器</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:get_allocator()--返回集合的分配器</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:insert()--在集合中插入元素</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:lower_bound()--返回指向大于（或等于）某值的第一个元素的迭代器</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:key_comp()--返回一个用于元素间值比较的函数</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:max_size()--返回集合能容纳的元素的最大限值</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:rbegin()--返回指向集合中最后一个元素的反向迭代器</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:rend()--返回指向集合中第一个元素的反向迭代器</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:size()--集合中元素的数目</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:swap()--交换两个集合变量</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:upper_bound()--返回大于某个值元素的迭代器</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:value_comp()--返回一个用于比较元素间的值的函数</span><br></pre></td></tr></table></figure><h2 id="c-stl集合set插入-遍历用法举例"><a href="#c-stl集合set插入-遍历用法举例" class="headerlink" title="c++ stl集合set插入,遍历用法举例"></a>c++ stl集合set插入,遍历用法举例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="comment">//set插入元素操作  </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">//定义一个int型集合对象s,当前没有任何元素.由www.169it.com搜集整理</span></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s; </span><br><span class="line">    s.insert(<span class="number">8</span>);  <span class="comment">//第一次插入8，可以插入  </span></span><br><span class="line">    s.insert(<span class="number">1</span>); </span><br><span class="line">    s.insert(<span class="number">12</span>); </span><br><span class="line">    s.insert(<span class="number">6</span>); </span><br><span class="line">    s.insert(<span class="number">8</span>);   <span class="comment">//第二次插入8，重复元素，不会插入  </span></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it; <span class="comment">//定义前向迭代器 </span></span><br><span class="line">    <span class="comment">//中序遍历集合中的所有元素  </span></span><br><span class="line">    <span class="keyword">for</span>(it=s.begin();it!=s.end();it++) </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;    </span><br><span class="line">    system(<span class="string">"pause"</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/10/28/set%E7%9A%84%E7%94%A8%E6%B3%95(C++)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforces- 518 - div2 - D.Array Without Local Maximums(DP计数)</title>
      <link>http://yoursite.com/2018/10/28/Codeforces-%20518%20-%20div2%20-%20D.Array%20Without%20Local%20Maximums(DP)/</link>
      <guid>http://yoursite.com/2018/10/28/Codeforces-%20518%20-%20div2%20-%20D.Array%20Without%20Local%20Maximums(DP)/</guid>
      <pubDate>Sun, 28 Oct 2018 13:46:41 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/118/2/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/118/2/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://codeforces.com/contest/1068/problem/D" target="_blank" rel="noopener">http://codeforces.com/contest/1068/problem/D</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><ul><li>输入一个 $n$ ：表示有一个长度为 $n$ 的 $a$ 序列。</li><li>$a_i$ 的范围为 $1 -&gt; 200$ 和 $-1$ 。</li><li>如果 $a_i = -1$ ，那么里的值可以改为任意数且满足以下三个条件</li></ul><p>$1$. $a_1 ≤ a_2$</p><p>$2$. $a<em>n &lt;= a</em>{n - 1}$</p><p>$3.$ $a<em>i &lt;= max(a</em>{i - 1},a_{i + 1})$ ，$i$ 从 $2$ 到 $n - 1$</p><p>问：总共会有多少个不一样的数列 ？ （ $\%998244353$)</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$2 &lt;=n &lt;= 1e5$</li><li>$1 &lt;= a_i &lt;= 200$ $or$  $-1$</li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 -1 2</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line">-1 -1</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"></span><br><span class="line">200</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><ul><li>状态：$dp[i][j][k]$ : 表示在第 $i$ 为放 $j$ 时 [0 : &lt; ] , [1 : = ] , [2 : &gt; ]   a[i - 1] 的方案数。</li><li>初始化：见代码解释</li><li>转移：<ul><li>$dp[i][j][1]$ $=$  $dp[i - 1][j][0]$ $+$ $dp[i - 1][j][1]$ $+$ $dp[i - 1][j][2]$ 。表示第 $i$ 位放 $j$ 时的方案数等于 第 $i - 1$ 位放 $j$ 时大于，等于和小于左边的方案数之和。</li><li>$dp[i][j][0]$  是由第 $i - 1$ 位放 $1 -&gt; (j - 1)$ 大于，等于和小于左边的方案数之和。（转移时满足条件3）</li><li>$dp[i][j][2]$  是由第 $i - 1$ 位放 $(j + 1)  -&gt; 200$ 等于和小于左边的方案数之和。（转移时满足条件3）</li></ul></li></ul><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line">LL dp[maxn][<span class="number">205</span>][<span class="number">3</span>]; <span class="comment">// 表示在第i为放j时 [0 : &lt; ] , [1 : = ] , [2 : &gt; ]  左边的方案数。</span></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123; <span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">200</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">1</span>] == <span class="number">-1</span> || a[<span class="number">1</span>] == i) dp[<span class="number">1</span>][i][<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 可以看作加上 a[0] = -inf,a[n + 1] = -inf,所以这样初始化可以满足条件：一定要 a[2] &gt; a[1], a[n - 1] &gt; a[n] 。</span></span><br><span class="line"><span class="keyword">else</span> dp[<span class="number">1</span>][i][<span class="number">0</span>] = <span class="number">0</span>;                        <span class="comment">// 也就是不用管当前位是首位还是尾位了，只要满足 a[i] &lt;= max(a[i - 1],a[i + 1]) 就行。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">Init();</span><br><span class="line">LL sum;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">200</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] == <span class="number">-1</span> || a[i] == j) dp[i][j][<span class="number">1</span>] = (dp[i - <span class="number">1</span>][j][<span class="number">0</span>] + dp[i - <span class="number">1</span>][j][<span class="number">1</span>] + dp[i - <span class="number">1</span>][j][<span class="number">2</span>]) % mod;</span><br><span class="line"><span class="keyword">else</span> dp[i][j][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum = <span class="number">0L</span>L;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">200</span>;j++)&#123; <span class="comment">// 正着，求前缀和</span></span><br><span class="line"><span class="keyword">if</span>(a[i] == <span class="number">-1</span> || a[i] == j) dp[i][j][<span class="number">0</span>] = sum % mod;</span><br><span class="line"><span class="keyword">else</span> dp[i][j][<span class="number">0</span>] = <span class="number">0L</span>L;</span><br><span class="line">sum = (sum + dp[i - <span class="number">1</span>][j][<span class="number">1</span>] + dp[i - <span class="number">1</span>][j][<span class="number">0</span>] + dp[i - <span class="number">1</span>][j][<span class="number">2</span>]) % mod;</span><br><span class="line">&#125;</span><br><span class="line">sum = <span class="number">0L</span>L;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">200</span>;j &gt;= <span class="number">1</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] == <span class="number">-1</span> || a[i] == j) dp[i][j][<span class="number">2</span>] = sum % mod;</span><br><span class="line"><span class="keyword">else</span> dp[i][j][<span class="number">2</span>] = <span class="number">0L</span>L;</span><br><span class="line">sum = (sum + dp[i - <span class="number">1</span>][j][<span class="number">1</span>] + dp[i - <span class="number">1</span>][j][<span class="number">2</span>]) % mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">LL ans = <span class="number">0L</span>L;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">200</span>;i++)&#123;<span class="comment">// 倒着，求后缀和</span></span><br><span class="line"><span class="keyword">if</span>(a[n] == <span class="number">-1</span> || a[n] == i) ans = (ans + dp[n][i][<span class="number">1</span>] + dp[n][i][<span class="number">2</span>]) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/10/28/Codeforces-%20518%20-%20div2%20-%20D.Array%20Without%20Local%20Maximums(DP)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforces - gym - 101873 - G.Water Testing (几何，皮克定理)</title>
      <link>http://yoursite.com/2018/10/28/Codeforces%20-%20gym%20-%20101873%20-%20Problem%20G.Water%20Testing%20(%E5%87%A0%E4%BD%95%EF%BC%8C%E7%9A%AE%E5%85%8B%E5%AE%9A%E7%90%86)/</link>
      <guid>http://yoursite.com/2018/10/28/Codeforces%20-%20gym%20-%20101873%20-%20Problem%20G.Water%20Testing%20(%E5%87%A0%E4%BD%95%EF%BC%8C%E7%9A%AE%E5%85%8B%E5%AE%9A%E7%90%86)/</guid>
      <pubDate>Sun, 28 Oct 2018 01:50:51 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/118/6/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/118/6/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://codeforces.com/gym/101873/problem/G" target="_blank" rel="noopener">http://codeforces.com/gym/101873/problem/G</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>顺时针给你一些点，问由给你的点围起来的多边形内有多少个整数点？</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$3 &lt;= n &lt;= 100000$</li><li>$-1e6 &lt;= x_i,y_i &lt;= 1e6$</li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">0 0</span><br><span class="line">0 10</span><br><span class="line">10 10</span><br><span class="line">10 0</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">81</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>模板题</p><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max = <span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,s,n) for(ll i=s;i&lt;=n;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,n,s) for(ll i=n;i&gt;=s;i--)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">ll x,y;</span><br><span class="line">&#125;p[Max];</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b==<span class="number">0</span> ? a : gcd (b,a%b);</span><br><span class="line">&#125;<span class="comment">//皮克定理:多边形的面积 = 多边形内部整点的个数 + 边上正点的个数 / 2 - 1；</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">rep(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line">&#125;</span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">sum+=(p[(i+<span class="number">1</span>)%n].y)*(p[i].x-p[(i+<span class="number">2</span>)%n].x);</span><br><span class="line">&#125;<span class="comment">//这是在求多边形的面积；</span></span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">ans+=gcd(<span class="built_in">abs</span>(p[i].x-p[(i+<span class="number">1</span>)%n].x),<span class="built_in">abs</span>(p[i].y-p[(i+<span class="number">1</span>)%n].y));</span><br><span class="line">&#125;<span class="comment">//这是在求边界上面的点</span></span><br><span class="line">sum=<span class="built_in">abs</span>(sum);</span><br><span class="line">sum=(sum-ans)/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/10/28/Codeforces%20-%20gym%20-%20101873%20-%20Problem%20G.Water%20Testing%20(%E5%87%A0%E4%BD%95%EF%BC%8C%E7%9A%AE%E5%85%8B%E5%AE%9A%E7%90%86)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforces - gym - 101873 - F.Plug It In!(二分图匹配）</title>
      <link>http://yoursite.com/2018/10/25/Codeforces%20-%20gym%20-%20101873%20-%20F.Plug%20It%20In!(%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D%EF%BC%89/</link>
      <guid>http://yoursite.com/2018/10/25/Codeforces%20-%20gym%20-%20101873%20-%20F.Plug%20It%20In!(%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D%EF%BC%89/</guid>
      <pubDate>Thu, 25 Oct 2018 08:34:04 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/117/4/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/117/4/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="https://codeforces.com/gym/101873/problem/F" target="_blank" rel="noopener">https://codeforces.com/gym/101873/problem/F</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>  有 $m$ 个电源和 $n$ 个设备。给你 $k$ 对关系 （$x_i$ ，$y_i$ )，表示编号为 $x_i$ 的电源可以为编号为 $y_i$ 的设备供电，现在有一个 $3$ 孔的接线板，可以把一个电源分成 $3$ 个相同的电源。</p><p>问：最多可以有几个设备能通电？</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$1 &lt;= m,n &lt;= 1500$</li><li>$0 &lt;= k &lt;= 75000$</li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">3 6 8</span><br><span class="line">1 1</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 3</span><br><span class="line">2 4</span><br><span class="line">3 4</span><br><span class="line">3 5</span><br><span class="line">3 6</span><br><span class="line"></span><br><span class="line">4 5 11</span><br><span class="line">1 1</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 1</span><br><span class="line">2 2</span><br><span class="line">2 3</span><br><span class="line">3 1</span><br><span class="line">3 2</span><br><span class="line">3 3</span><br><span class="line">4 4</span><br><span class="line">4 5</span><br><span class="line"></span><br><span class="line">3 5 7</span><br><span class="line">1 1</span><br><span class="line">1 2</span><br><span class="line">2 2</span><br><span class="line">2 3</span><br><span class="line">2 4</span><br><span class="line">3 4</span><br><span class="line">3 5</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line"></span><br><span class="line">5</span><br><span class="line"></span><br><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><ul><li>一看到题目就应该想到是二分图的最大匹配，但这题多出了一个接线板，可以把一个电源分成三个相同的电源。二分图匹配的最坏复杂度为 O(E V)，而且匹配的过程是编号逐渐从 $1$ 到 $m$ （在这题) ，那么我们就可以先不考虑有接线板，直接匹配得到一个 $ans$ ，把不考虑接线板情况下每个设备接到哪个电源给记下来 $dev[i]$ 。</li></ul><ul><li>接着我们开始考虑有接线板的情况。在有接线板的情况下，最大配备数最多会加 $2$ ，那么我就枚举在哪个电源使用借接线板，在新编号 $m +1$ 的电源建跟电源 $i$ 有连线的点的边，和新编号 $m + 2$ 的的电源建跟电源 $i$ 有连线的点的边，继续匹配。看看最多能增加多少设备通电 $add$</li></ul><ul><li>最后的答案：$ans = ans + add$</li></ul><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1505</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="keyword">bool</span> used[maxn];</span><br><span class="line"><span class="keyword">int</span> dev[maxn];</span><br><span class="line"><span class="keyword">int</span> tmp[maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m,n,k,ans,add;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; G[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">int</span> y = G[x][i];</span><br><span class="line"><span class="keyword">if</span>(used[y] == <span class="number">0</span>)&#123;</span><br><span class="line">used[y] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(dev[y] == <span class="number">0</span> || Find(dev[y]))&#123;</span><br><span class="line">dev[y] = x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Match</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> all = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line"><span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line"><span class="keyword">if</span>(Find(i)) all++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;m,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x,&amp;y);</span><br><span class="line">G[x].push_back(y);</span><br><span class="line">vis[x]++;</span><br><span class="line">&#125;</span><br><span class="line">ans = Match();</span><br><span class="line">add = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) tmp[i] = dev[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i] &gt;= <span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; G[i].size();j++)&#123;</span><br><span class="line"><span class="keyword">int</span> y = G[i][j];</span><br><span class="line">G[m + <span class="number">1</span>].push_back(y);</span><br><span class="line">G[m + <span class="number">2</span>].push_back(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line"><span class="keyword">if</span>(Find(m + <span class="number">1</span>)) tot++;</span><br><span class="line"><span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line"><span class="keyword">if</span>(Find(m + <span class="number">2</span>)) tot++;</span><br><span class="line">add = max(add,tot);</span><br><span class="line">G[m + <span class="number">1</span>].clear();</span><br><span class="line">G[m + <span class="number">2</span>].clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) dev[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(add == <span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans + add);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/10/25/Codeforces%20-%20gym%20-%20101873%20-%20F.Plug%20It%20In!(%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D%EF%BC%89/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
