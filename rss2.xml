<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>天之界</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>踏一步便是虚无</description>
    <pubDate>Tue, 20 Nov 2018 08:19:46 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>分解质因数</title>
      <link>http://yoursite.com/2018/11/20/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/</link>
      <guid>http://yoursite.com/2018/11/20/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/</guid>
      <pubDate>Tue, 20 Nov 2018 08:14:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/70443/1540109889921/thumb_Sun_Oct_21_2018.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/70443/1540109889921/thumb_Sun_Oct_21_2018.jpg" alt="img"></p><a id="more"></a><h2 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h2><p><a href="http://www.cnblogs.com/jiangjing/archive/2013/06/01/3112035.html" target="_blank" rel="noopener">http://www.cnblogs.com/jiangjing/archive/2013/06/01/3112035.html</a></p><p><a href="http://www.cnblogs.com/jiangjing/archive/2013/06/03/3115399.html" target="_blank" rel="noopener">http://www.cnblogs.com/jiangjing/archive/2013/06/03/3115399.html</a></p><h2 id="求一个数的质因子-根号n"><a href="#求一个数的质因子-根号n" class="headerlink" title="求一个数的质因子(根号n):"></a>求一个数的质因子(根号n):</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   __int64 a[<span class="number">100</span>],num,i,n;</span><br><span class="line">   <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%I64d"</span>,&amp;n)!=EOF)</span><br><span class="line">   &#123;</span><br><span class="line">      num=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(i=<span class="number">2</span>;i*i&lt;=n;i++)</span><br><span class="line">      &#123; </span><br><span class="line">          <span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              a[num++]=i;</span><br><span class="line">              <span class="keyword">while</span>(n%i==<span class="number">0</span>)</span><br><span class="line">                 n=n/i;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(n&gt;<span class="number">1</span>)</span><br><span class="line">         a[num++]=n;</span><br><span class="line">      <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%I64d "</span>,a[i]);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求多个数的质因子"><a href="#求多个数的质因子" class="headerlink" title="求多个数的质因子:"></a>求多个数的质因子:</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> visited[<span class="number">100010</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;a[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">100010</span>;i++)</span><br><span class="line">       a[i].clear();<span class="comment">//vector的清空</span></span><br><span class="line">    <span class="built_in">memset</span>(visited,<span class="number">0</span>,<span class="keyword">sizeof</span>(visited));</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">100000</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(visited[i]==<span class="number">0</span>)<span class="comment">//i是素数这是可以保证的</span></span><br><span class="line">        &#123;</span><br><span class="line">            a[i].push_back(i);</span><br><span class="line">            <span class="keyword">for</span>(j=i+i;j&lt;=<span class="number">100000</span>;j+=i)<span class="comment">//筛选素数，其实这种方法没以前那种素数法快，但是这里用来求一个数的质因子就比较好了</span></span><br><span class="line">            &#123;</span><br><span class="line">                visited[j]=<span class="number">1</span>;</span><br><span class="line">                a[j].push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">50</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d:"</span>,i);</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;a[i].size();j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/11/20/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforces- 521 - div3 - F2. Pictures with Kittens (hard version)(单调队列优化 + DP)</title>
      <link>http://yoursite.com/2018/11/19/Codeforces-%20521%20-%20div3%20-%20F2.%20Pictures%20with%20Kittens%20(hard%20version)(%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96%20+%20DP)/</link>
      <guid>http://yoursite.com/2018/11/19/Codeforces-%20521%20-%20div3%20-%20F2.%20Pictures%20with%20Kittens%20(hard%20version)(%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96%20+%20DP)/</guid>
      <pubDate>Mon, 19 Nov 2018 15:40:52 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Codeforces-521-div3-F2-Pictures-with-Kittens-hard-version-单调队列优化-DP&quot;&gt;&lt;a href=&quot;#Codeforces-521-div3-F2-Pictures-with-Kittens-hard-version-单调队列优化-DP&quot; class=&quot;headerlink&quot; title=&quot;Codeforces- 521 - div3 - F2. Pictures with Kittens (hard version)(单调队列优化 + DP)&quot;&gt;&lt;/a&gt;Codeforces- 521 - div3 - F2. Pictures with Kittens (hard version)(单调队列优化 + DP)&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/136/5/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="Codeforces-521-div3-F2-Pictures-with-Kittens-hard-version-单调队列优化-DP"><a href="#Codeforces-521-div3-F2-Pictures-with-Kittens-hard-version-单调队列优化-DP" class="headerlink" title="Codeforces- 521 - div3 - F2. Pictures with Kittens (hard version)(单调队列优化 + DP)"></a>Codeforces- 521 - div3 - F2. Pictures with Kittens (hard version)(单调队列优化 + DP)</h1><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/136/5/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h2><p><a href="http://www.cnblogs.com/widsom/p/9972681.html" target="_blank" rel="noopener">http://www.cnblogs.com/widsom/p/9972681.html</a></p><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://codeforces.com/contest/1077/problem/F2" target="_blank" rel="noopener">http://codeforces.com/contest/1077/problem/F2</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>输入 $n$ $,$ $k$ $,$ $x$ $,$ 在 $n$ 个数里挑选 $x$ 个数，使得任意连续长度为 $k$ 的子序列中至少有一个数是被挑选的数，问挑选数之和最大是多少？如果不能满足条件输出 $-1$ 。</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$1 &lt;= n,k,x &lt;= 5000$</li><li>$ 1&lt;=a_i&lt;= 1e9$</li></ul><p>​    </p><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">5 2 3</span><br><span class="line">5 1 3 10 1</span><br><span class="line"></span><br><span class="line">6 1 5</span><br><span class="line">10 30 30 70 10 10</span><br><span class="line"></span><br><span class="line">4 3 1</span><br><span class="line">1 100 1 1</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">18</span><br><span class="line"></span><br><span class="line">-1</span><br><span class="line"></span><br><span class="line">100</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>单调队列 $dp[i]:$ 挑选 $i$ 个数时，在满足条件下，答案( $second$ ) 和 对应的位置 ( $first$ )</p><h2 id="AC-代码："><a href="#AC-代码：" class="headerlink" title="AC 代码："></a>AC 代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL INF = <span class="number">1L</span>L &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e3</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn], tmp[maxn];</span><br><span class="line"><span class="built_in">deque</span>&lt; pair&lt;<span class="keyword">int</span>,LL&gt; &gt; dp[maxn];</span><br><span class="line"><span class="keyword">int</span> n,k,x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;n,&amp;k,&amp;x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">dp[<span class="number">0</span>].push_back(make_pair(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= x;j++)&#123;</span><br><span class="line"><span class="keyword">while</span>(!dp[j - <span class="number">1</span>].empty() &amp;&amp; dp[j - <span class="number">1</span>].front().first &lt; i - k) dp[j - <span class="number">1</span>].pop_front(); <span class="comment">// &lt; i - k 的都不能转移到 j </span></span><br><span class="line"><span class="keyword">if</span>(!dp[j - <span class="number">1</span>].empty()) tmp[j] = dp[j - <span class="number">1</span>].front().second + a[i]; <span class="comment">// 这里是选，不选的话保持不变就行，无须转移。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= x;j++)&#123;</span><br><span class="line"><span class="keyword">while</span>(!dp[j].empty() &amp;&amp; tmp[j] &gt;= dp[j].back().second) dp[j].pop_back();</span><br><span class="line"><span class="keyword">if</span>(tmp[j]) dp[j].push_back(make_pair(i,tmp[j]));</span><br><span class="line">tmp[j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">LL ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(!dp[x].empty() &amp;&amp; dp[x].front().first &lt;= n - k) dp[x].pop_front();</span><br><span class="line"><span class="keyword">if</span>(!dp[x].empty()) ans = dp[x].front().second;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/11/19/Codeforces-%20521%20-%20div3%20-%20F2.%20Pictures%20with%20Kittens%20(hard%20version)(%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96%20+%20DP)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>莫队算法模板</title>
      <link>http://yoursite.com/2018/11/17/%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</link>
      <guid>http://yoursite.com/2018/11/17/%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</guid>
      <pubDate>Sat, 17 Nov 2018 13:53:07 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/121/4/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/121/4/thumb.jpg" alt="img"></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 复杂度：O( n^(1.5) )</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos[maxn];</span><br><span class="line"><span class="keyword">int</span> L,R;</span><br><span class="line">LL ans[maxn],Ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span>&#123;</span></span><br><span class="line">    LL l,r;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125;Q[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(NODE x, NODE y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos[x.l] == pos[y.l]) <span class="keyword">return</span> x.r &lt; y.r;</span><br><span class="line">    <span class="keyword">return</span> pos[x.l] &lt; pos[y.l];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;Q[i].l,&amp;Q[i].r); <span class="comment">// 离线询问</span></span><br><span class="line">        Q[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> siz = <span class="built_in">sqrt</span>(<span class="number">100000</span>); <span class="comment">// 分块</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">100000</span>;i++) pos[i] = i / siz;</span><br><span class="line">    sort(Q + <span class="number">1</span>,Q + <span class="number">1</span> + n,cmp);</span><br><span class="line"></span><br><span class="line">    L = <span class="number">0</span>, R = <span class="number">0</span>, Ans = <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(L &lt; Q[i].l)&#123;</span><br><span class="line">        <span class="comment">/* 进行操作 */</span></span><br><span class="line">            L++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(L &gt; Q[i].l)&#123;</span><br><span class="line">            L--;</span><br><span class="line">        <span class="comment">/* 进行操作 */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(R &lt; Q[i].r)&#123;</span><br><span class="line">            R++;</span><br><span class="line">        <span class="comment">/* 进行操作 */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(R &gt; Q[i].r)&#123;</span><br><span class="line">        <span class="comment">/* 进行操作 */</span></span><br><span class="line">            R--;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[Q[i].id] = Ans; <span class="comment">// 记录答案</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]); <span class="comment">// 输出答案</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/11/17/%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/#disqus_thread</comments>
    </item>
    
    <item>
      <title>求组合数(O(n))</title>
      <link>http://yoursite.com/2018/11/17/%E6%B1%82%E7%BB%84%E5%90%88%E6%95%B0(O(n))/</link>
      <guid>http://yoursite.com/2018/11/17/%E6%B1%82%E7%BB%84%E5%90%88%E6%95%B0(O(n))/</guid>
      <pubDate>Sat, 17 Nov 2018 13:23:10 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/121/3/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/121/3/thumb.jpg" alt="img"></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">LL inv[maxn],fac[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123; <span class="comment">// O(n)  预处理, O(1) 访问</span></span><br><span class="line">    fac[<span class="number">1</span>] = fac[<span class="number">0</span>] = <span class="number">1L</span>L;</span><br><span class="line">    inv[<span class="number">1</span>] = inv[<span class="number">0</span>] = <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; maxn - <span class="number">1</span>;i++)&#123;</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">        inv[i] = (mod - mod / i) * inv[mod % i] % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; maxn - <span class="number">1</span>;i++)&#123;</span><br><span class="line">        inv[i] = inv[i - <span class="number">1</span>] * inv[i] % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">C</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y &gt; x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fac[x] * inv[y] % mod * inv[x - y] % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Init();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,C(<span class="number">6</span>,<span class="number">2</span>));   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/11/17/%E6%B1%82%E7%BB%84%E5%90%88%E6%95%B0(O(n))/#disqus_thread</comments>
    </item>
    
    <item>
      <title>后缀数组模板(O(n))</title>
      <link>http://yoursite.com/2018/11/17/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E6%A8%A1%E6%9D%BF(O(n))/</link>
      <guid>http://yoursite.com/2018/11/17/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E6%A8%A1%E6%9D%BF(O(n))/</guid>
      <pubDate>Sat, 17 Nov 2018 12:51:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/121/2/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/121/2/thumb.jpg" alt="img"></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> y[maxn],x[maxn],c[maxn],sa[maxn],rk[maxn],height[maxn],wt[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> len,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_SA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= len;i++) ++c[x[i] = s[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= m;i++) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = len;i &gt;= <span class="number">1</span>;i--) sa[c[x[i]]--] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= len;k &lt;&lt;= <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = len - k + <span class="number">1</span>;i &lt;= len;++i) y[++num] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= len;i++) <span class="keyword">if</span> (sa[i] &gt; k) y[++num] = sa[i] - k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++) c[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= len;i++) ++c[x[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= m;i++) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = len;i &gt;= <span class="number">1</span>;i--) sa[c[x[y[i]]]--] = y[i], y[i] = <span class="number">0</span>;</span><br><span class="line">swap(x,y);</span><br><span class="line">x[sa[<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= len;i++)</span><br><span class="line">x[sa[i]] = (y[sa[i]] == y[sa[i - <span class="number">1</span>]] &amp;&amp; y[sa[i] + k] == y[sa[i - <span class="number">1</span>] + k]) ? num : ++num;</span><br><span class="line"><span class="keyword">if</span>(num == len) <span class="keyword">break</span>;</span><br><span class="line">m = num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_height</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= len;i++) rk[sa[i]] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(rk[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(k) --k;</span><br><span class="line"><span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(j + k &lt;= len &amp;&amp; i + k &lt;= len &amp;&amp; s[i + k] == s[j + k]) ++k;</span><br><span class="line">height[rk[i]] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s + <span class="number">1</span>);</span><br><span class="line">len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">m = <span class="number">122</span>;</span><br><span class="line">get_SA();</span><br><span class="line">get_height();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= len;i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,sa[i]); <span class="comment">// sa[i] : 以第 i 位开始后缀按字典序从小到大排序后，排在第 sa[i] 个。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= len;i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,height[i]); <span class="comment">// height[i] : 排在第 i 个的后缀 与 排在第 i + 1 个的后缀的最长公共前缀。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">① ② ③ ④ ⑤</span></span><br><span class="line"><span class="comment">a b a b a</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sa:     5 3 1 4 2    </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">height: 0 1 3 0 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sa            height</span></span><br><span class="line"><span class="comment">              0</span></span><br><span class="line"><span class="comment">⑤ : a</span></span><br><span class="line"><span class="comment">              1</span></span><br><span class="line"><span class="comment">③ : aba</span></span><br><span class="line"><span class="comment">              3</span></span><br><span class="line"><span class="comment">① : ababa</span></span><br><span class="line"><span class="comment">              0</span></span><br><span class="line"><span class="comment">④ : ba</span></span><br><span class="line"><span class="comment">              2</span></span><br><span class="line"><span class="comment">② : baba</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">/</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/11/17/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E6%A8%A1%E6%9D%BF(O(n))/#disqus_thread</comments>
    </item>
    
    <item>
      <title>BZOJ-1036-树的统计Count(树链剖分+线段树模板题)</title>
      <link>http://yoursite.com/2018/11/15/BZOJ-1036-%E6%A0%91%E7%9A%84%E7%BB%9F%E8%AE%A1Count(%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86+%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF%E9%A2%98)/</link>
      <guid>http://yoursite.com/2018/11/15/BZOJ-1036-%E6%A0%91%E7%9A%84%E7%BB%9F%E8%AE%A1Count(%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86+%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF%E9%A2%98)/</guid>
      <pubDate>Thu, 15 Nov 2018 15:32:40 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/39355/1541250861074/thumb_Sat_Nov_03_2018.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/39355/1541250861074/thumb_Sat_Nov_03_2018.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1036" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=1036</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>一棵树上有 $n$ 个节点，编号分别为 $1$ 到 $n$ ，每个节点都有一个权值 $w$ 。我们将以下面的形式来要求你对这棵树完成一些操作： </p><ul><li><p>$CHANGE$ $u$ $t$ : 把结点 $u$ 的权值改为 $t$ </p></li><li><p>$QMAX$ $u$ $v$ : 询问从点 $u$ 到点 $v$ 的路径上的节点的最大权值 </p></li><li><p>$QSUM$ $u$ $v$ : 询问从点 $u$ 到点 $v$ 的路径上的节点的权值和 </p><p>注意：从点 $u$ 到点 $v$ 的路径上的节点包括 $u$ 和 $v$ 本身</p></li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">4 1</span><br><span class="line">4 2 1 3</span><br><span class="line">12</span><br><span class="line">QMAX 3 4</span><br><span class="line">QMAX 3 3</span><br><span class="line">QMAX 3 2</span><br><span class="line">QMAX 2 3</span><br><span class="line">QSUM 3 4</span><br><span class="line">QSUM 2 1</span><br><span class="line">CHANGE 1 5</span><br><span class="line">QMAX 3 4</span><br><span class="line">CHANGE 3 6</span><br><span class="line">QMAX 3 4</span><br><span class="line">QMAX 2 4</span><br><span class="line">QSUM 3 4</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">10</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">16</span><br></pre></td></tr></table></figure><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,mid,rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid + 1,r,rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1000000000</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> son[maxn],deep[maxn],siz[maxn],f[maxn];</span><br><span class="line"><span class="keyword">int</span> pre[<span class="number">2</span> * maxn],other[<span class="number">2</span> * maxn],last[maxn];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> n,q,num;</span><br><span class="line"><span class="keyword">int</span> all = <span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> SUM[maxn * <span class="number">4</span>],MAX[maxn * <span class="number">4</span>];</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> w,id,top;</span><br><span class="line">&#125;node[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    pre[++all] = last[x];</span><br><span class="line">    last[x] = all;</span><br><span class="line">    other[all] = y;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushUP</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    MAX[rt] = max(MAX[rt &lt;&lt; <span class="number">1</span>],MAX[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">    SUM[rt] = SUM[rt &lt;&lt; <span class="number">1</span>] + SUM[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> change,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123; <span class="comment">// p：要更新的节点编号。 change：要改变的值。 [l,r]：整个大区间。 rt：当前节点。</span></span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        MAX[rt] = change;</span><br><span class="line">        SUM[rt] = change; <span class="comment">// 如果要加值，就 "+=" </span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(p &lt;= mid) update(p,change,lson);</span><br><span class="line">    <span class="keyword">else</span> update(p,change,rson);</span><br><span class="line">    PushUP(rt);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> op,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123; <span class="comment">// [L,R]：询问的区间。 [l,r]：整个大区间。 rt：当前节点。</span></span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) <span class="keyword">return</span> MAX[rt];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>) <span class="keyword">return</span> SUM[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">if</span>(op == <span class="number">1</span>) ret = -inf;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>) ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)&#123;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) ret = max(ret,query(op,L,R,lson));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>) ret += query(op,L,R,lson);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(R &gt; mid)&#123;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) ret = max(ret,query(op,L,R,rson));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>) ret += query(op,L,R,rson);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(last,<span class="number">-1</span>,<span class="keyword">sizeof</span>(last));</span><br><span class="line">    num = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    siz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> dt = last[u];</span><br><span class="line">    <span class="keyword">while</span>(dt !=- <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = other[dt];</span><br><span class="line">        <span class="keyword">if</span>(v != f[u])&#123;</span><br><span class="line">            deep[v] = deep[u] + <span class="number">1</span>;</span><br><span class="line">            f[v] = u;</span><br><span class="line">            Dfs1(v);</span><br><span class="line">            siz[u] += siz[v];</span><br><span class="line">            <span class="keyword">if</span>(siz[v] &gt; tmp)&#123;</span><br><span class="line">                son[u] = v;</span><br><span class="line">                tmp = siz[v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dt = pre[dt];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa,<span class="keyword">int</span> top)</span></span>&#123;</span><br><span class="line">    num++;</span><br><span class="line">    node[u].id = num;</span><br><span class="line">    node[u].top = top;</span><br><span class="line">    <span class="keyword">if</span>(!son[u]) <span class="keyword">return</span>;</span><br><span class="line">    Dfs2(son[u],u,top);</span><br><span class="line">    <span class="keyword">int</span> dt = last[u];</span><br><span class="line">    <span class="keyword">while</span>(dt != <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = other[dt];</span><br><span class="line">        <span class="keyword">if</span>(v != fa &amp;&amp; v != son[u])&#123;</span><br><span class="line">            Dfs2(v,u,v);</span><br><span class="line">        &#125;</span><br><span class="line">        dt = pre[dt];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> op)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="keyword">if</span>(op == <span class="number">1</span>) ans = -inf;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>) ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(node[u].top != node[v].top)&#123;</span><br><span class="line">        <span class="keyword">if</span>(deep[node[u].top] &lt; deep[node[v].top]) swap(u,v);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) ans = max(ans,query(<span class="number">1</span>,node[node[u].top].id,node[u].id,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>) ans += query(<span class="number">2</span>,node[node[u].top].id,node[u].id,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        u = f[node[u].top];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node[u].id &gt; node[v].id) swap(u,v);</span><br><span class="line">    <span class="keyword">if</span>(op == <span class="number">1</span>) ans = max(ans,query(<span class="number">1</span>,node[u].id,node[v].id,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>) ans += query(<span class="number">2</span>,node[u].id,node[v].id,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    Init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</span><br><span class="line">        Build(u,v);</span><br><span class="line">        Build(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;node[i].w);</span><br><span class="line">    Dfs1(<span class="number">1</span>);</span><br><span class="line">    Dfs2(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        update(node[i].id,node[i].w,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= q;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u,v,t;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">3</span>] == <span class="string">'X'</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Get(u,v,<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">3</span>] == <span class="string">'M'</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Get(u,v,<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">3</span>] == <span class="string">'N'</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;t);</span><br><span class="line">            update(node[u].id,t,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/11/15/BZOJ-1036-%E6%A0%91%E7%9A%84%E7%BB%9F%E8%AE%A1Count(%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86+%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF%E9%A2%98)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>树链剖分模板</title>
      <link>http://yoursite.com/2018/11/15/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%E6%A8%A1%E6%9D%BF/</link>
      <guid>http://yoursite.com/2018/11/15/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%E6%A8%A1%E6%9D%BF/</guid>
      <pubDate>Thu, 15 Nov 2018 04:45:27 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/278098/1541476016168/thumb_Tue_Nov_06_2018.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/278098/1541476016168/thumb_Tue_Nov_06_2018.jpg" alt="img"></p><a id="more"></a><h2 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h2><p><a href="https://www.cnblogs.com/ivanovcraft/p/9019090.html" target="_blank" rel="noopener">https://www.cnblogs.com/ivanovcraft/p/9019090.html</a></p><h2 id="详情："><a href="#详情：" class="headerlink" title="详情："></a>详情：</h2><p>树剖是通过轻重边剖分将树分割成多条链，然后利用数据结构来维护这些链（本质上是一种优化暴力）</p><p>首先明确概念：</p><p>重儿子：父亲节点的所有儿子中子树结点数目最多（size最大）的结点；</p><p>轻儿子：父亲节点中除了重儿子以外的儿子；</p><p>重边：父亲结点和重儿子连成的边；</p><p>轻边：父亲节点和轻儿子连成的边；</p><p>重链：由多条重边连接而成的路径；</p><p>轻链：由多条轻边连接而成的路径；</p><p><img src="https://images2018.cnblogs.com/blog/1397737/201805/1397737-20180510123640544-303874904.png" alt="img"></p><p>比如上面这幅图中，用黑线连接的结点都是重结点，其余均是轻结点，</p><p>2-11就是重链，2-5就是轻链，用红点标记的就是该结点所在重链的起点，也就是下文提到的top结点，</p><p>还有每条边的值其实是进行dfs时的执行序号。</p><p><img src="https://images2018.cnblogs.com/blog/1397737/201805/1397737-20180510124617970-666005311.png" alt="img"></p><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>f[u]</td><td>保存结点u的父亲节点</td></tr><tr><td>d[u]</td><td>保存结点u的深度值</td></tr><tr><td>size[u]</td><td>保存以u为根的子树节点个数</td></tr><tr><td>son[u]</td><td>保存重儿子</td></tr><tr><td>rk[u]</td><td>保存当前dfs标号在树中所对应的节点</td></tr><tr><td>top[u]</td><td>保存当前节点所在链的顶端节点</td></tr><tr><td>id[u]</td><td>保存树中每个节点剖分以后的新编号（DFS的执行顺序）</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>变量声明：</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next,to;</span><br><span class="line">&#125;e[<span class="number">2</span>*maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> sum,lazy,l,r,ls,rs;</span><br><span class="line">&#125;node[<span class="number">2</span>*maxn];</span><br><span class="line"><span class="keyword">int</span> rt,n,m,r,a[maxn],cnt,head[maxn],f[maxn],d[maxn],size[maxn],son[maxn],rk[maxn],top[maxn],id[maxn];</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>在dfs过程中顺便记录其父亲以及深度（即处理出f,d数组），操作<span class="number">1</span>,<span class="number">2</span>可以通过一遍dfs完成</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa,<span class="keyword">int</span> depth)</span>    <span class="comment">//当前节点、父节点、层次深度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[u]=fa;</span><br><span class="line">    d[u]=depth;</span><br><span class="line">    size[u]=<span class="number">1</span>;    <span class="comment">//这个点本身size=1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v==fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs1(v,u,depth+<span class="number">1</span>);    <span class="comment">//层次深度+1</span></span><br><span class="line">        size[u]+=size[v];    <span class="comment">//子节点的size已被处理，用它来更新父节点的size</span></span><br><span class="line">        <span class="keyword">if</span>(size[v]&gt;size[son[u]])</span><br><span class="line">            son[u]=v;    <span class="comment">//选取size最大的作为重儿子</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进入</span></span><br><span class="line">dfs1(root,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>第二遍dfs，然后连接重链，同时标记每一个节点的dfs序，并且为了用数据结构来维护重链，我们在dfs时保证一条重链上各个节点dfs序连续（即处理出数组top,id,rk）</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> t)</span>    <span class="comment">//当前节点、重链顶端</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top[u]=t;</span><br><span class="line">    id[u]=++cnt;    <span class="comment">//标记dfs序</span></span><br><span class="line">    rk[cnt]=u;    <span class="comment">//序号cnt对应节点u</span></span><br><span class="line">    <span class="keyword">if</span>(!son[u])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    dfs2(son[u],t);</span><br><span class="line"><span class="comment">/*我们选择优先进入重儿子来保证一条重链上各个节点dfs序连续，</span></span><br><span class="line"><span class="comment">一个点和它的重儿子处于同一条重链，所以重儿子所在重链的顶端还是t*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v!=son[u]&amp;&amp;v!=f[u])</span><br><span class="line">            dfs2(v,v);    <span class="comment">//一个点位于轻链底端，那么它的top必然是它本身</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>两遍dfs就是树链剖分的主要处理，通过dfs我们已经保证一条重链上各个节点dfs序连续，那么可以想到，我们可以通过数据结构（以线段树为例）来维护一条重链的信息</span><br><span class="line">回顾上文的那个题目，修改和查询操作原理是类似的，以查询操作为例，其实就是个LCA，不过这里使用了top来进行加速，因为top可以直接跳转到该重链的起始结点，轻链没有起始结点之说，他们的top就是自己。需要注意的是，每次循环只能跳一次，并且让结点深的那个来跳到top的位置，避免两个一起跳从而插肩而过。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,fx=top[x],fy=top[y];</span><br><span class="line">    <span class="keyword">while</span>(fx!=fy)    <span class="comment">//两点不在同一条重链</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(d[fx]&gt;=d[fy])</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=query(id[fx],id[x],rt);    <span class="comment">//线段树区间求和，处理这条重链的贡献</span></span><br><span class="line">            x=f[fx],fx=top[x];    <span class="comment">//将x设置成原链头的父亲结点，走轻边，继续循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans+=query(id[fy],id[y],rt);</span><br><span class="line">            y=f[fy],fy=top[y];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//循环结束，两点位于同一重链上，但两点不一定为同一点，所以我们还要统计这两点之间的贡献</span></span><br><span class="line">    <span class="keyword">if</span>(id[x]&lt;=id[y])</span><br><span class="line">        ans+=query(id[x],id[y],rt);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans+=query(id[y],id[x],rt);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>，树链剖分的时间复杂度</span><br><span class="line">树链剖分的两个性质：</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>)如果(u, v)是一条轻边，那么size(v) &lt; size(u)/<span class="number">2</span>；</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)从根结点到任意结点的路所经过的轻重链的个数必定都小于logn；</span><br><span class="line"></span><br><span class="line">可以证明，树链剖分的时间复杂度为O(nlog^<span class="number">2</span>n)</span><br><span class="line"></span><br><span class="line">性质 <span class="number">1</span>:轻边(U,V)，size(V)&lt;=size(U)/<span class="number">2</span>。</span><br><span class="line"></span><br><span class="line">性质 <span class="number">2</span>:从根到某一点的路径上，不超过O(logN)条轻边，不超过O(logN)条重路径。</span><br><span class="line"></span><br><span class="line">对于性质<span class="number">1</span>，我们肉眼观察法和反证法都能解决。</span><br><span class="line"></span><br><span class="line">对于性质<span class="number">2</span>就不是那么明显了，我们来证明一下：</span><br><span class="line"></span><br><span class="line">由性质<span class="number">1</span>可知，每经过一条轻边，子树的节点个数至少减少一半，所以至多经过 O (<span class="built_in">log</span> n ) 条轻边。</span><br><span class="line"></span><br><span class="line">而进入（或从……出去）一条重路径，一定需要经过一条轻边，所以至多经过 O (<span class="built_in">log</span> n ) 条重路径。</span><br><span class="line"></span><br><span class="line">有了以上两个性质之后，我们就可以发现这种分法的优越性了，我们仅仅只需要搜大概logn级别即可。</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/11/15/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%E6%A8%A1%E6%9D%BF/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforces - gym - 101611 - C.Carpet(树链剖分)</title>
      <link>http://yoursite.com/2018/11/15/Codeforces%20-%20gym%20-%20101611%20-%20C.Carpet(%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86)/</link>
      <guid>http://yoursite.com/2018/11/15/Codeforces%20-%20gym%20-%20101611%20-%20C.Carpet(%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86)/</guid>
      <pubDate>Thu, 15 Nov 2018 04:32:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/278723/1541564729801/thumb_Wed_Nov_07_2018.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/278723/1541564729801/thumb_Wed_Nov_07_2018.jpg" alt="img"></p><a id="more"></a><p>##题目链接： </p><p><a href="http://codeforces.com/gym/101611/problem/C" target="_blank" rel="noopener">http://codeforces.com/gym/101611/problem/C</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>给你一个 $n$ 个点的数，叫你放在一个 $1000000 * 20$ 的矩阵里，每个格子放一个点，还要保证边不能相交，输出每个点放的位置。</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$1 &lt;= n &lt;= 100000$</li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">4 9</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 3</span><br><span class="line">2 4</span><br><span class="line">3 2</span><br><span class="line">3 4</span><br><span class="line">4 1</span><br><span class="line">4 2</span><br><span class="line">4 3</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 3</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>看到树，和  $20$ ，第一反应就应该想到树链剖分，因为树链剖分有一个性质：一个点到另一个点的过程中，经过的轻边不超过 $lg(n)$ ，经过的重链不超过 $lg(n)$。</p><p>剖分完后，就应该要考虑怎么放使得边不相交了。因为轻边的要放在下一层的，所以在 $dfs$ 时，先遍历轻边，把对应的点先放到下一层，然后在遍历重链。如果先放重链的话，就边会有交叉，因为 $dfs$ 时，重链上的轻边会放在，之前轻边的前面，导致边交叉。</p><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> pre[<span class="number">2</span> * maxn],other[<span class="number">2</span> * maxn],last[maxn];</span><br><span class="line"><span class="keyword">int</span> all = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> siz[maxn],pos[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> son[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125;node[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">pre[++all] = last[x];</span><br><span class="line">last[x] = all;</span><br><span class="line">other[all] = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(last,<span class="number">-1</span>,<span class="keyword">sizeof</span>(last)); all = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">memset</span>(node,<span class="number">0</span>,<span class="keyword">sizeof</span>(node));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) siz[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) son[i] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(pos,<span class="number">0</span>,<span class="keyword">sizeof</span>(pos));</span><br><span class="line">pos[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ma = <span class="number">0</span>,tmp = x;</span><br><span class="line"><span class="keyword">int</span> dt = last[x];</span><br><span class="line"><span class="keyword">while</span>(dt != <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> dr = other[dt];</span><br><span class="line"><span class="keyword">if</span>(dr != fa)&#123;</span><br><span class="line">dfs1(dr,x);</span><br><span class="line">siz[x] += siz[dr];</span><br><span class="line"><span class="keyword">if</span>(siz[dr] &gt; ma)&#123;</span><br><span class="line">ma = siz[dr];</span><br><span class="line">son[x] = dr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dt = pre[dt];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> dt = last[x];</span><br><span class="line"><span class="keyword">while</span>(dt !=- <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> dr = other[dt];</span><br><span class="line"><span class="keyword">if</span>(dr != fa)&#123;</span><br><span class="line"><span class="keyword">if</span>(dr != son[x])&#123;</span><br><span class="line"><span class="keyword">int</span> deep = node[x].y;</span><br><span class="line">node[dr].y = deep + <span class="number">1</span>;</span><br><span class="line">node[dr].x = pos[deep + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">pos[deep + <span class="number">1</span>]++;</span><br><span class="line">dfs2(dr,x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dt = pre[dt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!son[x]) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> dr = son[x];</span><br><span class="line"><span class="keyword">int</span> deep = node[x].y;</span><br><span class="line">node[dr].y = deep;</span><br><span class="line">node[dr].x = pos[deep] + <span class="number">1</span>;</span><br><span class="line">pos[deep]++;</span><br><span class="line">dfs2(dr,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">Init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x,&amp;y);</span><br><span class="line">Build(x,y);</span><br><span class="line">Build(y,x);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">node[<span class="number">1</span>].x = <span class="number">1</span>,node[<span class="number">1</span>].y = <span class="number">1</span>;</span><br><span class="line">dfs2(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,node[i].x,node[i].y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/11/15/Codeforces%20-%20gym%20-%20101611%20-%20C.Carpet(%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>RMQ模板</title>
      <link>http://yoursite.com/2018/11/14/RMQ%E6%A8%A1%E6%9D%BF/</link>
      <guid>http://yoursite.com/2018/11/14/RMQ%E6%A8%A1%E6%9D%BF/</guid>
      <pubDate>Wed, 14 Nov 2018 13:45:25 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/9272/1541463438334/thumb_Mon_Nov_05_2018.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/9272/1541463438334/thumb_Mon_Nov_05_2018.jpg" alt="img"></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> MAX[maxn][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> MIN[maxn][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">double</span> LOG[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RMQ</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">19</span>; j++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n) &#123;</span><br><span class="line">MAX[i][j] = max(MAX[i][j - <span class="number">1</span>], MAX[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">MIN[i][j] = min(MIN[i][j - <span class="number">1</span>], MIN[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxn + <span class="number">2</span>; i++) LOG[i] = <span class="built_in">log</span>(<span class="number">1.0</span> * i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Init();</span><br><span class="line"><span class="keyword">int</span> n,q;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">MAX[i][<span class="number">0</span>] = x;</span><br><span class="line">MIN[i][<span class="number">0</span>] = x;</span><br><span class="line">&#125;</span><br><span class="line">RMQ(n);</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;l,&amp;r);</span><br><span class="line"><span class="keyword">int</span> k = (<span class="keyword">int</span>)(LOG[r - l + <span class="number">1</span>] / LOG[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">int</span> minnum = min(MIN[l][k], MIN[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line"><span class="keyword">int</span> maxnum = max(MAX[l][k], MAX[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"minnum = %d, maxnum = %d\n"</span>,minnum,maxnum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/11/14/RMQ%E6%A8%A1%E6%9D%BF/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforces - gym - 101505 - F.Tree Stands(树形DP计数)</title>
      <link>http://yoursite.com/2018/11/14/Codeforces%20-%20gym%20-%20101505%20-%20F.Tree%20Stands(%E6%A0%91%E5%BD%A2DP%E8%AE%A1%E6%95%B0)/</link>
      <guid>http://yoursite.com/2018/11/14/Codeforces%20-%20gym%20-%20101505%20-%20F.Tree%20Stands(%E6%A0%91%E5%BD%A2DP%E8%AE%A1%E6%95%B0)/</guid>
      <pubDate>Wed, 14 Nov 2018 13:45:10 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/9272/1541463710548/thumb_Mon_Nov_05_2018.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/9272/1541463710548/thumb_Mon_Nov_05_2018.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://codeforces.com/gym/101505/attachments" target="_blank" rel="noopener">http://codeforces.com/gym/101505/attachments</a></p><h2 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h2><p><a href="https://blog.csdn.net/qq_36398723/article/details/77200526" target="_blank" rel="noopener">https://blog.csdn.net/qq_36398723/article/details/77200526</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><ul><li>给定一棵树，求问猎人在树上站法的合法方案，树有 $n$ 个结点，$m$ 个猎人</li><li>每一个合法的站点至少有一个与其连通的节点上有人站 </li><li>一棵树最多站一个人</li><li>人之间不做区分</li></ul><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$2&lt;=m &lt;= n &lt;= 200$</li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">4 3</span><br><span class="line">1 2</span><br><span class="line">1 4</span><br><span class="line">1 3</span><br><span class="line"></span><br><span class="line">5 4</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line"></span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>见代码</p><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;</span><br><span class="line"></span><br><span class="line">LL dp[maxn][maxn][<span class="number">3</span>];</span><br><span class="line">LL tmp[maxn][maxn][<span class="number">3</span>];</span><br><span class="line"><span class="comment">//dp[i][j][k]数组代表以i为根的树上站了j个人且树根i的状态为k的方案数</span></span><br><span class="line"><span class="comment">//tmp[i][j][k]用于计算dp数组的辅助数组，对每一个根节点，代表前i个子树分配了j个人，且状态和为k的方案</span></span><br><span class="line"><span class="comment">//这里指的状态和是指全部子树合在一起的状态，而且在搜索中"此时"根节点u不站人</span></span><br><span class="line"><span class="comment">//状态和解释：no_stand状态是指正在搜索的结点的前i个子树的根节点都不站人</span></span><br><span class="line"><span class="comment">//            safe状态是指正在搜索的结点的前i个子树没有不安全的结点，而且至少有一个处于safe状态的子节点</span></span><br><span class="line"><span class="comment">//            Notsafe状态是指......至少有一个处于Notsafe的结点</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//关于三种状态:</span></span><br><span class="line"><span class="comment">//0:代表树根上不站人的合法状态</span></span><br><span class="line"><span class="comment">//1:代表树根上站了的人的安全状态</span></span><br><span class="line"><span class="comment">//2:代表树根上站了人的不安全状态,但是它的所有子树都安全(这里指子树的根节点都处于no_stand状态),这个状态可以通过在该节点的父亲上放个人来变为合法状态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="keyword">sizeof</span>(tmp));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; G[u].size();i++)&#123;</span><br><span class="line"><span class="keyword">int</span> v = G[u][i];</span><br><span class="line"><span class="keyword">if</span>(v != fa)&#123;</span><br><span class="line">dfs(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> siz = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="keyword">sizeof</span>(tmp));</span><br><span class="line">tmp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1L</span>L;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> pos = <span class="number">1</span>;pos &lt;= G[u].size();pos++)&#123;</span><br><span class="line"><span class="keyword">int</span> v = G[u][pos - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</span><br><span class="line">siz++;</span><br><span class="line"><span class="keyword">int</span> i = siz;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt;= k;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">0</span>;p &lt;= j;p++)&#123;</span><br><span class="line">tmp[i][j][<span class="number">0</span>] = (tmp[i][j][<span class="number">0</span>] + (tmp[i - <span class="number">1</span>][p][<span class="number">0</span>] * dp[v][j - p][<span class="number">0</span>]) % mod) % mod;</span><br><span class="line"></span><br><span class="line">tmp[i][j][<span class="number">1</span>] = (tmp[i][j][<span class="number">1</span>] + (tmp[i - <span class="number">1</span>][p][<span class="number">1</span>] * dp[v][j - p][<span class="number">0</span>]) % mod) % mod;</span><br><span class="line">tmp[i][j][<span class="number">1</span>] = (tmp[i][j][<span class="number">1</span>] + (tmp[i - <span class="number">1</span>][p][<span class="number">1</span>] * dp[v][j - p][<span class="number">1</span>]) % mod) % mod;</span><br><span class="line">tmp[i][j][<span class="number">1</span>] = (tmp[i][j][<span class="number">1</span>] + (tmp[i - <span class="number">1</span>][p][<span class="number">0</span>] * dp[v][j - p][<span class="number">1</span>]) % mod) % mod;</span><br><span class="line"></span><br><span class="line">tmp[i][j][<span class="number">2</span>] = (tmp[i][j][<span class="number">2</span>] + (tmp[i - <span class="number">1</span>][p][<span class="number">0</span>] * dp[v][j - p][<span class="number">2</span>]) % mod) % mod;</span><br><span class="line">tmp[i][j][<span class="number">2</span>] = (tmp[i][j][<span class="number">2</span>] + (tmp[i - <span class="number">1</span>][p][<span class="number">1</span>] * dp[v][j - p][<span class="number">2</span>]) % mod) % mod;</span><br><span class="line">tmp[i][j][<span class="number">2</span>] = (tmp[i][j][<span class="number">2</span>] + (tmp[i - <span class="number">1</span>][p][<span class="number">2</span>] * dp[v][j - p][<span class="number">2</span>]) % mod) % mod;</span><br><span class="line">tmp[i][j][<span class="number">2</span>] = (tmp[i][j][<span class="number">2</span>] + (tmp[i - <span class="number">1</span>][p][<span class="number">2</span>] * dp[v][j - p][<span class="number">1</span>]) % mod) % mod;</span><br><span class="line">tmp[i][j][<span class="number">2</span>] = (tmp[i][j][<span class="number">2</span>] + (tmp[i - <span class="number">1</span>][p][<span class="number">2</span>] * dp[v][j - p][<span class="number">0</span>]) % mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[u][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1L</span>L;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k;i++)&#123;</span><br><span class="line">dp[u][i][<span class="number">0</span>] = (tmp[siz][i][<span class="number">0</span>] + tmp[siz][i][<span class="number">1</span>]) % mod;</span><br><span class="line">dp[u][i][<span class="number">1</span>] = (tmp[siz][i - <span class="number">1</span>][<span class="number">1</span>] + tmp[siz][i - <span class="number">1</span>][<span class="number">2</span>]) % mod;</span><br><span class="line">dp[u][i][<span class="number">2</span>] = tmp[siz][i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;k))&#123;</span><br><span class="line">Init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</span><br><span class="line">G[u].push_back(v);</span><br><span class="line">G[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(dp[<span class="number">1</span>][k][<span class="number">0</span>] + dp[<span class="number">1</span>][k][<span class="number">1</span>]) % mod);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) G[i].clear();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">参考博客代码：</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> no_stand 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> safe 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> notSafe 2</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> llt;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">201</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> tree[N][N],treeCnt[N];</span><br><span class="line"><span class="comment">//treeCnt[N]记录子树的个数</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> dp[N][N][<span class="number">3</span>],tmp[N][N][<span class="number">3</span>];</span><br><span class="line"><span class="comment">//dp[i][j][k]数组代表以i为根的树上站了j个人且树根i的状态为k的方案数</span></span><br><span class="line"><span class="comment">//tmp[i][j][k]用于计算dp数组的辅助数组，对每一个根节点，代表前i个子树分配了j个人，且状态和为k的方案</span></span><br><span class="line"><span class="comment">//这里指的状态和是指全部子树合在一起的状态，而且在搜索中"此时"根节点u不站人</span></span><br><span class="line"><span class="comment">//状态和解释：no_stand状态是指正在搜索的结点的前i个子树的根节点都不站人</span></span><br><span class="line"><span class="comment">//            safe状态是指正在搜索的结点的前i个子树没有不安全的结点，而且至少有一个处于safe状态的子节点</span></span><br><span class="line"><span class="comment">//            Notsafe状态是指......至少有一个处于Notsafe的结点</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//关于三种状态:</span></span><br><span class="line"><span class="comment">//0:代表树根上不站人的合法状态</span></span><br><span class="line"><span class="comment">//1:代表树根上站了的人的安全状态</span></span><br><span class="line"><span class="comment">//2:代表树根上站了人的不安全状态,但是它的所有子树都安全(这里指子树的根节点都处于no_stand状态),这个状态可以通过在该节点的父亲上放个人来变为合法状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sz = treeCnt[now];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; sz;i++)&#123;</span><br><span class="line">    dfs(tree[now][i]);</span><br><span class="line">    <span class="comment">//printf("** %d %d\n",tree[now][i],now);</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="number">3</span> * N * N * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="comment">//前0个子树站了一个0个节点而且全部没有站人(因为根本没有子树)</span></span><br><span class="line">    tmp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1L</span>L;</span><br><span class="line"><span class="comment">//对前i个子树</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= sz;i++)&#123;</span><br><span class="line"><span class="comment">//第i个子树个根为v</span></span><br><span class="line">        <span class="keyword">int</span> v = tree[now][i - <span class="number">1</span>];</span><br><span class="line"><span class="comment">//给前i个子树分配j个人</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt;= m;j++)&#123;</span><br><span class="line"><span class="comment">//给前i-1个子树分配k个人，那么第i个子树就分配j-k个人</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt;= j;k++)&#123;</span><br><span class="line"><span class="comment">//前i个子树树根不站人：前i-1个子树树根不站人，且第i个子树树根不站人</span></span><br><span class="line">                tmp[i][j][<span class="number">0</span>] += ((llt)tmp[i - <span class="number">1</span>][k][<span class="number">0</span>] * dp[v][j - k][<span class="number">0</span>]) % MOD; tmp[i][j][<span class="number">0</span>] %= MOD;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前i个子树有&gt;=1个子树站了人的合法状态：前i-1个子树树根不站人，第i个子树安全</span></span><br><span class="line">                tmp[i][j][<span class="number">1</span>] += ((llt)tmp[i - <span class="number">1</span>][k][<span class="number">0</span>] * dp[v][j - k][<span class="number">1</span>]) % MOD; tmp[i][j][<span class="number">1</span>] %= MOD;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前i个子树有&gt;=1个子树站了人的合法状态：前i-1个子树安全，第i个子树树根不站人</span></span><br><span class="line">                tmp[i][j][<span class="number">1</span>] += ((llt)tmp[i - <span class="number">1</span>][k][<span class="number">1</span>] * dp[v][j - k][<span class="number">0</span>]) % MOD; tmp[i][j][<span class="number">1</span>] %= MOD;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前i个子树有&gt;=1个子树站了人的合法状态：前i-1个子树安全，第i个子树树根站人且安全</span></span><br><span class="line">                tmp[i][j][<span class="number">1</span>] += ((llt)tmp[i - <span class="number">1</span>][k][<span class="number">1</span>] * dp[v][j - k][<span class="number">1</span>]) % MOD; tmp[i][j][<span class="number">1</span>] %= MOD;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前i个子树树根站人且树根上的人不安全：枚举一下，前i-1个子树或者第i个子树有一个不安全即为不安全状态，所以有5种</span></span><br><span class="line">                tmp[i][j][<span class="number">2</span>] += ((llt)tmp[i - <span class="number">1</span>][k][<span class="number">0</span>] * dp[v][j - k][<span class="number">2</span>]) % MOD; tmp[i][j][<span class="number">2</span>] %= MOD;</span><br><span class="line"></span><br><span class="line">                tmp[i][j][<span class="number">2</span>] += ((llt)tmp[i - <span class="number">1</span>][k][<span class="number">2</span>] * dp[v][j - k][<span class="number">0</span>]) % MOD; tmp[i][j][<span class="number">2</span>] %= MOD;</span><br><span class="line"></span><br><span class="line">                tmp[i][j][<span class="number">2</span>] += ((llt)tmp[i - <span class="number">1</span>][k][<span class="number">1</span>] * dp[v][j - k][<span class="number">2</span>]) % MOD; tmp[i][j][<span class="number">2</span>] %= MOD;</span><br><span class="line"></span><br><span class="line">                tmp[i][j][<span class="number">2</span>] += ((llt)tmp[i - <span class="number">1</span>][k][<span class="number">2</span>] * dp[v][j - k][<span class="number">1</span>]) % MOD; tmp[i][j][<span class="number">2</span>] %= MOD;</span><br><span class="line"></span><br><span class="line">                tmp[i][j][<span class="number">2</span>] += ((llt)tmp[i - <span class="number">1</span>][k][<span class="number">2</span>] * dp[v][j - k][<span class="number">2</span>]) % MOD; tmp[i][j][<span class="number">2</span>] %= MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对于每一个结点为根的结点站了0个人的方法总数为1</span></span><br><span class="line">    dp[now][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">//  printf("now = %d , sz = %d\n",now,sz);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line"><span class="comment">//now节点不站人且安全：所有子树都不站人+所有子树都安全</span></span><br><span class="line">        dp[now][i][<span class="number">0</span>] = (tmp[sz][i][<span class="number">0</span>] + tmp[sz][i][<span class="number">1</span>]) % MOD;</span><br><span class="line"></span><br><span class="line"><span class="comment">//now结点站人且安全：所有子树都安全+（子树为不安全状态，但只有子树树根不安全，可以转化为安全状态）</span></span><br><span class="line">        dp[now][i][<span class="number">1</span>] = (tmp[sz][i - <span class="number">1</span>][<span class="number">1</span>] + tmp[sz][i - <span class="number">1</span>][<span class="number">2</span>]) % MOD;</span><br><span class="line"></span><br><span class="line"><span class="comment">//now节点站人且不安全：所有子树都不站人</span></span><br><span class="line">        dp[now][i][<span class="number">2</span>] = tmp[sz][i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//通过搜索，删除所有指向父亲的边，这样每个节点边的数量就等于它子树的数量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cutEdge</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; treeCnt[now];)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = tree[now][i];</span><br><span class="line">        <span class="keyword">if</span>(v == fa) tree[now][i] = tree[now][--treeCnt[now]];</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">             cutEdge(v,now);</span><br><span class="line"> i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="comment">//先切除多余的边，形成一棵树</span></span><br><span class="line">    cutEdge(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//因为是从第一棵子树开始dfs的，所以答案是以第一棵树为根节点，有m个stands的合法状态之和</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(dp[<span class="number">1</span>][m][<span class="number">1</span>] + dp[<span class="number">1</span>][m][<span class="number">0</span>]) % MOD);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m) != EOF )&#123;</span><br><span class="line">        <span class="built_in">memset</span>(treeCnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(treeCnt));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n - <span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> u,v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</span><br><span class="line"><span class="comment">//由于输入不是以父亲-儿子的顺序输入的，所以不知道树根，建立双向边，不然跑不通</span></span><br><span class="line"><span class="comment">//后面还需要删边,见cutEdge函数</span></span><br><span class="line">            tree[u][treeCnt[u]++] = v;</span><br><span class="line">            tree[v][treeCnt[v]++] = u;</span><br><span class="line">        &#125;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/11/14/Codeforces%20-%20gym%20-%20101505%20-%20F.Tree%20Stands(%E6%A0%91%E5%BD%A2DP%E8%AE%A1%E6%95%B0)/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
