<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>天之界</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>踏一步便是虚无</description>
    <pubDate>Fri, 13 Apr 2018 00:53:29 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>马拉车</title>
      <link>http://yoursite.com/2018/04/11/%E9%A9%AC%E6%8B%89%E8%BD%A6/</link>
      <guid>http://yoursite.com/2018/04/11/%E9%A9%AC%E6%8B%89%E8%BD%A6/</guid>
      <pubDate>Wed, 11 Apr 2018 01:29:10 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/91/7/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/91/7/thumb.jpg" alt="img"></p><a id="more"></a><h4 id="一-算法过程分析"><a href="#一-算法过程分析" class="headerlink" title="一.算法过程分析"></a>一.算法过程分析</h4><p>由于回文分为偶回文（比如 $bccb$）和奇回文（比如 $bcacb$），而在处理奇偶问题上会比较繁琐，所以这里我们使用一个技巧，在字符间插入一个字符（前提这个字符未出现在串里）。举个例子：<code>s=&quot;abbahopxpo&quot;</code>，转换为<code>s_new=&quot;$#a#b#b#a#h#o#p#x#p#o#&quot;</code>（这里的字符 $ 只是为了防止越界，下面代码会有说明），如此，s 里起初有一个偶回文 <code>abba</code> 和一个奇回文 <code>opxpo</code>，被转换为 <code>#a#b#b#a#</code> 和 <code>#o#p#x#p#o#</code>，长度都转换成了奇数。</p><p>  定义一个辅助数组 <code>int p[]</code>， <code>p[i]</code> 表示以 <code>ma[i]</code>为中心的最长回文的半径，例如：</p><div class="table-container"><table><thead><tr><th>i</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th><th>17</th><th>18</th><th>19</th></tr></thead><tbody><tr><td>ma[i]</td><td>$</td><td>#</td><td>a</td><td>#</td><td>b</td><td>#</td><td>b</td><td>#</td><td>a</td><td>#</td><td>h</td><td>#</td><td>o</td><td>#</td><td>p</td><td>#</td><td>x</td><td>#</td><td>p</td><td>#</td></tr><tr><td>p[i]</td><td></td><td>1</td><td>2</td><td>1</td><td>4</td><td>5</td><td>2</td><td>1</td><td>2</td><td>1</td><td>2</td><td>1</td><td>2</td><td>1</td><td>2</td><td>1</td><td>6</td><td>1</td><td>2</td><td>1</td></tr></tbody></table></div><p>可以看出，<code>p[i]-1</code> 正好是原字符串中最长回文串的长度。</p><h4 id="二-定义-R-为以-ma-id-为中心的最长回文最右边界，也就是-R-id-p-id-。-j-与-i-关于-id-对称，根据回文的性质，p-i-的值基于以下三种情况得出"><a href="#二-定义-R-为以-ma-id-为中心的最长回文最右边界，也就是-R-id-p-id-。-j-与-i-关于-id-对称，根据回文的性质，p-i-的值基于以下三种情况得出" class="headerlink" title="二.定义 R 为以 ma[id] 为中心的最长回文最右边界，也就是 R = id + p[id]。$j$ 与 $i$关于 $id$ 对称，根据回文的性质，p[i] 的值基于以下三种情况得出:"></a>二.定义 R 为以 ma<code>[id]</code> 为中心的最长回文最右边界，也就是 <code>R = id + p[id]</code>。$j$ 与 $i$关于 $id$ 对称，根据回文的性质，<code>p[i]</code> 的值基于以下三种情况得出:</h4><pre><code> (1). $j$ 的回文串有一部分在 $id$  的**之外**，如下图：</code></pre><p><img src="http://oi0fekpsr.bkt.clouddn.com/Manacher%E7%AE%97%E6%B3%95_1.png?imageView2/2/w/1440/q/75/format/webp" alt="img"></p><p>​    上图中，黑线为   $id$ 的回文，$i$ 与 $j$ 关于 $id$ 对称，红线为 $j$ 的回文。那么根据代码此时<code>p[i] = R-i</code>，即紫线。那么<code>p[i]</code> 还可以更大么？答案是不可能！见下图：</p><p><img src="http://oi0fekpsr.bkt.clouddn.com/Manacher%E7%AE%97%E6%B3%95_2.png?imageView2/2/w/1440/q/75/format/webp" alt="img"></p><p>假设右边新增的紫色部分是<code>p[i]</code>可以增加的部分，那么根据回文的性质，$a$ 等于 $d$ ，也就是说 $id$ 的回文不仅仅是黑线，而是黑线 + 两条紫线，矛盾，所以假设不成立，故<code>p[i] = R-i</code>，不可以再增加一分。</p><p>  （2）j 回文串全部在 $id$ 的<strong>内部</strong>，如下图：</p><p><img src="http://oi0fekpsr.bkt.clouddn.com/Manacher%E7%AE%97%E6%B3%95_3.png?imageView2/2/w/1440/q/75/format/webp" alt="img"></p><p>此时<code>p[i] = p[j]</code>，那么<code>p[i]</code>还可以更大么？答案亦是不可能！见下图：</p><p><img src="http://oi0fekpsr.bkt.clouddn.com/Manacher%E7%AE%97%E6%B3%95_4.png?imageView2/2/w/1440/q/75/format/webp" alt="img"></p><p>假设右边新增的红色部分是<code>p[i]</code>可以增加的部分，那么根据回文的性质，$a$ 等于 $b $，也就是说 $j$ 的回文应该再加上 $a$ 和 $b$ ，矛盾，所以假设不成立，故<code>p[i] = p[j]</code>，也不可以再增加一分。</p><p>  （3）$j$ 回文串左端正好与 $id$ 的回文串左端<strong>重合</strong>，见下图：</p><p><img src="http://oi0fekpsr.bkt.clouddn.com/Manacher%E7%AE%97%E6%B3%95_5.png?imageView2/2/w/1440/q/75/format/webp" alt="img"></p><p>此时<code>p[i] = p[j]</code> 或 <code>p[i] = R - i</code> ，并且<code>p[i]</code>  还可以继续增加，所以需要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while (ma[i - p[i]] == ma[i + p[i]]) </span><br><span class="line">    p[i]++;</span><br></pre></td></tr></table></figure><p><strong>代码如下：</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">110010</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">char</span> Ma[maxn * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> p[maxn * <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manacher</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    Ma[l++] = <span class="string">'$'</span>;</span><br><span class="line">    Ma[l++] = <span class="string">'#'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        Ma[l++] = s[i];</span><br><span class="line">        Ma[l++] = <span class="string">'#'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Ma[l] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>, R = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; R)p[i] = min(p[pos * <span class="number">2</span> - i], R - i);</span><br><span class="line">        <span class="keyword">else</span> p[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(Ma[i + p[i]] == Ma[i - p[i]])p[i]++;</span><br><span class="line">        <span class="keyword">if</span>(i + p[i] &gt; R) R = i + p[i], pos = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s) != EOF) &#123;</span><br><span class="line">        <span class="keyword">int</span> Max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        Manacher(s, len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * len + <span class="number">2</span>; i++) &#123;</span><br><span class="line">            Max = max(Max, p[i] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/04/11/%E9%A9%AC%E6%8B%89%E8%BD%A6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>优先队列</title>
      <link>http://yoursite.com/2018/04/11/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</link>
      <guid>http://yoursite.com/2018/04/11/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</guid>
      <pubDate>Wed, 11 Apr 2018 00:24:33 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/89/1/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/89/1/thumb.jpg" alt="img"></p><a id="more"></a><h3 id="从大到小："><a href="#从大到小：" class="headerlink" title="从大到小："></a>从大到小：</h3><p>$priority_queue <int,vector<int>,less<int> &gt; p;$</int></int,vector<int></p><h3 id="从小到大："><a href="#从小到大：" class="headerlink" title="从小到大："></a>从小到大：</h3><p>$priority_queue <int,vector<int>,greater<int> &gt; q;$</int></int,vector<int></p><h3 id="优先队列里放-pair"><a href="#优先队列里放-pair" class="headerlink" title="优先队列里放 $pair$ :"></a>优先队列里放 $pair$ :</h3><p>$typede$ $pair<ll, int=""> PII;$<br>$vector<pii> ans;$<br>$priority_queue<pii, vector<pii="">, greater<pii> &gt;que;$</pii></pii,></pii></ll,></p><p>这里是首先让第一元素从小到大排序，当第一元素相等时，再按第二元素从大到小排序。</p><h3 id="优先队列自定义重载："><a href="#优先队列自定义重载：" class="headerlink" title="优先队列自定义重载："></a>优先队列自定义重载：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line">X () &#123;&#125;</span><br><span class="line">X (<span class="keyword">int</span> aa,<span class="keyword">int</span> bb) &#123;</span><br><span class="line">a = aa,b = bb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> X A, <span class="keyword">const</span> X B)&#123;</span><br><span class="line"><span class="keyword">if</span>(A.a == B.a) <span class="keyword">return</span> A.b &gt; B.b; <span class="comment">//这里是反过来的，小于就是大于，大于就是小于。</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> A.a &gt; B.a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">X ans[maxn];</span><br><span class="line">priority_queue &lt;X&gt; pq;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ans[<span class="number">1</span>].a = <span class="number">1</span>;</span><br><span class="line">ans[<span class="number">1</span>].b = <span class="number">2</span>;</span><br><span class="line">ans[<span class="number">2</span>].a = <span class="number">2</span>;</span><br><span class="line">ans[<span class="number">2</span>].b = <span class="number">1</span>;</span><br><span class="line">ans[<span class="number">3</span>].a = <span class="number">1</span>;</span><br><span class="line">ans[<span class="number">3</span>].b = <span class="number">3</span>;</span><br><span class="line">pq.push(ans[<span class="number">1</span>]);</span><br><span class="line">pq.push(ans[<span class="number">3</span>]);</span><br><span class="line">pq.push(ans[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">X k = pq.top();</span><br><span class="line">pq.pop();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,k.a,k.b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/04/11/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/#disqus_thread</comments>
    </item>
    
    <item>
      <title>命名规范</title>
      <link>http://yoursite.com/2018/03/26/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</link>
      <guid>http://yoursite.com/2018/03/26/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</guid>
      <pubDate>Mon, 26 Mar 2018 14:19:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.stocksnap.io/img-thumbs/960w/H2TR0EULAX.jpg&quot; alt=&quot;analysis business cafe communication computer connection copy space device digital home hot drink important internet keyboard laptop lifestyle management marketing milk tea morning network notebook objects office screen socia &quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://cdn.stocksnap.io/img-thumbs/960w/H2TR0EULAX.jpg" alt="analysis business cafe communication computer connection copy space device digital home hot drink important internet keyboard laptop lifestyle management marketing milk tea morning network notebook objects office screen socia "></p><a id="more"></a><h2 id="Codeforces"><a href="#Codeforces" class="headerlink" title="Codeforces:"></a>Codeforces:</h2><p><strong>例如：</strong></p><ul><li><p>$CF-div2-465.cpp$ </p></li><li><p>$CF-E-div2-40.cpp$</p><p>​</p></li></ul><h2 id="Atcoder"><a href="#Atcoder" class="headerlink" title="Atcoder:"></a>Atcoder:</h2><p><strong>例如：</strong></p><ul><li>$AT-R-093.cpp$</li><li>$AT-B-093.cpp$</li><li>$AT-G-093.cpp$ </li></ul><h2 id="POJ"><a href="#POJ" class="headerlink" title="POJ:"></a>POJ:</h2><p><strong>例如：</strong></p><ul><li>$POJ$ $-$ $4745.cpp$ </li></ul>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/26/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Dijkstra</title>
      <link>http://yoursite.com/2018/03/24/Dijkstra/</link>
      <guid>http://yoursite.com/2018/03/24/Dijkstra/</guid>
      <pubDate>Sat, 24 Mar 2018 15:31:38 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/91/5/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/91/5/thumb.jpg" alt="img"></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> LL INF = <span class="number">1L</span>L &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, T;</span><br><span class="line"><span class="keyword">int</span> all;</span><br><span class="line"><span class="keyword">int</span> pre[<span class="number">2</span> * MaxN + <span class="number">5</span>], last[MaxN + <span class="number">5</span>], other[<span class="number">2</span> * MaxN + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> cost[<span class="number">2</span> * MaxN + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> dis[MaxN + <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> id, d;</span><br><span class="line">Node () &#123;&#125;</span><br><span class="line">Node (<span class="keyword">int</span> a, <span class="keyword">int</span> b) : id(a), d(b) &#123;&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">friend</span> <span class="keyword">operator</span> &lt; (Node a, Node b) &#123;</span><br><span class="line"><span class="keyword">return</span> a.d &gt; b.d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">pre[++all] = last[x];</span><br><span class="line">last[x] = all;</span><br><span class="line">other[all] = y;</span><br><span class="line">cost[all] = w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) dis[i] = inf;</span><br><span class="line">dis[s] = <span class="number">0</span>;</span><br><span class="line">priority_queue &lt;Node&gt; pq;</span><br><span class="line">pq.push(Node(s, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span>(!pq.empty()) &#123;</span><br><span class="line">Node now = pq.top();</span><br><span class="line">pq.pop();</span><br><span class="line"><span class="keyword">int</span> ed = last[now.id];</span><br><span class="line"><span class="keyword">while</span>(ed != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> dr = other[ed];</span><br><span class="line"><span class="keyword">if</span>(dis[now.id] + cost[ed] &lt; dis[dr]) &#123;</span><br><span class="line">dis[dr] = dis[now.id] + cost[ed];</span><br><span class="line">pq.push(Node(dr, dis[dr]));</span><br><span class="line">&#125;</span><br><span class="line">ed = pre[ed];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;T, &amp;n) != EOF)</span><br><span class="line">&#123;</span><br><span class="line">all = <span class="number">-1</span>; <span class="built_in">memset</span>(last, <span class="number">-1</span>, <span class="keyword">sizeof</span>(last));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v, w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">build(u, v, w); build(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line">Dijkstra(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dis[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/24/Dijkstra/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ-1141-Brackets Sequence</title>
      <link>http://yoursite.com/2018/03/23/POJ-1141-Brackets-Sequence/</link>
      <guid>http://yoursite.com/2018/03/23/POJ-1141-Brackets-Sequence/</guid>
      <pubDate>Fri, 23 Mar 2018 07:33:02 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/88/4/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/88/4/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://poj.org/problem?id=1141" target="_blank" rel="noopener">Go!</a></p><h2 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h2><p>​    给你一个长度不超过 $100$ 且只包含 $(  ,  )  ,  [  ,  ]$ 四种字符的字符串 $s$，添加 <strong>最少</strong> 的字符使其变成一个合法的字符串，<strong>输出</strong>这个<strong>合法的字符串</strong>。</p><h5 id="合法字符串的定义："><a href="#合法字符串的定义：" class="headerlink" title="合法字符串的定义："></a>合法字符串的定义：</h5><ol><li>$Empty$ $sequence$ $is$ $a$ $regular$ $sequence. $</li><li>$If$ $S$ $is$ $a$ $regular$ $sequence$, $then$ $(S)$ $and$ $[S]$ $are$ $both$ $regular$ $sequences. $</li><li>$If$ $A$ $and$ $B$ $are$ $regular$ $sequences$, $then$ $AB$ $is$ $a$ $regular$ $sequence$. </li></ol><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$Sample$ $ Input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">([(]</span><br></pre></td></tr></table></figure><p>$Sample$ $ Output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">()[()]</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>这是一道 <strong>区间</strong> $dp$ (路径还原)</p><ul><li><p><strong>状态方程</strong> : $dp[i][j]$ 代表使 <strong>区间</strong> $(i,j)$ 形成一个合法的字符串最少需要添加多的字符串？</p><p>​           $path[i][j]$ 代表添加最少的字符使 <strong>区间</strong> $(i,j)$ 形成一个合法的字符串的路径选择。</p></li></ul><ul><li><p>若 $path[i][j]$ $=$ $-1$ ,表示头尾。</p><p>若 $path[i][j]$ $=$ $k$ ($k$ != $-1$ ) ,表示由 <strong>区间</strong> $(i,k)$ 和 <strong>区间</strong> ($k + 1$ ,$j$) 而来。</p></li></ul><ul><li><strong>转移方程</strong>： <ul><li><strong>区间 $(i,j)$</strong> 可以由 <strong>区间 $(i,k)$</strong> + <strong>区间 $(k + 1,j)$</strong> 转移而来。</li><li>当 $s[i]$ = $s[j]$ 时，<strong>区间 $(i,j)$</strong> 也可以由 <strong>区间 $(i + 1,j - 1)$</strong> 转移而来。（需要注意的是：当 $i + 1 = j$ 时，直接 $dp[i][j]$ = $0$，否则会出现 $i + 1 &gt; j - 1$ 的情况）</li></ul></li></ul><ul><li><strong>小思考</strong>：为什么最外层是枚举 <strong>区间长度</strong>，而不是直接枚举 <strong>区间端点 $l,r$</strong> 呢？<ul><li>答：因为我们转移的时候是从 <strong>小区间</strong> 转移到 <strong>大区间</strong> 的。</li></ul></li></ul><ul><li><strong>最后答案</strong>：根据 $path[i][j]$ 记录的值，用<strong>递归</strong>还原路径。（详情请看代码）</li></ul><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn],path[maxn][maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[l] == <span class="string">'('</span> || s[l] == <span class="string">')'</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"()"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"[]"</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(path[l][r] == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s[l];<span class="comment">//先输出左端点,</span></span><br><span class="line">dfs(l + <span class="number">1</span>,r - <span class="number">1</span>);<span class="comment">//再输出中间,</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s[r];<span class="comment">//最后输出右端点。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = path[l][r];<span class="comment">//分两部分输出。</span></span><br><span class="line">dfs(l,k);</span><br><span class="line">dfs(k + <span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(gets(s + <span class="number">1</span>))&#123;</span><br><span class="line">n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">memset</span>(path,<span class="number">0</span>,<span class="keyword">sizeof</span>(path));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) dp[i][i] = <span class="number">1</span>;<span class="comment">//初始化：自己当然初始化为 1,其他初始化为无穷大。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">2</span>;len &lt;= n;len++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">1</span>;l &lt;= n - len + <span class="number">1</span>;l++)&#123;</span><br><span class="line"><span class="keyword">int</span> r = len + l - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>((s[l] == <span class="string">'('</span> &amp;&amp; s[r] == <span class="string">')'</span>) || (s[l] == <span class="string">'['</span> &amp;&amp; s[r] == <span class="string">']'</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[l + <span class="number">1</span>][r - <span class="number">1</span>] &lt; dp[l][r])&#123;</span><br><span class="line">dp[l][r] = dp[l + <span class="number">1</span>][r - <span class="number">1</span>];</span><br><span class="line">path[l][r] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l + <span class="number">1</span> == r)&#123;</span><br><span class="line">dp[l][r] = <span class="number">0</span>;</span><br><span class="line">path[l][r] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = l;k &lt; r;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[l][k] + dp[k + <span class="number">1</span>][r] &lt; dp[l][r])&#123;</span><br><span class="line">dp[l][r] = dp[l][k] + dp[k + <span class="number">1</span>][r];</span><br><span class="line">path[l][r] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,n);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/23/POJ-1141-Brackets-Sequence/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforces-336-div2-D-Zuma</title>
      <link>http://yoursite.com/2018/03/20/Codeforces-336-div2-D-Zuma/</link>
      <guid>http://yoursite.com/2018/03/20/Codeforces-336-div2-D-Zuma/</guid>
      <pubDate>Tue, 20 Mar 2018 12:45:57 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/87/10/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/87/10/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://codeforces.com/contest/608/problem/D" target="_blank" rel="noopener">Go!</a></p><h2 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h2><p>​    给你一个长度为 $n$ 的序列 $c$，每次操作删去当前序列的一个回文串。问：把序列全部删完，<strong>最少</strong>需要多少次的操作?</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><p>$1 \leq n \leq 10^5$</p><p>$1 \leq c_i \leq n$</p><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 1</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><p>$In$  $the$ $first$ $sample$, $Genos$ $can$ $destroy$ $the$ $entire$ $line$ $in$ $one$ $second.$</p><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>$In$ $the$ $second$ $sample$, $Genos$ $can$ $only$ $destroy$ $one$ $gemstone$ $at$ $a$ $time$, $so$ $destroying$ $three$ $gemstones $$takes$ $three$ $seconds.$</p><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">1 4 4 2 3 2 1</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>$In$ $the$ $third$ $sample$, $to$ $achieve$ $the$ $optimal$ $time$ $of$ $two$ $seconds$, $destroy$ $palindrome$ $4$ $4$ $first$ $and$ $then$ $destroy$ $palindrome$ $1$ $2$ $3$ $2$ $1$.</p><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>这是一道 <strong>区间 $dp$</strong> </p><ul><li><strong>状态方程</strong>：$dp[i][j]$ 代表完全删除区间 $(i,j)$ 最少需要多少次操作？</li></ul><ul><li><strong>转移方程</strong>：<ul><li><strong>区间 $(i,j)$</strong> 可以由 <strong>区间 $(i,k)$</strong> + <strong>区间 $(k + 1,j)$</strong> 转移而来。</li><li>当 $c[i]$ = $c[j]$ 时，<strong>区间 $(i,j)$</strong> 也可以由 <strong>区间 $(i + 1,j - 1)$</strong> 转移而来。（需要注意的是：当 $i + 1 = j$ 时，直接 $dp[i][j]$ = 1，否则会出现 $i + 1 &gt; j - 1$ 的情况）</li></ul></li></ul><ul><li><strong>小思考1</strong>：为什么最外层是枚举 <strong>区间长度</strong>，而不是直接枚举 <strong>区间端点 $l,r$</strong> 呢？<ul><li>答：因为我们转移的时候是从 <strong>小区间</strong> 转移到 <strong>大区间</strong> 的。</li></ul></li></ul><ul><li><strong>小思考2</strong>： 当 $c[i] = c[j]$ 时，为什么 <strong>区间</strong> $(i,j)$  是直接由 <strong>区间</strong> $(i + 1,j - 1) $ 转移而来，而不是由 <strong>区间</strong> $(i + 1, j - 1)$    $+ $   $1$  转移而来？<ul><li>答：因为，若完全删除 <strong>区间</strong> $(i + 1,j - 1)$ 最少需要 $k$ 次操作，那么我们可以在前 $k - 1$ 次操作删掉 <strong>区间</strong> $(i + 1,j - 1)$ 的 $k - 1$ 部分，剩下的一部分可以与 $c[i],c[j]$ 形成一个回文串，最后再一起删掉,所以总操作次数还是 $k$ 次。</li></ul></li></ul><ul><li><strong>最后答案</strong>：$dp[1][n] $ 。</li></ul><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a><strong>AC</strong>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">505</span>],dp[<span class="number">505</span>][<span class="number">505</span>];<span class="comment">// dp[i][j] : 完全删除区间 (i,j) 最少需要多少次操作？</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dp));<span class="comment">// 初始化为正无穷。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">cin</span> &gt;&gt; c[i], dp[i][i] = <span class="number">1</span>;<span class="comment">// 删除一个数时需要一次操作。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">2</span>;len &lt;= n;len++)&#123;<span class="comment">// 枚举区间长度。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">1</span>;l &lt;= n - len + <span class="number">1</span>;l++)&#123;<span class="comment">//枚举左端点。</span></span><br><span class="line"><span class="keyword">int</span> r = l + len - <span class="number">1</span>;<span class="comment">//右端点。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = l;k &lt; r;k++)&#123;</span><br><span class="line">dp[l][r] = min(dp[l][r],dp[l][k] + dp[k + <span class="number">1</span>][r]);</span><br><span class="line">                  <span class="comment">// 代表区间(l,r) 可以由 (l,k) + (k + 1,r) 转移。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(c[l] == c[r])&#123;<span class="comment">//当 a[l] = a[r]时。</span></span><br><span class="line"><span class="keyword">if</span>(l + <span class="number">1</span> == r) dp[l][r] = <span class="number">1</span>;<span class="comment">//若相邻,则需要一次操作。</span></span><br><span class="line">dp[l][r] = min(dp[l][r],dp[l + <span class="number">1</span>][r - <span class="number">1</span>]);<span class="comment">// (l,r) 当然可以由 (l + 1,r - 1) 转移。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/20/Codeforces-336-div2-D-Zuma/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Markdown 语法</title>
      <link>http://yoursite.com/2018/03/20/Markdown-%E8%AF%AD%E6%B3%95/</link>
      <guid>http://yoursite.com/2018/03/20/Markdown-%E8%AF%AD%E6%B3%95/</guid>
      <pubDate>Tue, 20 Mar 2018 00:45:58 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.stocksnap.io/img-thumbs/280h/LPPN6E2YK4.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://cdn.stocksnap.io/img-thumbs/280h/LPPN6E2YK4.jpg" alt="img"></p><a id="more"></a><p><code>&lt;span id=&quot;inline-blue&quot;&gt; 站点配置文件 &lt;/span&gt;</code>         </p><p><span id="inline-blue"> 站点配置文件 </span></p><p><code>&lt;span id=&quot;inline-purple&quot;&gt; 主题配置文件 &lt;/span&gt;</code>     </p><p><span id="inline-purple"> 主题配置文件 </span></p><p><code>&lt;span id=&quot;inline-yellow&quot;&gt; 站点配置文件 &lt;/span&gt;</code>     </p><p><span id="inline-yellow"> 站点配置文件 </span></p><p><code>&lt;span id=&quot;inline-green&quot;&gt; 主题配置文件 &lt;/span&gt;</code>  </p><p>​     <span id="inline-green"> 主题配置文件 </span></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/20/Markdown-%E8%AF%AD%E6%B3%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>四校联赛2-C-Array Gcd</title>
      <link>http://yoursite.com/2018/03/18/%E5%9B%9B%E6%A0%A1%E8%81%94%E8%B5%9B2-C-Array-Gcd/</link>
      <guid>http://yoursite.com/2018/03/18/%E5%9B%9B%E6%A0%A1%E8%81%94%E8%B5%9B2-C-Array-Gcd/</guid>
      <pubDate>Sun, 18 Mar 2018 15:12:44 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/87/1/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/87/1/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>​    我们考虑到1操作也就是移除连续的一段区间的元素只能操作一次，而且长度是小于n的，那么最后得到的序列肯定是含有第一个元素或者是最后一个元素，那么根据这个性质我们就可以将 $a[1], a[1] +1, a[1] - 1, a[n], a[n] + 1, a[n] - 1$， 这6个数质数分解将质因子存在来，然后去枚举质因子， 对于每一个质因子序列里的每一个数成为这个质因子的代价是不同的，如果 $a[i]$ %  $p$ = 0, $cost[i]$ = $0$、 ($a[i]$ +1) % $p$ = $0$ || ($a[i]$ - 1) % p = $0$, $cost[i]$ = $B$, 否则  $cost[i]$ = oo。<br>那么这个时候我们就可以 $dp$ 了，</p><p>$dp[i][0]$ 表示从一到  $i $ 这个位置还没有进行1操作的最小花费。<br>$dp[i][1]$ 表示从一到  $i$ 这个位置正在进行1操作的最小花费。<br>$dp[i][2]$ 表示从一到  $i$ 这个位置已经结束1操作了的最小花费。</p><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL Max = <span class="number">1000000000000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">LL n;</span><br><span class="line">LL a, b, c[MaxN + <span class="number">5</span>], dp[MaxN + <span class="number">5</span>][<span class="number">4</span>];</span><br><span class="line">LL cost[MaxN + <span class="number">5</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;LL&gt; G;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">G_insert</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(LL i = <span class="number">2</span>;i * i &lt;= x;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(x % i == <span class="number">0</span>)&#123;</span><br><span class="line">G.push_back(i);</span><br><span class="line"><span class="keyword">while</span>(x % i == <span class="number">0</span>) x /= i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x != <span class="number">1</span>) G.push_back(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">G.clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%I64d"</span> , &amp;c[i]);</span><br><span class="line"><span class="keyword">for</span>(LL i = <span class="number">-1</span>;i &lt;= <span class="number">1</span>;i++) G_insert(c[<span class="number">1</span>] + i);</span><br><span class="line"><span class="keyword">for</span>(LL i = <span class="number">-1</span>;i &lt;= <span class="number">1</span>;i++) G_insert(c[n] + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">Work</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cost[i] = dp[i][<span class="number">0</span>] = dp[i][<span class="number">1</span>] = dp[i][<span class="number">2</span>] = <span class="number">1L</span>L &lt;&lt; <span class="number">40</span>;</span><br><span class="line"><span class="keyword">if</span>(c[i] % x == <span class="number">0</span>) cost[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((c[i] - <span class="number">1</span>) % x == <span class="number">0</span> || (c[i] + <span class="number">1</span>) % x == <span class="number">0</span>) cost[i] = b;</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = dp[<span class="number">0</span>][<span class="number">1</span>] = dp[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + cost[i];</span><br><span class="line">dp[i][<span class="number">1</span>] = min(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>]) + a;</span><br><span class="line">dp[i][<span class="number">2</span>] = min(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]) + cost[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> min(dp[n][<span class="number">0</span>] , min(dp[n][<span class="number">1</span>], dp[n][<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">LL ans = <span class="number">1L</span>L &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; G.size();i++)&#123;</span><br><span class="line">ans = min(ans , Work(G[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span> , ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%I64d%I64d%I64d"</span> , &amp;n , &amp;a , &amp;b))&#123;</span><br><span class="line">Init();</span><br><span class="line">Solve();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/18/%E5%9B%9B%E6%A0%A1%E8%81%94%E8%B5%9B2-C-Array-Gcd/#disqus_thread</comments>
    </item>
    
    <item>
      <title>四校联赛2-D-D商店</title>
      <link>http://yoursite.com/2018/03/18/%E5%9B%9B%E6%A0%A1%E8%81%94%E8%B5%9B2-D-D%E5%95%86%E5%BA%97/</link>
      <guid>http://yoursite.com/2018/03/18/%E5%9B%9B%E6%A0%A1%E8%81%94%E8%B5%9B2-D-D%E5%95%86%E5%BA%97/</guid>
      <pubDate>Sun, 18 Mar 2018 12:43:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/70/3/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/70/3/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h2><p>​    先输入 $n，k$  分别代表有 $n$ 天，可以让任意 $k$ 天的的物品数量翻倍(每天最多只能翻一次）。接下来有 $n$ 行，第 $i$ 行有两个数 $ai，bi$ 分别代表在第 $i$ 天有  $ai$  件物品，有 $bi$ 个顾客。每个顾客都会买一件物品。问 n 天后<strong>最多</strong>卖出多少件物品?</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><p>$1 \leq n \leq 10^5$</p><p>$0 \leq k \leq n$</p><p>$1 \leq a_i ,bi\leq 10^9$</p><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><ul><li>当天的<strong>存货量大于等于需求量</strong>的时候，这一天的存货量是不需要翻倍的。</li><li>当天存货量小于需求量的时候，先让这一天的存货量翻倍，求出当天 ”<strong>可增加</strong>“ 的销售量，然后根据可增加的销售量<strong>从大到小</strong>排序，选出前 $k$ 天。</li></ul><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">LL a[maxn],b[maxn],s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">cmp</span><span class="params">(LL x,LL y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &gt; y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line">LL ans = <span class="number">0</span>,sum;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%I64d %I64d"</span>,&amp;a[i],&amp;b[i]);</span><br><span class="line"><span class="keyword">if</span>(b[i] &gt; a[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span> * a[i] &lt;= b[i]) s[i] = a[i];</span><br><span class="line"><span class="keyword">else</span> s[i] = b[i] - a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">s[i] = <span class="number">0</span>;</span><br><span class="line">a[i] = b[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(s + <span class="number">1</span>,s + n + <span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k;i++) ans += s[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) ans += a[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/18/%E5%9B%9B%E6%A0%A1%E8%81%94%E8%B5%9B2-D-D%E5%95%86%E5%BA%97/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforces911D---Inversion Counting</title>
      <link>http://yoursite.com/2018/03/16/Codeforces911D---Inversion%20Counting/</link>
      <guid>http://yoursite.com/2018/03/16/Codeforces911D---Inversion%20Counting/</guid>
      <pubDate>Fri, 16 Mar 2018 13:46:12 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/79/6/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/79/6/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h2><p>给你 $n$ 个数，和 $m$ 个操作询问，每个询问给你 $l,r$ 两个数，问你反转 $l,r$ 区间的元素后，整个序列的逆序对的个数是奇数个还是偶数个，奇数个输出 $odd$ ,偶数个则输出 $even$ ,该逆序对以从小到大为标准次序，反转后不会恢复为原序列，且保证 $n$ 个数中每个数都不相同。</p><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><p>$1 \leq n \leq 1500,1 \leq m \leq 2 \cdot 10^5,1 \leq l_i \leq r_i \leq n,1 \leq a_i \leq n;​$</p><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>因为要求每次操作后逆序对的对数的奇偶性，如果想暴力做的话，每次对序列进行反转就是 $O(n)$ 的复杂度，还得重新求总逆序对个数，总复杂度就变为了 $O(n^{2}\cdot{m})$ ，这显然会 $TLE$ 的，所以得换个想法，我们先求出初始序列的总逆序对个数 $res$ ，根据 $[l,r]$ 区间逆序对的变化转换为总逆序对个数，但是真正的个数我们其实并不太需要，只需要知道奇偶性就行了；我们知道一个长度为len长的序列，它的逆序对最多为 $len\cdot(len-1)/2$ (假如该序列为从大到小排序，即总逆序对个数为 ($1+2+3+\dots+(len-1)=len\cdot(len-1)/2$) 暂且称为满逆序对,那么现逆序对个数即与满逆序对个数有关，若满逆序对个数为偶数个，那么现逆序对奇偶性与原逆序对相同，即为加减偶数个数，可以用 $len\cdot(len-1)/2$ 代替，否则当满逆序对个数为奇数个时，那么现逆序对奇偶性与原逆序对相反，即为加减奇数个，也可用 $len\cdot(len-1)/2$ 代替，所以每次只需要将 $res+=len\cdot(len-1)/2$ 后就可以直接判断奇偶性，$O(1)$ 出答案。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1500</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, cnt;</span><br><span class="line"><span class="keyword">int</span> a[maxn + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt; a[j])cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">cnt += (r - l + <span class="number">1</span>) * (r - l) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(cnt &amp; <span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"odd\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"even\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目链接：Go-to"><a href="#题目链接：Go-to" class="headerlink" title="题目链接：Go to!"></a>题目链接：<a href="http://codeforces.com/problemset/problem/911/D" target="_blank" rel="noopener">Go to!</a></h2>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/16/Codeforces911D---Inversion%20Counting/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
