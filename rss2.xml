<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>天之界</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>踏一步便是虚无</description>
    <pubDate>Sun, 28 Oct 2018 14:20:37 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>set的用法(C++)</title>
      <link>http://yoursite.com/2018/10/28/set%E7%9A%84%E7%94%A8%E6%B3%95(C++)/</link>
      <guid>http://yoursite.com/2018/10/28/set%E7%9A%84%E7%94%A8%E6%B3%95(C++)/</guid>
      <pubDate>Sun, 28 Oct 2018 14:13:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/118/5/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/118/5/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="set-的函数调用"><a href="#set-的函数调用" class="headerlink" title="set 的函数调用"></a>set 的函数调用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">c++ stl容器set成员函数:begin()--返回指向第一个元素的迭代器</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:clear()--清除所有元素</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:count()--返回某个值元素的个数</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:empty()--如果集合为空，返回true</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:end()--返回指向最后一个元素的迭代器</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:equal_range()--返回集合中与给定值相等的上下限的两个迭代器</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:erase()--删除集合中的元素</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:find()--返回一个指向被查找到元素的迭代器</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:get_allocator()--返回集合的分配器</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:insert()--在集合中插入元素</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:lower_bound()--返回指向大于（或等于）某值的第一个元素的迭代器</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:key_comp()--返回一个用于元素间值比较的函数</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:max_size()--返回集合能容纳的元素的最大限值</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:rbegin()--返回指向集合中最后一个元素的反向迭代器</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:rend()--返回指向集合中第一个元素的反向迭代器</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:size()--集合中元素的数目</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:swap()--交换两个集合变量</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:upper_bound()--返回大于某个值元素的迭代器</span><br><span class="line"></span><br><span class="line">c++ stl容器set成员函数:value_comp()--返回一个用于比较元素间的值的函数</span><br></pre></td></tr></table></figure><h2 id="c-stl集合set插入-遍历用法举例"><a href="#c-stl集合set插入-遍历用法举例" class="headerlink" title="c++ stl集合set插入,遍历用法举例"></a>c++ stl集合set插入,遍历用法举例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="comment">//set插入元素操作  </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">//定义一个int型集合对象s,当前没有任何元素.由www.169it.com搜集整理</span></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s; </span><br><span class="line">    s.insert(<span class="number">8</span>);  <span class="comment">//第一次插入8，可以插入  </span></span><br><span class="line">    s.insert(<span class="number">1</span>); </span><br><span class="line">    s.insert(<span class="number">12</span>); </span><br><span class="line">    s.insert(<span class="number">6</span>); </span><br><span class="line">    s.insert(<span class="number">8</span>);   <span class="comment">//第二次插入8，重复元素，不会插入  </span></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it; <span class="comment">//定义前向迭代器 </span></span><br><span class="line">    <span class="comment">//中序遍历集合中的所有元素  </span></span><br><span class="line">    <span class="keyword">for</span>(it=s.begin();it!=s.end();it++) </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;    </span><br><span class="line">    system(<span class="string">"pause"</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/10/28/set%E7%9A%84%E7%94%A8%E6%B3%95(C++)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforces- 518 - div2 - D.Array Without Local Maximums(DP计数)</title>
      <link>http://yoursite.com/2018/10/28/Codeforces-%20518%20-%20div2%20-%20D.Array%20Without%20Local%20Maximums(DP)/</link>
      <guid>http://yoursite.com/2018/10/28/Codeforces-%20518%20-%20div2%20-%20D.Array%20Without%20Local%20Maximums(DP)/</guid>
      <pubDate>Sun, 28 Oct 2018 13:46:41 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/118/2/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/118/2/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://codeforces.com/contest/1068/problem/D" target="_blank" rel="noopener">http://codeforces.com/contest/1068/problem/D</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><ul><li>输入一个 $n$ ：表示有一个长度为 $n$ 的 $a$ 序列。</li><li>$a_i$ 的范围为 $1 -&gt; 200$ 和 $-1$ 。</li><li>如果 $a_i = -1$ ，那么里的值可以改为任意数且满足以下三个条件</li></ul><p>$1$. $a_1 ≤ a_2$</p><p>$2$. $a_n &lt;= a_{n - 1}$</p><p>$3.$ $a_i &lt;= max(a_{i - 1},a_{i + 1})$ ，$i$ 从 $2$ 到 $n - 1$</p><p>问：总共会有多少个不一样的数列 ？ （ $\%998244353$)</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$2 &lt;=n &lt;= 1e5$</li><li>$1 &lt;= a_i &lt;= 200$ $or$  $-1$</li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 -1 2</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line">-1 -1</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"></span><br><span class="line">200</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><ul><li>状态：$dp[i][j][k]$ : 表示在第 $i$ 为放 $j$ 时 [0 : &lt; ] , [1 : = ] , [2 : &gt; ]   a[i - 1] 的方案数。</li><li>初始化：见代码解释</li><li>转移：<ul><li>$dp[i][j][1]$ $=$  $dp[i - 1][j][0]$ $+$ $dp[i - 1][j][1]$ $+$ $dp[i - 1][j][2]$ 。表示第 $i$ 位放 $j$ 时的方案数等于 第 $i - 1$ 位放 $j$ 时大于，等于和小于左边的方案数之和。</li><li>$dp[i][j][0]$  是由第 $i - 1$ 位放 $1 -&gt; (j - 1)$ 大于，等于和小于左边的方案数之和。（转移时满足条件3）</li><li>$dp[i][j][2]$  是由第 $i - 1$ 位放 $(j + 1)  -&gt; 200$ 等于和小于左边的方案数之和。（转移时满足条件3）</li></ul></li></ul><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line">LL dp[maxn][<span class="number">205</span>][<span class="number">3</span>]; <span class="comment">// 表示在第i为放j时 [0 : &lt; ] , [1 : = ] , [2 : &gt; ]  左边的方案数。</span></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123; <span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">200</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">1</span>] == <span class="number">-1</span> || a[<span class="number">1</span>] == i) dp[<span class="number">1</span>][i][<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 可以看作加上 a[0] = -inf,a[n + 1] = -inf,所以这样初始化可以满足条件：一定要 a[2] &gt; a[1], a[n - 1] &gt; a[n] 。</span></span><br><span class="line"><span class="keyword">else</span> dp[<span class="number">1</span>][i][<span class="number">0</span>] = <span class="number">0</span>;                        <span class="comment">// 也就是不用管当前位是首位还是尾位了，只要满足 a[i] &lt;= max(a[i - 1],a[i + 1]) 就行。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">Init();</span><br><span class="line">LL sum;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">200</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] == <span class="number">-1</span> || a[i] == j) dp[i][j][<span class="number">1</span>] = (dp[i - <span class="number">1</span>][j][<span class="number">0</span>] + dp[i - <span class="number">1</span>][j][<span class="number">1</span>] + dp[i - <span class="number">1</span>][j][<span class="number">2</span>]) % mod;</span><br><span class="line"><span class="keyword">else</span> dp[i][j][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum = <span class="number">0L</span>L;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">200</span>;j++)&#123; <span class="comment">// 正着，求前缀和</span></span><br><span class="line"><span class="keyword">if</span>(a[i] == <span class="number">-1</span> || a[i] == j) dp[i][j][<span class="number">0</span>] = sum % mod;</span><br><span class="line"><span class="keyword">else</span> dp[i][j][<span class="number">0</span>] = <span class="number">0L</span>L;</span><br><span class="line">sum = (sum + dp[i - <span class="number">1</span>][j][<span class="number">1</span>] + dp[i - <span class="number">1</span>][j][<span class="number">0</span>] + dp[i - <span class="number">1</span>][j][<span class="number">2</span>]) % mod;</span><br><span class="line">&#125;</span><br><span class="line">sum = <span class="number">0L</span>L;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">200</span>;j &gt;= <span class="number">1</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] == <span class="number">-1</span> || a[i] == j) dp[i][j][<span class="number">2</span>] = sum % mod;</span><br><span class="line"><span class="keyword">else</span> dp[i][j][<span class="number">2</span>] = <span class="number">0L</span>L;</span><br><span class="line">sum = (sum + dp[i - <span class="number">1</span>][j][<span class="number">1</span>] + dp[i - <span class="number">1</span>][j][<span class="number">2</span>]) % mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">LL ans = <span class="number">0L</span>L;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">200</span>;i++)&#123;<span class="comment">// 倒着，求后缀和</span></span><br><span class="line"><span class="keyword">if</span>(a[n] == <span class="number">-1</span> || a[n] == i) ans = (ans + dp[n][i][<span class="number">1</span>] + dp[n][i][<span class="number">2</span>]) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/10/28/Codeforces-%20518%20-%20div2%20-%20D.Array%20Without%20Local%20Maximums(DP)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforces - gym - 101873 - Problem G.Water Testing (几何，皮克定理)</title>
      <link>http://yoursite.com/2018/10/28/Codeforces%20-%20gym%20-%20101873%20-%20Problem%20G.Water%20Testing%20(%E5%87%A0%E4%BD%95%EF%BC%8C%E7%9A%AE%E5%85%8B%E5%AE%9A%E7%90%86)/</link>
      <guid>http://yoursite.com/2018/10/28/Codeforces%20-%20gym%20-%20101873%20-%20Problem%20G.Water%20Testing%20(%E5%87%A0%E4%BD%95%EF%BC%8C%E7%9A%AE%E5%85%8B%E5%AE%9A%E7%90%86)/</guid>
      <pubDate>Sun, 28 Oct 2018 01:50:51 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/118/6/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/118/6/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://codeforces.com/gym/101873/problem/G" target="_blank" rel="noopener">http://codeforces.com/gym/101873/problem/G</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>顺时针给你一些点，问由给你的点围起来的多边形内有多少个整数点？</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$3 &lt;= n &lt;= 100000$</li><li>$-1e6 &lt;= x_i,y_i &lt;= 1e6$</li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">0 0</span><br><span class="line">0 10</span><br><span class="line">10 10</span><br><span class="line">10 0</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">81</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>模板题</p><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max = <span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,s,n) for(ll i=s;i&lt;=n;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,n,s) for(ll i=n;i&gt;=s;i--)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">ll x,y;</span><br><span class="line">&#125;p[Max];</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b==<span class="number">0</span> ? a : gcd (b,a%b);</span><br><span class="line">&#125;<span class="comment">//皮克定理:多边形的面积 = 多边形内部整点的个数 + 边上正点的个数 / 2 - 1；</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">rep(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line">&#125;</span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">sum+=(p[(i+<span class="number">1</span>)%n].y)*(p[i].x-p[(i+<span class="number">2</span>)%n].x);</span><br><span class="line">&#125;<span class="comment">//这是在求多边形的面积；</span></span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">ans+=gcd(<span class="built_in">abs</span>(p[i].x-p[(i+<span class="number">1</span>)%n].x),<span class="built_in">abs</span>(p[i].y-p[(i+<span class="number">1</span>)%n].y));</span><br><span class="line">&#125;<span class="comment">//这是在求边界上面的点</span></span><br><span class="line">sum=<span class="built_in">abs</span>(sum);</span><br><span class="line">sum=(sum-ans)/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/10/28/Codeforces%20-%20gym%20-%20101873%20-%20Problem%20G.Water%20Testing%20(%E5%87%A0%E4%BD%95%EF%BC%8C%E7%9A%AE%E5%85%8B%E5%AE%9A%E7%90%86)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforces - gym - 101873 - F.Plug It In!(二分图匹配）</title>
      <link>http://yoursite.com/2018/10/25/Codeforces%20-%20gym%20-%20101873%20-%20F.Plug%20It%20In!(%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D%EF%BC%89/</link>
      <guid>http://yoursite.com/2018/10/25/Codeforces%20-%20gym%20-%20101873%20-%20F.Plug%20It%20In!(%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D%EF%BC%89/</guid>
      <pubDate>Thu, 25 Oct 2018 08:34:04 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/117/4/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/117/4/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="https://codeforces.com/gym/101873/problem/F" target="_blank" rel="noopener">https://codeforces.com/gym/101873/problem/F</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>  有 $m$ 个电源和 $n$ 个设备。给你 $k$ 对关系 （$x_i$ ，$y_i$ )，表示编号为 $x_i$ 的电源可以为编号为 $y_i$ 的设备供电，现在有一个 $3$ 孔的接线板，可以把一个电源分成 $3$ 个相同的电源。</p><p>问：最多可以有几个设备能通电？</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$1 &lt;= m,n &lt;= 1500$</li><li>$0 &lt;= k &lt;= 75000$</li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">3 6 8</span><br><span class="line">1 1</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 3</span><br><span class="line">2 4</span><br><span class="line">3 4</span><br><span class="line">3 5</span><br><span class="line">3 6</span><br><span class="line"></span><br><span class="line">4 5 11</span><br><span class="line">1 1</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 1</span><br><span class="line">2 2</span><br><span class="line">2 3</span><br><span class="line">3 1</span><br><span class="line">3 2</span><br><span class="line">3 3</span><br><span class="line">4 4</span><br><span class="line">4 5</span><br><span class="line"></span><br><span class="line">3 5 7</span><br><span class="line">1 1</span><br><span class="line">1 2</span><br><span class="line">2 2</span><br><span class="line">2 3</span><br><span class="line">2 4</span><br><span class="line">3 4</span><br><span class="line">3 5</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line"></span><br><span class="line">5</span><br><span class="line"></span><br><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><ul><li>一看到题目就应该想到是二分图的最大匹配，但这题多出了一个接线板，可以把一个电源分成三个相同的电源。二分图匹配的最坏复杂度为 O(E V)，而且匹配的过程是编号逐渐从 $1$ 到 $m$ （在这题) ，那么我们就可以先不考虑有接线板，直接匹配得到一个 $ans$ ，把不考虑接线板情况下每个设备接到哪个电源给记下来 $dev[i]$ 。</li></ul><ul><li>接着我们开始考虑有接线板的情况。在有接线板的情况下，最大配备数最多会加 $2$ ，那么我就枚举在哪个电源使用借接线板，在新编号 $m +1$ 的电源建跟电源 $i$ 有连线的点的边，和新编号 $m + 2$ 的的电源建跟电源 $i$ 有连线的点的边，继续匹配。看看最多能增加多少设备通电 $add$</li></ul><ul><li>最后的答案：$ans = ans + add$</li></ul><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1505</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="keyword">bool</span> used[maxn];</span><br><span class="line"><span class="keyword">int</span> dev[maxn];</span><br><span class="line"><span class="keyword">int</span> tmp[maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m,n,k,ans,add;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; G[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">int</span> y = G[x][i];</span><br><span class="line"><span class="keyword">if</span>(used[y] == <span class="number">0</span>)&#123;</span><br><span class="line">used[y] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(dev[y] == <span class="number">0</span> || Find(dev[y]))&#123;</span><br><span class="line">dev[y] = x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Match</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> all = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line"><span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line"><span class="keyword">if</span>(Find(i)) all++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;m,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x,&amp;y);</span><br><span class="line">G[x].push_back(y);</span><br><span class="line">vis[x]++;</span><br><span class="line">&#125;</span><br><span class="line">ans = Match();</span><br><span class="line">add = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) tmp[i] = dev[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i] &gt;= <span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; G[i].size();j++)&#123;</span><br><span class="line"><span class="keyword">int</span> y = G[i][j];</span><br><span class="line">G[m + <span class="number">1</span>].push_back(y);</span><br><span class="line">G[m + <span class="number">2</span>].push_back(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line"><span class="keyword">if</span>(Find(m + <span class="number">1</span>)) tot++;</span><br><span class="line"><span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line"><span class="keyword">if</span>(Find(m + <span class="number">2</span>)) tot++;</span><br><span class="line">add = max(add,tot);</span><br><span class="line">G[m + <span class="number">1</span>].clear();</span><br><span class="line">G[m + <span class="number">2</span>].clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) dev[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(add == <span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans + add);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/10/25/Codeforces%20-%20gym%20-%20101873%20-%20F.Plug%20It%20In!(%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforces - gym - 101911 - L.Ray in the tube</title>
      <link>http://yoursite.com/2018/10/19/Codeforces%20-%20gym%20-%20101911%20-%20L.Ray%20in%20the%20tube/</link>
      <guid>http://yoursite.com/2018/10/19/Codeforces%20-%20gym%20-%20101911%20-%20L.Ray%20in%20the%20tube/</guid>
      <pubDate>Fri, 19 Oct 2018 13:22:59 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/117/2/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/117/2/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h2><p><a href="http://www.cnblogs.com/--BLUESKY007/p/9660440.html" target="_blank" rel="noopener">http://www.cnblogs.com/--BLUESKY007/p/9660440.html</a></p><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://codeforces.com/gym/101911/problem/L" target="_blank" rel="noopener">http://codeforces.com/gym/101911/problem/L</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><ul><li>输入 $n$ , $y1$ </li><li>代表在 $y = y1$ 这条直线上有 $n$ 个横坐标为 $a_i$ 的点</li><li>输入 $m$ , $y2$</li><li>代表在 $y = y2$ 这条直线上有 $m$ 个横坐标为 $b_i$ 的点</li></ul><p>问：你可以从任意一个点以任何角度发射一束激光，激光经过反射后最多能经过多少个点？</p><p>如图：</p><p><img src="http://codeforces.com/predownloaded/2c/07/2c07b0b9ca5bc44f5831f7ca7a0b207712b3caf4.png" alt="img"></p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$1 &lt;= n,m &lt;= 1e5$</li><li>$0 &lt;= y1,y2 &lt;= 1e9$</li><li>$0 &lt;= a_i,b_i &lt;= 1e9$</li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 1</span><br><span class="line">1 5 6</span><br><span class="line">1 3</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><ul><li><p>首先我们可以知道当$a_i,b_i$ 确定时，$y1,y2$ 对答案并没有影响，只与激光射入角度有关，也就是与步长有关。</p></li><li><p>步长：从 $y1$ ($y2$) 发射激光第一次到 $y2$ ($y1$) 的水平距离。</p></li><li>步长我们可以表示为：$2^k * (2p + 1)$    ($k,p∈ 0,1,2….$)    ,   因为这个式子可以表示任何正整数（也就是正偶数和奇数）</li><li>假设 $k = 0,p = 1$ ，画出图形，步长分别为 $1,3$ </li></ul><p><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fwdvk5o1cnj30iv08iwf8.jpg" alt="img"></p><p>我们可以发现步长为 $2^k$ 的激光经过的点可以覆盖所有步长为 $2^k <em> (2p + 1)$ 的激光经过的点，且前者密度更大，所以对于一个为 $2^k </em> (2p + 1)$ 的步长，总有一个步长为 $2^k$ 的最优解存在。</p><p>有了上面的结论，我们可以先枚举 $2^k$ 的步长，任何把 $a_i,b_i \% $ $2^{k + 1}$ 映射到 $(0 - 2^{k + 1} - 1)$ 区间里，确定了步长为 $2 ^ k$ 时，那么到下一个点就是 $a_i + 2 ^ k$ 或 $b_i + 2 ^ k$。然后用 $map$ 记录一下对应的点数，最后取个 $max$ 就是答案。</p><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>,<span class="keyword">int</span>&gt; vis_a;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>,<span class="keyword">int</span>&gt; vis_b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> b[maxn];</span><br><span class="line"><span class="keyword">int</span> base[<span class="number">35</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,y_1,y_2;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">30</span>;i++)&#123;</span><br><span class="line">base[i] = <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">vis_a.clear(),vis_b.clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) vis_a[a[i] % base[k + <span class="number">1</span>]]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++) vis_b[b[i] % base[k + <span class="number">1</span>]]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">ans = max(ans,vis_a[a[i] % base[k + <span class="number">1</span>]] + vis_b[(a[i] + base[k]) % base[k + <span class="number">1</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line">ans = max(ans,vis_b[b[i] % base[k + <span class="number">1</span>]] + vis_a[(b[i] + base[k]) % base[k + <span class="number">1</span>]]); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Init();</span><br><span class="line">ans = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;y_1);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;m,&amp;y_2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">29</span>;i++) Solve(i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/10/19/Codeforces%20-%20gym%20-%20101911%20-%20L.Ray%20in%20the%20tube/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hdu 4578 Transformation(区间加值,区间乘值,区间赋值,查询区间的p次方)</title>
      <link>http://yoursite.com/2018/10/17/HDU%204578%20Transformation(%E5%8C%BA%E9%97%B4%E5%8A%A0%E5%80%BC,%E5%8C%BA%E9%97%B4%E4%B9%98%E5%80%BC,%E5%8C%BA%E9%97%B4%E8%B5%8B%E5%80%BC,%E6%9F%A5%E8%AF%A2%E5%8C%BA%E9%97%B4%E7%9A%84p%E6%AC%A1%E6%96%B9)/</link>
      <guid>http://yoursite.com/2018/10/17/HDU%204578%20Transformation(%E5%8C%BA%E9%97%B4%E5%8A%A0%E5%80%BC,%E5%8C%BA%E9%97%B4%E4%B9%98%E5%80%BC,%E5%8C%BA%E9%97%B4%E8%B5%8B%E5%80%BC,%E6%9F%A5%E8%AF%A2%E5%8C%BA%E9%97%B4%E7%9A%84p%E6%AC%A1%E6%96%B9)/</guid>
      <pubDate>Wed, 17 Oct 2018 14:31:45 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/116/7/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/116/7/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4578" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=4578</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>给你一个数组，初始值为零，有四种操作：</p><p>（1）”1 x y c”,代表 把区间 $[x,y]$ 上的值全部加c。</p><p>（2）”2 x y c”,代表 把区间 $[x,y]$ 上的值全部乘以 $c$。</p><p>（3）”3 x y c” 代表 把区间 $[x,y]$上的值全部赋值为 $c$。</p><p>（4）”4 x y p” 代表 求区间 $[x,y]$ 上值的p次方和 $1&lt;=p&lt;=3$。</p><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">3 3 5 7</span><br><span class="line">1 2 4 4</span><br><span class="line">4 1 5 2</span><br><span class="line">2 2 5 8</span><br><span class="line">4 3 5 3</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">307</span><br><span class="line">7489</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>首先先解决一个区间内可能同时出现+和<em>的操作的问题(如果出现赋值,则在赋值之前的+和</em>都是无效的),我们可以把加法累计起来,把乘法先处理了,比如说原来 $[l,r]$ 这一段上有了 $+x$ ,现在要求 $<em>y$,我们可以先把原来的每个数乘以y,然后加上 $x</em>y$,即都是先处理乘法,在处理加法。</p><p>然后处理一下区间查询的问题,假设原来的值是k,如果是乘法或者赋值的话,$sumv1,sumv2,sumv3$的修改是很容易实现的,如果是加,</p><p>$(p+k)^3=p^3+3<em>p^2</em>k+3<em>k^2</em>p+k^3$,</p><p>所以</p><p>$sumv3[rt]=sumv3[rt]+sumv2[rt]<em>3</em>k+sumv1[rt]<em>3</em>k+(r-l+1)*k^3$,同理二次方的修改也是如此</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,r,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">110100</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">10007</span>;</span><br><span class="line">ll sumv1[maxn*<span class="number">4</span>],sumv2[maxn*<span class="number">4</span>],sumv3[maxn*<span class="number">4</span>],v,op,setv[maxn*<span class="number">4</span>],mul[<span class="number">4</span>*maxn],addv[<span class="number">4</span>*maxn];</span><br><span class="line"><span class="keyword">int</span> L,R;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    sumv1[rt]=<span class="number">0</span>,sumv2[rt]=<span class="number">0</span>,sumv3[rt]=<span class="number">0</span>;</span><br><span class="line">    setv[rt]=addv[rt]=mul[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">     sumv1[rt]=(sumv1[rt&lt;&lt;<span class="number">1</span>]+sumv1[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])%MOD;</span><br><span class="line">     sumv2[rt]=(sumv2[rt&lt;&lt;<span class="number">1</span>]+sumv2[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])%MOD;</span><br><span class="line">     sumv3[rt]=(sumv3[rt&lt;&lt;<span class="number">1</span>]+sumv3[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])%MOD;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> op,<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,ll k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">        sumv3[rt]=(sumv3[rt]+sumv2[rt]*<span class="number">3</span>*k+<span class="number">3</span>*k*k*sumv1[rt]%MOD+k*k*k%MOD*(r-l+<span class="number">1</span>))%MOD;</span><br><span class="line">        sumv2[rt]=(sumv2[rt]+k*k*(r-l+<span class="number">1</span>)+<span class="number">2</span>*k*sumv1[rt])%MOD;</span><br><span class="line">        sumv1[rt]=(sumv1[rt]+k*(r-l+<span class="number">1</span>))%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)&#123;</span><br><span class="line">        sumv3[rt]=sumv3[rt]*(k*k*k%MOD)%MOD;</span><br><span class="line">        sumv2[rt]=sumv2[rt]*k*k%MOD;</span><br><span class="line">        sumv1[rt]=sumv1[rt]*k%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        sumv3[rt]=(k*k*k%MOD)*(r-l+<span class="number">1</span>)%MOD;</span><br><span class="line">        sumv2[rt]=k*k*(r-l+<span class="number">1</span>)%MOD;</span><br><span class="line">        sumv1[rt]=k*(r-l+<span class="number">1</span>)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(setv[rt]!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        change(<span class="number">3</span>,rt&lt;&lt;<span class="number">1</span>,l,mid,setv[rt]);</span><br><span class="line">        change(<span class="number">3</span>,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,setv[rt]);</span><br><span class="line">        setv[rt&lt;&lt;<span class="number">1</span>]=setv[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=setv[rt];</span><br><span class="line">        addv[rt&lt;&lt;<span class="number">1</span>]=addv[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        mul[rt&lt;&lt;<span class="number">1</span>]=mul[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        setv[rt]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mul[rt]!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        change(<span class="number">2</span>,rt&lt;&lt;<span class="number">1</span>,l,mid,mul[rt]);</span><br><span class="line">        change(<span class="number">2</span>,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,mul[rt]);</span><br><span class="line">        <span class="keyword">if</span>(mul[rt&lt;&lt;<span class="number">1</span>]==<span class="number">0</span>)</span><br><span class="line">            mul[rt&lt;&lt;<span class="number">1</span>]=mul[rt];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            mul[rt&lt;&lt;<span class="number">1</span>]=mul[rt&lt;&lt;<span class="number">1</span>]*mul[rt]%MOD;</span><br><span class="line">        <span class="keyword">if</span>(mul[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]==<span class="number">0</span>)</span><br><span class="line">            mul[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=mul[rt];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            mul[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=mul[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*mul[rt]%MOD;</span><br><span class="line">        addv[rt&lt;&lt;<span class="number">1</span>]=addv[rt&lt;&lt;<span class="number">1</span>]*mul[rt]%MOD;</span><br><span class="line">        addv[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=addv[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*mul[rt]%MOD;</span><br><span class="line">        mul[rt]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(addv[rt]!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        change(<span class="number">1</span>,rt&lt;&lt;<span class="number">1</span>,l,mid,addv[rt]);</span><br><span class="line">        change(<span class="number">1</span>,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,addv[rt]);</span><br><span class="line">        addv[rt&lt;&lt;<span class="number">1</span>]=(addv[rt&lt;&lt;<span class="number">1</span>]+addv[rt])%MOD;</span><br><span class="line">        addv[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(addv[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+addv[rt])%MOD;</span><br><span class="line">        addv[rt]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">3</span>)&#123;</span><br><span class="line">            setv[rt]=v,mul[rt]=<span class="number">0</span>,addv[rt]=<span class="number">0</span>;</span><br><span class="line">            change(op,rt,l,r,v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mul[rt]==<span class="number">0</span>)</span><br><span class="line">                mul[rt]=v;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                mul[rt]=mul[rt]*v%MOD;</span><br><span class="line">            addv[rt]=addv[rt]*v%MOD;</span><br><span class="line">            change(op,rt,l,r,v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            addv[rt]=(addv[rt]+v)%MOD;</span><br><span class="line">            change(op,rt,l,r,v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt,l,r);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid)</span><br><span class="line">        update(lson);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)</span><br><span class="line">        update(rson);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> sumv1[rt];</span><br><span class="line">        <span class="keyword">if</span>(v==<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> sumv2[rt];</span><br><span class="line">        <span class="keyword">return</span> sumv3[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt,l,r);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid)</span><br><span class="line">        ans+=query(lson);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)</span><br><span class="line">        ans+=query(rson);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%lld"</span>,&amp;op,&amp;L,&amp;R,&amp;v);</span><br><span class="line">            <span class="keyword">if</span>(op==<span class="number">4</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(<span class="number">1</span>,n,<span class="number">1</span>)%MOD);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                update(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/10/17/HDU%204578%20Transformation(%E5%8C%BA%E9%97%B4%E5%8A%A0%E5%80%BC,%E5%8C%BA%E9%97%B4%E4%B9%98%E5%80%BC,%E5%8C%BA%E9%97%B4%E8%B5%8B%E5%80%BC,%E6%9F%A5%E8%AF%A2%E5%8C%BA%E9%97%B4%E7%9A%84p%E6%AC%A1%E6%96%B9)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Deque(双端队列)</title>
      <link>http://yoursite.com/2018/10/17/Deque(%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97)/</link>
      <guid>http://yoursite.com/2018/10/17/Deque(%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97)/</guid>
      <pubDate>Wed, 17 Oct 2018 14:30:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/116/1/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/116/1/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="声明deque容器"><a href="#声明deque容器" class="headerlink" title="声明deque容器"></a>声明deque容器</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;  // 头文件</span></span></span><br><span class="line"><span class="built_in">deque</span>&lt;type&gt; deq;  <span class="comment">// 声明一个元素类型为type的双端队列que</span></span><br><span class="line"><span class="built_in">deque</span>&lt;type&gt; deq(size);  <span class="comment">// 声明一个类型为type、含有size个默认值初始化元素的的双端队列que</span></span><br><span class="line"><span class="built_in">deque</span>&lt;type&gt; deq(size, value);  <span class="comment">// 声明一个元素类型为type、含有size个value元素的双端队列que</span></span><br><span class="line"><span class="built_in">deque</span>&lt;type&gt; deq(mydeque);  <span class="comment">// deq是mydeque的一个副本</span></span><br><span class="line"><span class="built_in">deque</span>&lt;type&gt; deq(first, last);  <span class="comment">// 使用迭代器first、last范围内的元素初始化deq</span></span><br></pre></td></tr></table></figure><h2 id="deque的常用成员函数"><a href="#deque的常用成员函数" class="headerlink" title="deque的常用成员函数"></a>deque的常用成员函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; deq;</span><br><span class="line"></span><br><span class="line">deq[ ]：用来访问双向队列中单个的元素。</span><br><span class="line">deq.front()：返回第一个元素的引用。</span><br><span class="line">deq.back()：返回最后一个元素的引用。</span><br><span class="line">deq.push_front(x)：把元素x插入到双向队列的头部。</span><br><span class="line">deq.pop_front()：弹出双向队列的第一个元素。</span><br><span class="line">deq.push_back(x)：把元素x插入到双向队列的尾部。</span><br><span class="line">deq.pop_back()：弹出双向队列的最后一个元素。</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/10/17/Deque(%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Codeforces - gym - 101808 - I. Ildar Yalalov (博弈，dp)</title>
      <link>http://yoursite.com/2018/10/02/Codeforces%20-%20gym%20-%20101808%20-%20I.%20Ildar%20Yalalov%20(%E5%8D%9A%E5%BC%88%EF%BC%8Cdp)/</link>
      <guid>http://yoursite.com/2018/10/02/Codeforces%20-%20gym%20-%20101808%20-%20I.%20Ildar%20Yalalov%20(%E5%8D%9A%E5%BC%88%EF%BC%8Cdp)/</guid>
      <pubDate>Tue, 02 Oct 2018 02:02:16 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/5369/1522398270213/thumb_Fri_Mar_30_2018.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/5369/1522398270213/thumb_Fri_Mar_30_2018.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://codeforces.com/gym/101808/problem/I" target="_blank" rel="noopener">http://codeforces.com/gym/101808/problem/I</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>T 组数据</p><p>有 $n$ 堆石子，第 $i$ 堆有 $A_i$ 个石子，$Yalalov$ 和 $Shin$ 两人轮流拿，总共有 $2$ 种操作：</p><ul><li>选任意一堆石子，拿走这堆石子中的一个石子。</li><li>拿走每一堆石子中的一个石子（当所有堆石子个数大于等于 $1$ 时，才能选择此操作）</li></ul><p>如果当前轮，拿不了石子时，处在当前轮的人算输。</p><p>问：当 $Yalalov$ 先手时，最后谁赢？</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$1 ≤ N ≤ 100$</li><li>$1 ≤ A_i ≤ 10^6$ </li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yalalov</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>这道题可以看做两部分：</p><p><img src="C:\Users\GP62\AppData\Roaming\Typora\typora-user-images\1538446984136.png" alt="1538446984136"></p><ul><li>上部分</li><li>下部分</li></ul><p>所以状态为：</p><ul><li>$dp[maxn][5]$ ; 底下为i层，上面石子总数为0，奇数，偶数时的获胜状态。</li></ul><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,n) for(int i = a;i &lt;= n;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,n,a) for(int i = n;i &gt;= a;i--)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF_INT = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x7fffffff</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">5</span>]; <span class="comment">// 底下为i层，上面石子总数为0，奇数，偶数时的获胜状态。</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  1</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> x &amp; <span class="number">1</span> == <span class="number">1</span> ? <span class="number">1</span> : <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> deep,<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">// 把所有状态转移都写出来，也就是看下一层是否有必败态。</span></span><br><span class="line"><span class="keyword">if</span>(dp[deep][x] != <span class="number">0</span>) <span class="keyword">return</span> dp[deep][x];</span><br><span class="line">dp[deep][x] = <span class="number">1</span>; <span class="comment">// 初始都为必败态，只要下面有一个必败态就赢。</span></span><br><span class="line"><span class="keyword">if</span>(deep - <span class="number">1</span> &gt;= <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(Solve(deep - <span class="number">1</span>,x) == <span class="number">1</span>) dp[deep][x] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> tmp = x + n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(Solve(deep - <span class="number">1</span>,Get(tmp)) == <span class="number">1</span>) dp[deep][x] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">0</span>) <span class="keyword">if</span>(Solve(deep,x - <span class="number">1</span>) == <span class="number">1</span>) dp[deep][x] = <span class="number">2</span>; </span><br><span class="line"><span class="keyword">return</span> dp[deep][x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="keyword">int</span> mi = maxn, tot = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">rep(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]), mi = min(mi,a[i]);</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>, dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>, dp[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n) tot += a[i] - mi;</span><br><span class="line">Solve(mi,Get(tot)) == <span class="number">2</span> ? <span class="built_in">printf</span>(<span class="string">"Yalalov\n"</span>) : <span class="built_in">printf</span>(<span class="string">"Shin\n"</span>);</span><br><span class="line">rep(i,<span class="number">0</span>,mi) rep(j,<span class="number">0</span>,<span class="number">2</span>) dp[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/10/02/Codeforces%20-%20gym%20-%20101808%20-%20I.%20Ildar%20Yalalov%20(%E5%8D%9A%E5%BC%88%EF%BC%8Cdp)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>hiho - 1828 -  Saving Tang Monk II(状态，最短路)</title>
      <link>http://yoursite.com/2018/10/02/hiho%20-%201828%20-%20%20Saving%20Tang%20Monk%20II(%E7%8A%B6%E6%80%81%EF%BC%8C%E6%9C%80%E7%9F%AD%E8%B7%AF)/</link>
      <guid>http://yoursite.com/2018/10/02/hiho%20-%201828%20-%20%20Saving%20Tang%20Monk%20II(%E7%8A%B6%E6%80%81%EF%BC%8C%E6%9C%80%E7%9F%AD%E8%B7%AF)/</guid>
      <pubDate>Tue, 02 Oct 2018 00:59:48 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/246262/1536387849024/thumb_Sat_Sep_08_2018.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/palette/246262/1536387849024/thumb_Sat_Sep_08_2018.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://hihocoder.com/problemset/problem/1828" target="_blank" rel="noopener">http://hihocoder.com/problemset/problem/1828</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><ul><li>给你一个 $N * M$ 的矩阵</li><li>矩阵里总共有 $6$ 个符号 $S$ , $T$ , $.$ , $#$ , $B$ , $P$</li><li>$S$ : 出发的位置</li><li>$T$ : 终点的位置</li><li>$.$ : 可以走的位置</li><li>$#$ : 有毒气的位置</li><li>$B$ : 拥有氧气的位置</li><li>$P$ : 拥有加速卡的位置</li><li>经过 $.$ , $B$ 花费 $1$ 秒</li><li>经过 $P$ 花费 $0$ 秒</li><li>经过 $#$ 花费 $2$ 秒，和消耗一瓶氧气，经过此处必须至少携带一瓶氧气</li></ul><p>问：在最多只能同时携带 $5$ 瓶氧气的条件下，从 $S$ 到 $T$ 最少需要花费多少秒？</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$0 &lt; N,M ≤ 100$</li><li>最多 $25$ 组样例</li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2 2</span><br><span class="line">S#</span><br><span class="line">#T</span><br><span class="line"></span><br><span class="line">2 5</span><br><span class="line">SB###</span><br><span class="line">##P#T</span><br><span class="line"></span><br><span class="line">4 7</span><br><span class="line">SP.....</span><br><span class="line">P#.....</span><br><span class="line">......#</span><br><span class="line">B...##T</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br><span class="line">8</span><br><span class="line">11</span><br></pre></td></tr></table></figure><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>因为最多只能同时携带 $5$ 瓶氧气，所以我们可以想到这个状态：</p><ul><li>$dis[i][j][k]$ : 从 $S$ 出发到 $(i,j)$ ,携带 $k$ 瓶氧气时，最少花费时间（最短距离）是多少？</li></ul><p>然后我们就跑一个最短路就行。下面是跑 $spfa$ 的代码。（转移见代码）</p><p>最后答案氧气从 $0$ ~ $5$ 取个最小值。 </p><p>其实，跑最短路也是一个状态转移的过程，所以碰到此类题时，可以先想想每一个点的状态可以这么表示。</p><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">29</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> dis[maxn][maxn][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">char</span> s[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,Sx,Sy,Tx,Ty;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">NODE () &#123;&#125;</span><br><span class="line">NODE (<span class="keyword">int</span> _x,<span class="keyword">int</span> _y)&#123;</span><br><span class="line">x = _x;</span><br><span class="line">y = _y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= m;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> sta = <span class="number">0</span>;sta &lt;= <span class="number">5</span>;sta++)&#123;</span><br><span class="line">dis[i][j][sta] = inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dis[Sx][Sy][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> nx,<span class="keyword">int</span> ny)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(nx &lt;= <span class="number">0</span> || ny &lt;= <span class="number">0</span> || nx &gt; n || ny &gt; m) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;NODE&gt; seq;</span><br><span class="line">seq.push(NODE(Sx,Sy));</span><br><span class="line"><span class="keyword">while</span>(!seq.empty())&#123;</span><br><span class="line">NODE now = seq.front();</span><br><span class="line">seq.pop();</span><br><span class="line">vis[now.x][now.y] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">-1</span>;i &lt;= <span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">-1</span>;j &lt;= <span class="number">1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">int</span> nx = now.x + i;</span><br><span class="line"><span class="keyword">int</span> ny = now.y + j;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(Check(nx,ny) &amp;&amp; i * j == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[nx][ny] == <span class="string">'P'</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> sta = <span class="number">0</span>;sta &lt;= <span class="number">5</span>;sta++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[nx][ny][sta] &gt; dis[now.x][now.y][sta])&#123;</span><br><span class="line">dis[nx][ny][sta] = dis[now.x][now.y][sta];</span><br><span class="line"><span class="keyword">if</span>(!vis[nx][ny])&#123;</span><br><span class="line">vis[nx][ny] = <span class="number">1</span>;</span><br><span class="line">seq.push(NODE(nx,ny));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[nx][ny] == <span class="string">'#'</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> sta = <span class="number">0</span>;sta &lt;= <span class="number">4</span>;sta++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[nx][ny][sta] &gt; dis[now.x][now.y][sta + <span class="number">1</span>] + <span class="number">2</span>)&#123;</span><br><span class="line">dis[nx][ny][sta] = dis[now.x][now.y][sta + <span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[nx][ny])&#123;</span><br><span class="line">vis[nx][ny] = <span class="number">1</span>;</span><br><span class="line">seq.push(NODE(nx,ny));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[nx][ny] == <span class="string">'.'</span> || s[nx][ny] == <span class="string">'S'</span> || s[nx][ny] == <span class="string">'T'</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> sta = <span class="number">0</span>;sta &lt;= <span class="number">5</span>;sta++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[nx][ny][sta] &gt; dis[now.x][now.y][sta] + <span class="number">1</span>)&#123;</span><br><span class="line">dis[nx][ny][sta] = dis[now.x][now.y][sta] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[nx][ny])&#123;</span><br><span class="line">vis[nx][ny] = <span class="number">1</span>;</span><br><span class="line">seq.push(NODE(nx,ny));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[nx][ny] == <span class="string">'B'</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>sta = <span class="number">0</span>;sta &lt;= <span class="number">4</span>;sta++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[nx][ny][sta + <span class="number">1</span>] &gt; dis[now.x][now.y][sta] + <span class="number">1</span>)&#123;</span><br><span class="line">dis[nx][ny][sta + <span class="number">1</span>] = dis[now.x][now.y][sta] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[nx][ny])&#123;</span><br><span class="line">vis[nx][ny] = <span class="number">1</span>;</span><br><span class="line">seq.push(NODE(nx,ny));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m))&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= m;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %c"</span>,&amp;s[i][j]);</span><br><span class="line"><span class="keyword">if</span>(s[i][j] == <span class="string">'S'</span>) Sx = i, Sy = j;</span><br><span class="line"><span class="keyword">if</span>(s[i][j] == <span class="string">'T'</span>) Tx = i, Ty = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Init();</span><br><span class="line">Spfa();</span><br><span class="line"><span class="keyword">int</span> mi = inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">5</span>;i++) mi = min(mi,dis[Tx][Ty][i]);</span><br><span class="line"><span class="keyword">if</span>(mi == inf) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,mi);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/10/02/hiho%20-%201828%20-%20%20Saving%20Tang%20Monk%20II(%E7%8A%B6%E6%80%81%EF%BC%8C%E6%9C%80%E7%9F%AD%E8%B7%AF)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>POJ - 2104 - K-th Number(区间第k大)</title>
      <link>http://yoursite.com/2018/10/02/POJ%20-%202104%20-%20K-th%20Number(%E5%8C%BA%E9%97%B4%E7%AC%ACk%E5%A4%A7)/</link>
      <guid>http://yoursite.com/2018/10/02/POJ%20-%202104%20-%20K-th%20Number(%E5%8C%BA%E9%97%B4%E7%AC%ACk%E5%A4%A7)/</guid>
      <pubDate>Tue, 02 Oct 2018 00:51:02 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/115/4/thumb.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/115/4/thumb.jpg" alt="img"></p><a id="more"></a><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="http://poj.org/problem?id=2104" target="_blank" rel="noopener">http://poj.org/problem?id=2104</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>求区间第 $k$ 大</p><h2 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h2><ul><li>$1 &lt;= n &lt;= 100 000$</li><li>$1 &lt;= m &lt;= 5 000$</li><li>$1 &lt;= i &lt;= j &lt;= n$</li><li>$1 &lt;= k &lt;= j - i + 1$</li></ul><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>$input$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">7 3</span><br><span class="line">1 5 2 6 3 7 4</span><br><span class="line">2 5 3</span><br><span class="line">4 4 1</span><br><span class="line">1 7 3</span><br></pre></td></tr></table></figure><p>$output$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">6</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF_INT = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF_LL = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,n) for(int i = a;i &lt;= n;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,n,a) for(int i = n;i &gt;= a;i--)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">OPEN</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">freopen((s + <span class="string">".in"</span>).c_str(), <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen((s + <span class="string">".out"</span>).c_str(), <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,cnt,root[maxn],a[maxn],x,y,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> l,r,sum;&#125; T[maxn * <span class="number">40</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getid</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> lower_bound(v.begin(),v.end(),x) - v.begin() + <span class="number">1</span>;&#125; <span class="comment">//找出第一个大于等于 x 的下标 + 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y,<span class="keyword">int</span> pos)</span></span>&#123; <span class="comment">// y 是上一个线段树对应的节点</span></span><br><span class="line">T[++cnt] = T[y], T[cnt].sum++, x = cnt; <span class="comment">// 上一个节点指向下一个新节点</span></span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(mid &gt;= pos) update(l,mid,T[x].l,T[y].l,pos);</span><br><span class="line"><span class="keyword">else</span> update(mid + <span class="number">1</span>,r,T[x].r,T[y].r,pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> sum = T[T[y].l].sum - T[T[x].l].sum;</span><br><span class="line"><span class="keyword">if</span>(sum &gt;= k) <span class="keyword">return</span> query(l,mid,T[x].l,T[y].l,k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(mid + <span class="number">1</span>,r,T[x].r,T[y].r,k - sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line"></span><br><span class="line">rep(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]), v.pb(a[i]);</span><br><span class="line">sort(v.begin(),v.end()), v.erase(unique(v.begin(),v.end()),v.end());</span><br><span class="line"></span><br><span class="line">rep(i,<span class="number">1</span>,n) update(<span class="number">1</span>,n,root[i],root[i - <span class="number">1</span>],getid(a[i]));</span><br><span class="line"></span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;x,&amp;y,&amp;k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,v[query(<span class="number">1</span>,n,root[x - <span class="number">1</span>],root[y],k) - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对数据离散化后,每个节点维护对应离散化后值区间的数的总个数size。自上至下进行询问操作时，判断当前点左子树的size与要查询的排名k的大小关系。如果小于等于，就到左子树中找，k不变。否则到右子树中找排名k−size的值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//权值线段树每一个节点,记录的是在当前时刻 [值l 到 值r] 的总个数.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//建 n 个权值线段树,第 i 个权值线段树记录 1 ~ i 时刻 [值l 到 值r] 的总个数,相当于是前缀和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//区间[L,R] 中 [值l 到 值r] 的总个数,答案 =  第 R 个权值线段树代表 [值l 到 值r] 的节点 - 第 L 个权值线段树代表 [值l 到 值r] 的节点.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为这些线段树都是完全相等的,都会有对应的节点,所以可以直接相减.</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/10/02/POJ%20-%202104%20-%20K-th%20Number(%E5%8C%BA%E9%97%B4%E7%AC%ACk%E5%A4%A7)/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
